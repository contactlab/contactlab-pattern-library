{"version":3,"sources":["webpack:///webpack/bootstrap 274d72a095d7c034feba","webpack:///./src/lib/settings.html","webpack:///./src/lib/style-util.html","webpack:///./src/lib/path.html","webpack:///./src/lib/case-map.html","webpack:///./src/lib/resolve-url.html","webpack:///./src/lib/dom-innerHTML.html","webpack:///./src/lib/debounce.html","webpack:///./src/lib/style-transformer.html","webpack:///./src/lib/template/templatizer.html","webpack:///./src/lib/dom-api.html","webpack:///./src/lib/async.html","webpack:///./src/lib/apply-shim.html","webpack:///./src/lib/style-defaults.html","webpack:///./src/lib/style-cache.html","webpack:///./polymer.html","webpack:///./polymer-mini.html","webpack:///./polymer-micro.html","webpack:///./src/polymer-lib.html","webpack:///./src/lib/unresolved.html","webpack:///./src/lib/polymer-bootstrap.html","webpack:///./src/lib/lang.html","webpack:///./src/lib/render-status.html","webpack:///./src/lib/base.html","webpack:///./src/lib/dom-module.html","webpack:///./src/micro/tag.html","webpack:///./src/micro/behaviors.html","webpack:///./src/micro/extends.html","webpack:///./src/micro/constructor.html","webpack:///./src/micro/properties.html","webpack:///./src/micro/attributes.html","webpack:///./src/mini/template.html","webpack:///./src/mini/ready.html","webpack:///./src/mini/shady.html","webpack:///./src/lib/array-splice.html","webpack:///./src/lib/dom-tree-api.html","webpack:///./src/lib/dom-api-shady.html","webpack:///./src/lib/dom-api-shadow.html","webpack:///./src/lib/dom-api-flush.html","webpack:///./src/lib/dom-api-event.html","webpack:///./src/lib/dom-api-classlist.html","webpack:///./src/lib/dom-api-effective-nodes-observer.html","webpack:///./src/lib/dom-api-distributed-nodes-observer.html","webpack:///./src/mini/shadow.html","webpack:///./src/mini/debouncer.html","webpack:///./src/standard/annotations.html","webpack:///./src/lib/annotations/annotations.html","webpack:///./src/standard/events.html","webpack:///./src/standard/gestures.html","webpack:///./src/standard/utils.html","webpack:///./src/standard/effectBuilder.html","webpack:///./src/lib/bind/accessors.html","webpack:///./src/lib/bind/effects.html","webpack:///./src/standard/configure.html","webpack:///./src/standard/notify-path.html","webpack:///./src/standard/resolveUrl.html","webpack:///./src/standard/styling.html","webpack:///./src/lib/css-parse.html","webpack:///./src/lib/style-extends.html","webpack:///./src/standard/x-styling.html","webpack:///./src/lib/style-properties.html","webpack:///./src/lib/custom-style.html","webpack:///./src/lib/template/dom-template.html","webpack:///./src/lib/template/dom-repeat.html","webpack:///./src/lib/collection.html","webpack:///./src/lib/template/array-selector.html","webpack:///./src/lib/template/dom-if.html","webpack:///./src/lib/template/dom-bind.html"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;AC7DA;;;AAGA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,0BAA0B;;AAE1B;AACA;;AAEA;AACA;AACA;AACA,wBAAwB,oCAAoC;AAC5D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,KAAK;AACL;;;;;;;;;ACrDA;AACA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,2CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,2CAA2C,wBAAwB;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA,OAAO;;AAEP,qDAAqD;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,wCAAwC,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,OAAO,MAAM,MAAM,GAAG;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,MAAM,GAAG,SAAS;AACnC;AACA;AACA;AACA,OAAO;;AAEP;AACA,4BAA4B,GAAG,+BAA+B,KAAK,IAAI,IAAI,SAAS,GAAG;AACvF,gDAAgD;AAChD,yCAAyC;AACzC;AACA;AACA;AACA,sBAAsB,GAAG,IAAI;AAC7B;AACA;AACA,OAAO;;AAEP;AACA;AACA;;AAEA;;AAEA,GAAG;;;;;;;;;AC1UH;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;AC1CA;;;AAGA;;AAEA,gBAAgB;AAChB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC3BA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA,4CAA4C,oBAAoB;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,EAAE;;AAE1B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,GAAG;;;;;;;;;AC3FH;;;AAGA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,oBAAoB;AACpB;AACA,oBAAoB;AACpB;AACA,sBAAsB;AACtB;AACA,sBAAsB;AACtB;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,mBAAmB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qCAAqC,wBAAwB;AAC7D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;;;;;;;;;ACxHD;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,CAAC;;;;;;;;;AC/DD;AACA;;AAEA;;;;AAIA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,qBAAqB,aAAa;AAClC;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,wBAAwB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,6BAA6B,MAAM,qBAAqB;AACxD;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA,GAAG;;;;;;;;;AC3UH;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,kBAAkB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,uBAAuB;AACvB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA,wCAAwC;AACxC;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,W;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,yCAAyC,EAAE;AAC3C,uDAAuD,EAAE;AACzD,uDAAuD,EAAE;AACzD;AACA,kDAAkD,EAAE;AACpD,kDAAkD,EAAE;AACpD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,GAAG;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,gBAAgB,aAAa;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,qBAAqB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;AC1dA;AACA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,8DAA8D,aAAa;;AAE3E;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,iBAAiB,KAAK;AACtB,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,iBAAiB,SAAS;AAC1B;AACA;AACA;AACA;AACA,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,2CAA2C,0BAA0B;AACrE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;;;;;;;;;ACtMH;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG,mCAAmC,oBAAoB;;;;;;;;;AC3D1D;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,uBAAuB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;;AAEA;AACA;AACA;;AAEA;AACA,aAAa,YAAY,KAAK,aAAa,oBAAoB,eAAe;AAC9E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,0BAA0B,kBAAkB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,+BAA+B,QAAQ;AACvC;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAkB,qBAAqB,SAAS,gBAAgB,SAAS,IAAI,oBAAoB;AACjG;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,CAAC;;;;;;;;ACvUD;AACA;;AAEA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP,0CAA0C;;AAE1C;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,yBAAyB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA,GAAG;;;;;;;;AC7FH;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,wCAAwC,QAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;;;;;;;;ACjED;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;AC7HH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;AAIA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA,GAAG;;;;;;;;;AC/DH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;AChDH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;;;;ACbA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA,CAAC;;;;;;;;ACvBD;;;AAGA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;;;;;;;;ACpGA;;;AAGA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA,GAAG;;;;;;;;;ACVH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH;AACA;;AAEA;AACA;AACA;;;;;;;;;AChGA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;;AAEA,2CAA2C;AAC3C;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,iCAAiC;AACjC;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,0BAA0B,4BAA4B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,2BAA2B;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA,wBAAwB,4BAA4B;AACpD;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,QAAQ;AACvB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sDAAsD,0BAA0B;AAChF,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA,CAAC;;;;;;;;AC7UD;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,2BAA2B;AACjE;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;;ACjID;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;ACpBH;;;AAGA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,MAAM;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,sBAAsB,4BAA4B;AAClD;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,uCAAuC,KAAK;AAC5C;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACnJA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL,yBAAyB;;AAEzB;AACA;AACA;AACA;AACA;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;AC3EH;;;AAGA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,6B;AACA,wC;AACA;AACA;AACA,oC;AACA;AACA;AACA,gCAAgC;AAChC;AACA,kDAAkD;AAClD,2CAA2C;AAC3C;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;AC3DH;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,2BAA2B;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA,KAAK;;AAEL,kCAAkC;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,CAAC;;;;;;;;;AC/KD;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,EAAE;AACjB,gBAAgB,EAAE;AAClB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;;;;;;;;;AC1PH;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,oBAAoB;AACnC,gBAAgB,iBAAiB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;ACxEH;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA,4EAA4E;AAC5E;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,sCAAsC;AACtC,qCAAqC;AACrC,kCAAkC;;AAElC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,GAAG;;AAEH,CAAC;;;;;;;;;AC/LD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,eAAe;AACvC;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,SAAS;AAC1B,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;;AAEP,wCAAwC;AACxC;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,0CAA0C,OAAO;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,6CAA6C,oBAAoB;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,sCAAsC;AACnE,0BAA0B,4CAA4C;AACtE;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,sCAAsC,OAAO;AAC3E;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,gCAAgC;;AAEhC;AACA;;AAEA,KAAK;;;AAGL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,sBAAsB,kCAAkC;AACxD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB,qBAAqB;AAC1C;AACA;AACA;AACA;AACA,GAAG;;;;;;;;;ACzeH;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB,cAAc;AACnC;AACA;AACA;;AAEA;AACA,qBAAqB,iBAAiB;AACtC;;AAEA,iBAAiB,cAAc;AAC/B,mBAAmB,iBAAiB;AACpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,OAAO;AACP;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,qBAAqB,kBAAkB;AACvC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;AC5PD;AACA;;AAEA;;;AAGA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mCAAmC,GAAG;AACtC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,0CAA0C,GAAG;AAC7C;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,yCAAyC,GAAG;AAC5C;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,GAAG;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB,mCAAmC,GAAG;AACtC;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;ACtSD;AACA;;AAEA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDAAwD;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,gCAAgC,4BAA4B;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,sBAAsB,eAAe;AACrC;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA,uBAAuB,cAAc;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,2BAA2B;AAC3B;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,kDAAkD,aAAa;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA;AACA;AACA,OAAO;AACP;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;;AAEA,CAAC;;;;;;;;AC9nBD;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,OAAO;AACP;AACA;;AAEA,GAAG;;AAEH;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,iBAAiB,eAAe;AAChC;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA,CAAC;;;;;;;;ACxID;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,kCAAkC;AACrD;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA,GAAG;;;;;;;;;AChFH;AACA;;;AAGA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,GAAG;;AAEH;;AAEA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,qBAAqB,eAAe;AACpC;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,gCAAgC;AAC7D;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,CAAC;;;;;;;;;ACzGD;;;AAGA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;;AAEH;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;AC5DD;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA,wBAAwB,0CAA0C;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA,2BAA2B,0CAA0C;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,wBAAwB,8BAA8B;AACtD;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,sCAAsC;AAC9D,0BAA0B,4CAA4C;AACtE;AACA;AACA;AACA;AACA,oBAAoB,sCAAsC;AAC1D,yBAAyB,4BAA4B;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,OAAO;;AAEP;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+C,kBAAkB;AACjE;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA,0BAA0B,6BAA6B;AACvD;AACA;AACA;AACA;;AAEA,OAAO;;AAEP;;AAEA,CAAC;;;;;;;;;AC9PD;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,2BAA2B;;AAE3B,6BAA6B;;AAE7B;AACA;AACA,yCAAyC;;AAEzC;AACA;AACA;;AAEA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO;;AAEP;;AAEA,CAAC;;;;;;;;;ACvFD;AACA;;;;AAIA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA,iCAAiC;AACjC,qCAAqC;AACrC,sCAAsC;AACtC,uCAAuC;AACvC,sCAAsC;;AAEtC;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;;;;;;;;;AC/BA;AACA;;AAEA;;;;AAIA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;AC5EH;AACA;;AAEA;;AAEA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,aAAa,iBAAiB;AAC9B,WAAW;AACX,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,uBAAuB;AACvC;AACA;AACA;AACA,+BAA+B,uBAAuB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,gBAAgB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,0CAA0C,YAAY;AACtD,0CAA0C,YAAY;AACtD;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,eAAe;AACf,aAAa;AACb;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,kCAAkC;AACxD;AACA,uCAAuC,4BAA4B;AACnE,sCAAsC,4BAA4B;AAClE;AACA;AACA,4BAA4B,gBAAgB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA,0CAA0C;AAC1C;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,4CAA4C,6BAA6B;AACzE;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,4CAA4C,6BAA6B;AACzE;AACA;AACA,uCAAuC,4BAA4B;AACnE;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;AC/TH;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA,0DAA0D;AAC1D;AACA,+BAA+B,YAAY;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE,oCAAoC;AACpC,mCAAmC;AACnC,kCAAkC;AAClC;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,MAAM;AACnC;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA,sBAAsB,wCAAwC;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,iEAAiE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,gBAAgB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,cAAc;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,GAAG;AAC7C;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;;AC5ZD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,YAAY;AACZ;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,GAAG;;;;;;;;;ACnKH;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,WAAW;AAChD,KAAK;AACL;AACA;AACA,GAAG;;AAEH,iCAAiC,0BAA0B;AAC3D;AACA;AACA;AACA;AACA,yCAAyC,cAAc,iBAAiB,0BAA0B;AAClG;AACA;AACA,KAAK;AACL,GAAG;;AAEH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B;AAC/B;AACA;AACA;AACA,qBAAqB,iBAAiB;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,mBAAmB;AAC1C;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,sBAAsB,iBAAiB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yEAAyE,cAAc;;AAEvF;AACA,gBAAgB;AAChB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,wBAAwB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,wBAAwB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,iBAAiB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,iBAAiB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA,KAAK;;AAEL;AACA,wBAAwB,6BAA6B;AACrD;AACA,0BAA0B,oBAAoB;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,WAAW;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,6BAA6B;AACxD;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;;AAEA;;AAEA,CAAC;;;;;;;;AChvBD;AACA;;AAEA;;AAEA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,YAAY;AAC3B,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,YAAY;AAC3B,eAAe,YAAY;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA,sBAAsB,aAAa;AACnC;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB,mBAAmB;AACnC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;;AAGL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,GAAG;AAClB;AACA,eAAe,QAAQ;AACvB;AACA;AACA;AACA,gBAAgB,YAAY;AAC5B;AACA;AACA;AACA;AACA,6DAA6D;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,oBAAoB;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,SAAS;AACxB,eAAe,QAAQ;AACvB;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B;AACA,eAAe,IAAI;AACnB,gBAAgB,MAAM;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,aAAa;AAC5B;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,SAAS;AACxB;AACA,eAAe,SAAS;AACxB;AACA,eAAe,QAAQ;AACvB;AACA,gBAAgB,gBAAgB;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,aAAa;AAC5B,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;;AAEA,GAAG;;AAEH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;;;;;;;;ACreD;AACA;;AAEA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,KAAK;AACxF;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE;AACrE;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;;AAEA,wBAAwB,0CAA0C;AAClE;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,wBAAwB,0CAA0C;AAClE;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,wBAAwB,0CAA0C;AAClE;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA,yBAAyB,qCAAqC;AAC9D;AACA;AACA,8BAA8B,kCAAkC;AAChE;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP,0BAA0B,0CAA0C;AACpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,yBAAyB;AACzB,yCAAyC;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;AChXH;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA,0BAA0B,aAAa;AACvC,WAAW;AACX,sEAAsE;AACtE,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA,2CAA2C,0BAA0B;AACrE;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA,sCAAsC,uBAAuB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;;;;;;;;;ACzQA;AACA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA,wCAAwC;AACxC,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,KAAK;AACvC;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;AC1JH;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC,oBAAoB;AAC7D;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,mCAAmC,oBAAoB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;AAEH,CAAC;;;;;;;;AC3PD;AACA;;AAEA;;;;AAIA;AACA;AACA,4BAA4B,eAAe;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA,qDAAqD;AACrD;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,yBAAyB,MAAM;AAC/B;AACA,uBAAuB,YAAY;AACnC,uBAAuB,cAAc;AACrC,uBAAuB,cAAc;AACrC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,eAAe;AACtC;AACA,yBAAyB,eAAe;AACxC;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,iBAAiB,EAAE;AACnB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,kBAAkB;AACzC;AACA;AACA,8BAA8B;AAC9B;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,gCAAgC;AACjD;AACA;AACA,mDAAmD;AACnD;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,kBAAkB,EAAE;AACpB;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,+BAA+B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,GAAG;AACZ,iCAAiC;AACjC,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B,YAAY,GAAG,aAAa,GAAG,aAAa;AACzE;AACA,sCAAsC,YAAY;AAClD,8BAA8B,YAAY;AAC1C;AACA,gBAAgB,sBAAsB,aAAa,qDAAqD;AACxG,gBAAgB;AAChB;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,IAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,MAAM;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,kBAAkB,IAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,OAAO;AACxB,iBAAiB,OAAO;AACxB,kBAAkB,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;;AAEA,KAAK;;AAEL,GAAG;;;;;;;;;;AC1lBH;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;AClBH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;;;;AAIA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,4BAA4B;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,gCAAgC;AAC5D;AACA,6BAA6B,yBAAyB;AACtD;AACA;AACA;AACA;AACA,WAAW;AACX,iCAAiC,+BAA+B;AAChE;AACA;AACA;;AAEA,KAAK;;AAEL,GAAG;;;;;;;;;AClMH;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL,qBAAqB,IAAI;AACzB;AACA,kBAAkB;AAClB;AACA,kCAAkC,OAAO;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC,oBAAoB;AACzD;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,oCAAoC,IAAI;AACxC;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL,kBAAkB;AAClB,mBAAmB;;AAEnB;AACA;AACA;AACA,uBAAuB,GAAG;AAC1B,0BAA0B,KAAK,WAAW,SAAS,QAAQ;AAC3D,0BAA0B,KAAK,WAAW,SAAS,IAAI,GAAG,IAAI,KAAK;AACnE,mCAAmC,aAAa;AAChD,oBAAoB,QAAQ,WAAW,SAAS;AAChD;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA,CAAC;;;;;;;;;ACrLD;AACA;;;;AAIA;;AAEA;;AAEA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA,0DAA0D;AAC1D;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA,uCAAuC;AACvC;AACA;;AAEA;;AAEA,CAAC;;;;;;;;AC3FD;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,wBAAwB,wCAAwC;AAChE;AACA;AACA;AACA;AACA,OAAO;;AAEP;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB,QAAQ;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,SAAS;AACT,sCAAsC,oBAAoB;AAC1D;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA,GAAG;;;;;;;;ACvVH;AACA;;AAEA;;AAEA;;AAEA;;;;AAIA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,mCAAmC;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA,WAAW;AACX;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,OAAO;;AAEP;AACA,2CAA2C;AAC3C;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,wBAAwB,kBAAkB;AAC1C;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA,yCAAyC,aAAa;AACtD;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA,qCAAqC;AACrC,2BAA2B,gBAAgB;AAC3C;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA,2BAA2B,0CAA0C;AACrE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,gBAAgB;AAChB,OAAO;;AAEP;;AAEA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2C;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA,0BAA0B,gBAAgB;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT,gBAAgB;AAChB,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA,0BAA0B;AAC1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,6BAA6B;AACpD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;ACpjBH;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,aAAa;AACb,iCAAiC,gBAAgB;AACjD;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDAAyD;AACzD,2DAA2D;AAC3D,+DAA+D;AAC/D;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA,GAAG;;AAEH,CAAC;;;;;;;;ACzND;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,GAAG;;;;;;;;;AC5BH;AACA;;AAEA;;;;AAIA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,qBAAqB,0BAA0B;AAC/C;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,oBAAoB,kDAAkD,EAAE;AACxE;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,oBAAoB,oDAAoD,EAAE;AAC1E;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO,OAAO;AACd;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,qBAAqB,gBAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA,OAAO;AACP,wCAAwC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,uBAAuB,gBAAgB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,eAAe,eAAe;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,0CAA0C,MAAM;AAChD;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sCAAsC;AAC5D,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC,OAAO;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,sCAAsC;AACtC;AACA;AACA;AACA,sBAAsB,sCAAsC;AAC5D;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,mBAAmB,0BAA0B;AAC7C;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,yBAAyB,+BAA+B;AACxD;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,yBAAyB,+BAA+B;AACxD;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,YAAY;AAC3B,gBAAgB,IAAI;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;;AC1vBH;AACA;;;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,mBAAmB,YAAY;AAC/B;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,sBAAsB,sCAAsC;AAC5D;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA;AACA,iBAAiB,gBAAgB;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AChLA;;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,wBAAwB;AAC7C;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB,QAAQ;AACxB;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;ACzJH;AACA;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;;AAEP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,8BAA8B,4BAA4B;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,4BAA4B;AACtD;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG;;;;;;;;;ACrMH;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,OAAO;AACP,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,qBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,GAAG","file":"polymer.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 14);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 274d72a095d7c034feba","/*__wc__loader*/\n\n\n  window.Polymer = {\n    Settings: (function() {\n      // NOTE: Users must currently opt into using ShadowDOM. They do so by doing:\n      // Polymer = {dom: 'shadow'};\n      // TODO(sorvell): Decide if this should be auto-use when available.\n      // TODO(sorvell): if SD is auto-use, then the flag above should be something\n      // like: Polymer = {dom: 'shady'}\n\n      // via Polymer object\n      var settings = window.Polymer || {};\n\n      // via url\n      if (!settings.noUrlSettings) {\n        var parts = location.search.slice(1).split('&');\n        for (var i=0, o; (i < parts.length) && (o=parts[i]); i++) {\n          o = o.split('=');\n          o[0] && (settings[o[0]] = o[1] || true);\n        }\n      }\n\n      settings.wantShadow = (settings.dom === 'shadow');\n      settings.hasShadow = Boolean(Element.prototype.createShadowRoot);\n      settings.nativeShadow = settings.hasShadow && !window.ShadowDOMPolyfill;\n      settings.useShadow = settings.wantShadow && settings.hasShadow;\n\n      settings.hasNativeImports =\n        Boolean('import' in document.createElement('link'));\n      settings.useNativeImports = settings.hasNativeImports;\n\n      settings.useNativeCustomElements = (!window.CustomElements ||\n        window.CustomElements.useNative);\n\n      settings.useNativeShadow = settings.useShadow && settings.nativeShadow;\n\n      settings.usePolyfillProto = !settings.useNativeCustomElements &&\n        !Object.__proto__;\n\n      // chrome 49 has semi-working css vars, check if box-shadow works\n      // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\n      settings.hasNativeCSSProperties =\n        (!navigator.userAgent.match('AppleWebKit/601') && window.CSS\n        && CSS.supports && CSS.supports('box-shadow', '0 0 0 var(--foo)'));\n\n      settings.useNativeCSSProperties = settings.hasNativeCSSProperties &&\n        settings.lazyRegister && settings.useNativeCSSProperties;\n\n      settings.isIE = navigator.userAgent.match('Trident');\n\n      return settings;\n    })()\n  };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/settings.html\n// module id = 0\n// module chunks = 0","/*__wc__loader*/\nrequire('./settings.html');\n\nrequire('./css-parse.html');\n\n\n\n  Polymer.StyleUtil = (function() {\n    var settings = Polymer.Settings;\n\n    return {\n      // chrome 49 has semi-working css vars, check if box-shadow works\n      // safari 9.1 has a recalc bug: https://bugs.webkit.org/show_bug.cgi?id=155782\n      NATIVE_VARIABLES: Polymer.Settings.useNativeCSSProperties,\n      MODULE_STYLES_SELECTOR: 'style, link[rel=import][type~=css], template',\n      INCLUDE_ATTR: 'include',\n\n      toCssText: function(rules, callback) {\n        if (typeof rules === 'string') {\n          rules = this.parser.parse(rules);\n        }\n        if (callback) {\n          this.forEachRule(rules, callback);\n        }\n        return this.parser.stringify(rules, this.NATIVE_VARIABLES);\n      },\n\n      forRulesInStyles: function(styles, styleRuleCallback, keyframesRuleCallback) {\n        if (styles) {\n          for (var i=0, l=styles.length, s; (i<l) && (s=styles[i]); i++) {\n            this.forEachRuleInStyle(\n                s,\n                styleRuleCallback,\n                keyframesRuleCallback);\n          }\n        }\n      },\n\n      forActiveRulesInStyles: function(styles, styleRuleCallback, keyframesRuleCallback) {\n        if (styles) {\n          for (var i=0, l=styles.length, s; (i<l) && (s=styles[i]); i++) {\n            this.forEachRuleInStyle(\n                s,\n                styleRuleCallback,\n                keyframesRuleCallback,\n                true\n              );\n          }\n        }\n      },\n\n      rulesForStyle: function(style) {\n        if (!style.__cssRules && style.textContent) {\n          style.__cssRules = this.parser.parse(style.textContent);\n        }\n        return style.__cssRules;\n      },\n\n      // Tests if a rule is a keyframes selector, which looks almost exactly\n      // like a normal selector but is not (it has nothing to do with scoping\n      // for example).\n      isKeyframesSelector: function(rule) {\n        return rule.parent &&\n            rule.parent.type === this.ruleTypes.KEYFRAMES_RULE;\n      },\n\n      forEachRuleInStyle: function(style, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n        var rules = this.rulesForStyle(style);\n        var styleCallback, keyframeCallback;\n        if (styleRuleCallback) {\n          styleCallback = function(rule) {\n            styleRuleCallback(rule, style);\n          };\n        }\n        if (keyframesRuleCallback) {\n          keyframeCallback = function(rule) {\n            keyframesRuleCallback(rule, style);\n          }\n        }\n        this.forEachRule(\n          rules,\n          styleCallback,\n          keyframeCallback,\n          onlyActiveRules\n        );\n      },\n\n      forEachRule: function(node, styleRuleCallback, keyframesRuleCallback, onlyActiveRules) {\n        if (!node) {\n          return;\n        }\n        var skipRules = false;\n        if (onlyActiveRules) {\n          if (node.type === this.ruleTypes.MEDIA_RULE) {\n            var matchMedia = node.selector.match(this.rx.MEDIA_MATCH);\n            if (matchMedia) {\n              // if rule is a non matching @media rule, skip subrules\n              if (!window.matchMedia(matchMedia[1]).matches) {\n                skipRules = true;\n              }\n            }\n          }\n        }\n        if (node.type === this.ruleTypes.STYLE_RULE) {\n          styleRuleCallback(node);\n        } else if (keyframesRuleCallback &&\n                   node.type === this.ruleTypes.KEYFRAMES_RULE) {\n          keyframesRuleCallback(node);\n        } else if (node.type === this.ruleTypes.MIXIN_RULE) {\n          skipRules = true;\n        }\n        var r$ = node.rules;\n        if (r$ && !skipRules) {\n          for (var i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n            this.forEachRule(r, styleRuleCallback, keyframesRuleCallback, onlyActiveRules);\n          }\n        }\n      },\n\n      // add a string of cssText to the document.\n      applyCss: function(cssText, moniker, target, contextNode) {\n        var style = this.createScopeStyle(cssText, moniker);\n        return this.applyStyle(style, target, contextNode);\n      },\n\n      applyStyle: function(style, target, contextNode) {\n        target = target || document.head;\n        var after = (contextNode && contextNode.nextSibling) ||\n          target.firstChild;\n        this.__lastHeadApplyNode = style;\n        return target.insertBefore(style, after);\n      },\n\n      createScopeStyle: function(cssText, moniker) {\n        var style = document.createElement('style');\n        if (moniker) {\n          style.setAttribute('scope', moniker);\n        }\n        style.textContent = cssText;\n        return style;\n      },\n\n      __lastHeadApplyNode: null,\n\n      // insert a comment node as a styling position placeholder.\n      applyStylePlaceHolder: function(moniker) {\n        var placeHolder = document.createComment(' Shady DOM styles for ' +\n          moniker + ' ');\n        var after = this.__lastHeadApplyNode ?\n          this.__lastHeadApplyNode.nextSibling : null;\n        var scope = document.head;\n        scope.insertBefore(placeHolder, after || scope.firstChild);\n        this.__lastHeadApplyNode = placeHolder;\n        return placeHolder;\n      },\n\n      cssFromModules: function(moduleIds, warnIfNotFound) {\n        var modules = moduleIds.trim().split(' ');\n        var cssText = '';\n        for (var i=0; i < modules.length; i++) {\n          cssText += this.cssFromModule(modules[i], warnIfNotFound);\n        }\n        return cssText;\n      },\n\n      // returns cssText of styles in a given module; also un-applies any\n      // styles that apply to the document.\n      cssFromModule: function(moduleId, warnIfNotFound) {\n        var m = Polymer.DomModule.import(moduleId);\n        if (m && !m._cssText) {\n          m._cssText = this.cssFromElement(m);\n        }\n        if (!m && warnIfNotFound) {\n          console.warn('Could not find style data in module named', moduleId);\n        }\n        return m && m._cssText || '';\n      },\n\n      // support lots of ways to discover css...\n      cssFromElement: function(element) {\n        var cssText = '';\n        // if element is a template, get content from its .content\n        var content = element.content || element;\n        var e$ = Polymer.TreeApi.arrayCopy(\n          content.querySelectorAll(this.MODULE_STYLES_SELECTOR));\n        for (var i=0, e; i < e$.length; i++) {\n          e = e$[i];\n          // look inside templates for elements\n          if (e.localName === 'template') {\n            // retain css content when specified,\n            if (!e.hasAttribute('preserve-content')) {\n              cssText += this.cssFromElement(e);\n            }\n          } else {\n            // style elements inside dom-modules will apply to the main document\n            // we don't want this, so we remove them here.\n            if (e.localName === 'style') {\n              var include = e.getAttribute(this.INCLUDE_ATTR);\n              // now support module refs on 'styling' elements\n              if (include) {\n                cssText += this.cssFromModules(include, true);\n              }\n              // get style element applied to main doc via HTMLImports polyfill\n              e = e.__appliedElement || e;\n              e.parentNode.removeChild(e);\n              cssText += this.resolveCss(e.textContent, element.ownerDocument);\n            // it's an import, assume this is a text file of css content.\n            // TODO(sorvell): plan is to deprecate this way to get styles;\n            // remember to add deprecation warning when this is done.\n            } else if (e.import && e.import.body) {\n              cssText += this.resolveCss(e.import.body.textContent, e.import);\n            }\n          }\n        }\n        return cssText;\n      },\n\n      styleIncludesToTemplate: function(targetTemplate) {\n        var styles = targetTemplate.content.querySelectorAll('style[include]');\n        for (var i=0, s; i < styles.length; i++) {\n          s = styles[i];\n          s.parentNode.insertBefore(\n            this._includesToFragment(s.getAttribute('include')), s);\n        }\n      },\n\n      _includesToFragment: function(styleIncludes) {\n        var includeArray = styleIncludes.trim().split(' ');\n        var frag = document.createDocumentFragment();\n        for (var i=0; i < includeArray.length; i++) {\n          var t = Polymer.DomModule.import(includeArray[i], 'template');\n          if (t) {\n            this._addStylesToFragment(frag, t.content);\n          }\n        }\n        return frag;\n      },\n\n      _addStylesToFragment: function(frag, source) {\n        var s$ = source.querySelectorAll('style');\n        for (var i=0, s; i < s$.length; i++) {\n          s = s$[i];\n          var include = s.getAttribute('include');\n          if (include) {\n            frag.appendChild(this._includesToFragment(include));\n          }\n          if (s.textContent) {\n            frag.appendChild(s.cloneNode(true));\n          }\n\n        }\n      },\n\n      isTargetedBuild: function(buildType) {\n        return settings.useNativeShadow ? buildType === 'shadow' : buildType === 'shady';\n      },\n\n      cssBuildTypeForModule: function (module) {\n        var dm = Polymer.DomModule.import(module);\n        if (dm) {\n          return this.getCssBuildType(dm);\n        }\n      },\n\n      getCssBuildType: function(element) {\n        return element.getAttribute('css-build');\n      },\n\n      // Walk from text[start] matching parens\n      // returns position of the outer end paren\n      _findMatchingParen: function(text, start) {\n        var level = 0;\n        for (var i=start, l=text.length; i < l; i++) {\n          switch (text[i]) {\n            case '(':\n              level++;\n              break;\n            case ')':\n              if (--level === 0) {\n                return i;\n              }\n              break;\n          }\n        }\n        return -1;\n      },\n\n      processVariableAndFallback: function(str, callback) {\n        // find 'var('\n        var start = str.indexOf('var(');\n        if (start === -1) {\n          // no var?, everything is prefix\n          return callback(str, '', '', '');\n        }\n        //${prefix}var(${inner})${suffix}\n        var end = this._findMatchingParen(str, start + 3);\n        var inner = str.substring(start + 4, end);\n        var prefix = str.substring(0, start);\n        // suffix may have other variables\n        var suffix = this.processVariableAndFallback(str.substring(end + 1), callback);\n        var comma = inner.indexOf(',');\n        // value and fallback args should be trimmed to match in property lookup\n        if (comma === -1) {\n          // variable, no fallback\n          return callback(prefix, inner.trim(), '', suffix);\n        }\n        // var(${value},${fallback})\n        var value = inner.substring(0, comma).trim();\n        var fallback = inner.substring(comma + 1).trim();\n        return callback(prefix, value, fallback, suffix);\n      },\n\n      rx: {\n        VAR_ASSIGN: /(?:^|[;\\s{]\\s*)(--[\\w-]*?)\\s*:\\s*(?:([^;{]*)|{([^}]*)})(?:(?=[;\\s}])|$)/gi,\n        MIXIN_MATCH: /(?:^|\\W+)@apply\\s*\\(?([^);\\n]*)\\)?/gi,\n        VAR_CONSUMED: /(--[\\w-]+)\\s*([:,;)]|$)/gi,\n        ANIMATION_MATCH: /(animation\\s*:)|(animation-name\\s*:)/,\n        MEDIA_MATCH: /@media[^(]*(\\([^)]*\\))/,\n        IS_VAR: /^--/,\n        BRACKETED: /\\{[^}]*\\}/g,\n        HOST_PREFIX: '(?:^|[^.#[:])',\n        HOST_SUFFIX: '($|[.:[\\\\s>+~])'\n      },\n\n      resolveCss: Polymer.ResolveUrl.resolveCss,\n      parser: Polymer.CssParse,\n      ruleTypes: Polymer.CssParse.types\n\n    };\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/style-util.html\n// module id = 1\n// module chunks = 0","/*__wc__loader*/\n\n\n  Polymer.Path = {\n\n    root: function(path) {\n      var dotIndex = path.indexOf('.');\n      if (dotIndex === -1) {\n        return path;\n      }\n      return path.slice(0, dotIndex);\n    },\n\n    isDeep: function(path) {\n      return path.indexOf('.') !== -1;\n    },\n\n    // Given `base` is `foo.bar`, `foo` is an ancestor, `foo.bar` is not\n    isAncestor: function(base, path) {\n      //     base.startsWith(path + '.');\n      return base.indexOf(path + '.') === 0;\n    },\n\n    // Given `base` is `foo.bar`, `foo.bar.baz` is an descendant\n    isDescendant: function(base, path) {\n      //     path.startsWith(base + '.');\n      return path.indexOf(base + '.') === 0;\n    },\n\n    // can be read as:  from  to       path\n    translate: function(base, newBase, path) {\n      // Defense?\n      return newBase + path.slice(base.length);\n    },\n\n    matches: function(base, wildcard, path) {\n      return (base === path) ||\n             this.isAncestor(base, path) ||\n             (Boolean(wildcard) && this.isDescendant(base, path));\n    }\n\n\n  };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/path.html\n// module id = 2\n// module chunks = 0","/*__wc__loader*/\n\n\n  Polymer.CaseMap = {\n\n    _caseMap: {},\n    _rx: {\n      dashToCamel: /-[a-z]/g,\n      camelToDash: /([A-Z])/g\n    },\n\n    dashToCamelCase: function(dash) {\n      return this._caseMap[dash] || (\n        this._caseMap[dash] = dash.indexOf('-') < 0 ? dash : dash.replace(this._rx.dashToCamel,\n          function(m) {\n            return m[1].toUpperCase();\n          }\n        )\n      );\n    },\n\n    camelToDashCase: function(camel) {\n      return this._caseMap[camel] || (\n        this._caseMap[camel] = camel.replace(this._rx.camelToDash, '-$1').toLowerCase()\n      );\n    }\n\n  };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/case-map.html\n// module id = 3\n// module chunks = 0","/*__wc__loader*/\n\n\n  (function() {\n\n    // path fixup for urls in cssText that's expected to\n    // come from a given ownerDocument\n    function resolveCss(cssText, ownerDocument) {\n      return cssText.replace(CSS_URL_RX, function(m, pre, url, post) {\n        return pre + '\\'' +\n          resolve(url.replace(/[\"']/g, ''), ownerDocument) +\n          '\\'' + post;\n      });\n    }\n\n    // url fixup for urls in an element's attributes made relative to\n    // ownerDoc's base url\n    function resolveAttrs(element, ownerDocument) {\n      for (var name in URL_ATTRS) {\n        var a$ = URL_ATTRS[name];\n        for (var i=0, l=a$.length, a, at, v; (i<l) && (a=a$[i]); i++) {\n          if (name === '*' || element.localName === name) {\n            at = element.attributes[a];\n            v = at && at.value;\n            if (v && (v.search(BINDING_RX) < 0)) {\n              at.value = (a === 'style') ?\n                resolveCss(v, ownerDocument) :\n                resolve(v, ownerDocument);\n            }\n          }\n        }\n      }\n    }\n\n    function resolve(url, ownerDocument) {\n      // do not modify absolute urls\n      if (url && ABS_URL.test(url)) {\n        return url;\n      }\n      var resolver = getUrlResolver(ownerDocument);\n      resolver.href = url;\n      return resolver.href || url;\n    }\n\n    var tempDoc;\n    var tempDocBase;\n    function resolveUrl(url, baseUri) {\n      if (!tempDoc) {\n        tempDoc = document.implementation.createHTMLDocument('temp');\n        tempDocBase = tempDoc.createElement('base');\n        tempDoc.head.appendChild(tempDocBase);\n      }\n      tempDocBase.href = baseUri;\n      return resolve(url, tempDoc);\n    }\n\n    function getUrlResolver(ownerDocument) {\n      return ownerDocument.body.__urlResolver ||\n        (ownerDocument.body.__urlResolver = ownerDocument.createElement('a'));\n    }\n\n    /**\n     * Returns a path from a given `url`. The path includes the trailing\n     * `/` from the url.\n     * @param {string} url Input URL to transform\n     * @return {string} resolved path\n     */\n    function pathFromUrl(url) {\n      return url.substring(0, url.lastIndexOf('/') + 1);\n    }\n\n    var CSS_URL_RX = /(url\\()([^)]*)(\\))/g;\n    var URL_ATTRS = {\n      '*': ['href', 'src', 'style', 'url'],\n      form: ['action']\n    };\n    var ABS_URL = /(^\\/)|(^#)|(^[\\w-\\d]*:)/;\n    var BINDING_RX = /\\{\\{|\\[\\[/;\n\n    // exports\n    Polymer.ResolveUrl = {\n      resolveCss: resolveCss,\n      resolveAttrs: resolveAttrs,\n      resolveUrl: resolveUrl,\n      pathFromUrl: pathFromUrl\n    };\n\n    // NOTE: IE11 does not support baseURI\n    Polymer.rootPath = Polymer.Settings.rootPath ||\n      pathFromUrl(document.baseURI || window.location.href);\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/resolve-url.html\n// module id = 4\n// module chunks = 0","/*__wc__loader*/\n\n\nPolymer.domInnerHTML = (function() {\n\n  // Cribbed from ShadowDOM polyfill\n  // https://github.com/webcomponents/webcomponentsjs/blob/master/src/ShadowDOM/wrappers/HTMLElement.js#L28\n  /////////////////////////////////////////////////////////////////////////////\n  // innerHTML and outerHTML\n\n  // http://www.whatwg.org/specs/web-apps/current-work/multipage/the-end.html#escapingString\n  var escapeAttrRegExp = /[&\\u00A0\"]/g;\n  var escapeDataRegExp = /[&\\u00A0<>]/g;\n\n  function escapeReplace(c) {\n    switch (c) {\n      case '&':\n        return '&amp;';\n      case '<':\n        return '&lt;';\n      case '>':\n        return '&gt;';\n      case '\"':\n        return '&quot;';\n      case '\\u00A0':\n        return '&nbsp;';\n    }\n  }\n\n  function escapeAttr(s) {\n    return s.replace(escapeAttrRegExp, escapeReplace);\n  }\n\n  function escapeData(s) {\n    return s.replace(escapeDataRegExp, escapeReplace);\n  }\n\n  function makeSet(arr) {\n    var set = {};\n    for (var i = 0; i < arr.length; i++) {\n      set[arr[i]] = true;\n    }\n    return set;\n  }\n\n  // http://www.whatwg.org/specs/web-apps/current-work/#void-elements\n  var voidElements = makeSet([\n    'area',\n    'base',\n    'br',\n    'col',\n    'command',\n    'embed',\n    'hr',\n    'img',\n    'input',\n    'keygen',\n    'link',\n    'meta',\n    'param',\n    'source',\n    'track',\n    'wbr'\n  ]);\n\n  var plaintextParents = makeSet([\n    'style',\n    'script',\n    'xmp',\n    'iframe',\n    'noembed',\n    'noframes',\n    'plaintext',\n    'noscript'\n  ]);\n\n  function getOuterHTML(node, parentNode, composed) {\n    switch (node.nodeType) {\n      case Node.ELEMENT_NODE:\n        //var tagName = node.tagName.toLowerCase();\n        var tagName = node.localName;\n        var s = '<' + tagName;\n        var attrs = node.attributes;\n        for (var i = 0, attr; (attr = attrs[i]); i++) {\n          s += ' ' + attr.name + '=\"' + escapeAttr(attr.value) + '\"';\n        }\n        s += '>';\n        if (voidElements[tagName]) {\n          return s;\n        }\n        return s + getInnerHTML(node, composed) + '</' + tagName + '>';\n      case Node.TEXT_NODE:\n        var data = node.data;\n        if (parentNode && plaintextParents[parentNode.localName]) {\n          return data;\n        }\n        return escapeData(data);\n      case Node.COMMENT_NODE:\n        return '<!--' + node.data + '-->';\n      default:\n        console.error(node);\n        throw new Error('not implemented');\n    }\n  }\n\n  function getInnerHTML(node, composed) {\n    if (node instanceof HTMLTemplateElement)\n      node = node.content;\n    var s = '';\n    var c$ = Polymer.dom(node).childNodes;\n    for (var i=0, l=c$.length, child; (i<l) && (child=c$[i]); i++) {\n      s += getOuterHTML(child, node, composed);\n    }\n    return s;\n  }\n\n  return {\n    getInnerHTML: getInnerHTML\n  };\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-innerHTML.html\n// module id = 5\n// module chunks = 0","/*__wc__loader*/\n\n\nPolymer.Debounce = (function() {\n  \n  // usage\n  \n  // invoke cb.call(this) in 100ms, unless the job is re-registered,\n  // which resets the timer\n  // \n  // this.job = this.debounce(this.job, cb, 100)\n  //\n  // returns a handle which can be used to re-register a job\n\n  var Async = Polymer.Async;\n  \n  var Debouncer = function(context) {\n    this.context = context;\n    var self = this;\n    this.boundComplete = function() {\n      self.complete();\n    }\n  };\n  \n  Debouncer.prototype = {\n    go: function(callback, wait) {\n      var h;\n      this.finish = function() {\n        Async.cancel(h);\n      };\n      h = Async.run(this.boundComplete, wait);\n      this.callback = callback;\n    },\n    stop: function() {\n      if (this.finish) {\n        this.finish();\n        this.finish = null;\n        this.callback = null;\n      }\n    },\n    complete: function() {\n      if (this.finish) {\n        var callback = this.callback;\n        this.stop();\n        callback.call(this.context);\n      }\n    }\n  };\n\n  function debounce(debouncer, callback, wait) {\n    if (debouncer) {\n      debouncer.stop();\n    } else {\n      debouncer = new Debouncer(this);\n    }\n    debouncer.go(callback, wait);\n    return debouncer;\n  }\n  \n  // exports \n\n  return debounce;\n  \n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/debounce.html\n// module id = 6\n// module chunks = 0","/*__wc__loader*/\nrequire('./style-util.html');\n\nrequire('./settings.html');\n\n\n\n  Polymer.StyleTransformer = (function() {\n\n    var styleUtil = Polymer.StyleUtil;\n    var settings = Polymer.Settings;\n\n    /* Transforms ShadowDOM styling into ShadyDOM styling\n\n     * scoping:\n\n        * elements in scope get scoping selector class=\"x-foo-scope\"\n        * selectors re-written as follows:\n\n          div button -> div.x-foo-scope button.x-foo-scope\n\n     * :host -> scopeName\n\n     * :host(...) -> scopeName...\n\n     * ::content -> ' '\n\n     * ::shadow, /deep/: processed similar to ::content\n\n     * :host-context(...): scopeName..., ... scopeName\n\n    */\n    var api = {\n\n      // Given a node and scope name, add a scoping class to each node\n      // in the tree. This facilitates transforming css into scoped rules.\n      dom: function(node, scope, useAttr, shouldRemoveScope) {\n        this._transformDom(node, scope || '', useAttr, shouldRemoveScope);\n      },\n\n      _transformDom: function(node, selector, useAttr, shouldRemoveScope) {\n        if (node.setAttribute) {\n          this.element(node, selector, useAttr, shouldRemoveScope);\n        }\n        var c$ = Polymer.dom(node).childNodes;\n        for (var i=0; i<c$.length; i++) {\n          this._transformDom(c$[i], selector, useAttr, shouldRemoveScope);\n        }\n      },\n\n      element: function(element, scope, useAttr, shouldRemoveScope) {\n        if (useAttr) {\n          if (shouldRemoveScope) {\n            element.removeAttribute(SCOPE_NAME);\n          } else {\n            element.setAttribute(SCOPE_NAME, scope);\n          }\n        } else {\n          // note: if using classes, we add both the general 'style-scope' class\n          // as well as the specific scope. This enables easy filtering of all\n          // `style-scope` elements\n          if (scope) {\n            // note: svg on IE does not have classList so fallback to class\n            if (element.classList) {\n              if (shouldRemoveScope) {\n                element.classList.remove(SCOPE_NAME);\n                element.classList.remove(scope);\n              } else {\n                element.classList.add(SCOPE_NAME);\n                element.classList.add(scope);\n              }\n            } else if (element.getAttribute) {\n              var c = element.getAttribute(CLASS);\n              if (shouldRemoveScope) {\n                if (c) {\n                  element.setAttribute(CLASS, c.replace(SCOPE_NAME, '')\n                    .replace(scope, ''));\n                }\n              } else {\n                element.setAttribute(CLASS, (c ? c + ' ' : '') +\n                  SCOPE_NAME + ' ' + scope);\n              }\n            }\n          }\n        }\n      },\n\n      elementStyles: function(element, callback) {\n        var styles = element._styles;\n        var cssText = '';\n        var cssBuildType = element.__cssBuild;\n        var passthrough = settings.useNativeShadow || cssBuildType === 'shady';\n        var cb;\n        // use the style node visitor callback to update the selector\n        if (passthrough) {\n          var self = this;\n          cb = function(rule) {\n            rule.selector = self._slottedToContent(rule.selector);\n            rule.selector = rule.selector.replace(ROOT, ':host > *');\n            if (callback) {\n              callback(rule);\n            }\n          }\n        }\n        for (var i=0, l=styles.length, s; (i<l) && (s=styles[i]); i++) {\n          var rules = styleUtil.rulesForStyle(s);\n          // no need to shim selectors if settings.useNativeShadow, also\n          // a shady css build will already have transformed selectors\n          // NOTE: This method may be called as part of static or property shimming.\n          // When there is a targeted build it will not be called for static shimming,\n          // but when the property shim is used it is called and should opt out of\n          // static shimming work when a proper build exists.\n          cssText += (passthrough) ?\n            styleUtil.toCssText(rules, cb) :\n            this.css(rules, element.is, element.extends, callback,\n            element._scopeCssViaAttr) + '\\n\\n';\n        }\n        return cssText.trim();\n      },\n\n      // Given a string of cssText and a scoping string (scope), returns\n      // a string of scoped css where each selector is transformed to include\n      // a class created from the scope. ShadowDOM selectors are also transformed\n      // (e.g. :host) to use the scoping selector.\n      css: function(rules, scope, ext, callback, useAttr) {\n        var hostScope = this._calcHostScope(scope, ext);\n        scope = this._calcElementScope(scope, useAttr);\n        var self = this;\n        return styleUtil.toCssText(rules, function(rule) {\n          if (!rule.isScoped) {\n            self.rule(rule, scope, hostScope);\n            rule.isScoped = true;\n          }\n          if (callback) {\n            callback(rule, scope, hostScope);\n          }\n        });\n      },\n\n      _calcElementScope: function (scope, useAttr) {\n        if (scope) {\n          return useAttr ?\n            CSS_ATTR_PREFIX + scope + CSS_ATTR_SUFFIX :\n            CSS_CLASS_PREFIX + scope;\n        } else {\n          return '';\n        }\n      },\n\n      _calcHostScope: function(scope, ext) {\n        return ext ? '[is=' +  scope + ']' : scope;\n      },\n\n      rule: function (rule, scope, hostScope) {\n        this._transformRule(rule, this._transformComplexSelector,\n          scope, hostScope);\n      },\n\n      // transforms a css rule to a scoped rule.\n      _transformRule: function(rule, transformer, scope, hostScope) {\n        // NOTE: save transformedSelector for subsequent matching of elements\n        // against selectors (e.g. when calculating style properties)\n        rule.selector = rule.transformedSelector =\n          this._transformRuleCss(rule, transformer, scope, hostScope);\n      },\n\n      _transformRuleCss: function(rule, transformer, scope, hostScope) {\n        var p$ = rule.selector.split(COMPLEX_SELECTOR_SEP);\n        // we want to skip transformation of rules that appear in keyframes,\n        // because they are keyframe selectors, not element selectors.\n        if (!styleUtil.isKeyframesSelector(rule)) {\n          for (var i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n            p$[i] = transformer.call(this, p, scope, hostScope);\n          }\n        }\n        return p$.join(COMPLEX_SELECTOR_SEP);\n      },\n\n      _transformComplexSelector: function(selector, scope, hostScope) {\n        var stop = false;\n        var hostContext = false;\n        var self = this;\n        selector = selector.trim();\n        selector = this._slottedToContent(selector);\n        selector = selector.replace(ROOT, ':host > *');\n        selector = selector.replace(CONTENT_START, HOST + ' $1');\n        selector = selector.replace(SIMPLE_SELECTOR_SEP, function(m, c, s) {\n          if (!stop) {\n            var info = self._transformCompoundSelector(s, c, scope, hostScope);\n            stop = stop || info.stop;\n            hostContext = hostContext || info.hostContext;\n            c = info.combinator;\n            s = info.value;\n          } else {\n            s = s.replace(SCOPE_JUMP, ' ');\n          }\n          return c + s;\n        });\n        if (hostContext) {\n          selector = selector.replace(HOST_CONTEXT_PAREN,\n            function(m, pre, paren, post) {\n              return pre + paren + ' ' + hostScope + post +\n                COMPLEX_SELECTOR_SEP + ' ' + pre + hostScope + paren + post;\n             });\n        }\n        return selector;\n      },\n\n      _transformCompoundSelector: function(selector, combinator, scope, hostScope) {\n        // replace :host with host scoping class\n        var jumpIndex = selector.search(SCOPE_JUMP);\n        var hostContext = false;\n        if (selector.indexOf(HOST_CONTEXT) >=0) {\n          hostContext = true;\n        } else if (selector.indexOf(HOST) >=0) {\n          selector = this._transformHostSelector(selector, hostScope);\n        // replace other selectors with scoping class\n        } else if (jumpIndex !== 0) {\n          selector = scope ? this._transformSimpleSelector(selector, scope) :\n            selector;\n        }\n        // remove left-side combinator when dealing with ::content.\n        if (selector.indexOf(CONTENT) >= 0) {\n          combinator = '';\n        }\n        // process scope jumping selectors up to the scope jump and then stop\n        // e.g. .zonk ::content > .foo ==> .zonk.scope > .foo\n        var stop;\n        if (jumpIndex >= 0) {\n          selector = selector.replace(SCOPE_JUMP, ' ');\n          stop = true;\n        }\n        return {value: selector, combinator: combinator, stop: stop,\n          hostContext: hostContext};\n      },\n\n      _transformSimpleSelector: function(selector, scope) {\n        var p$ = selector.split(PSEUDO_PREFIX);\n        p$[0] += scope;\n        return p$.join(PSEUDO_PREFIX);\n      },\n\n      // :host(...) -> scopeName...\n      _transformHostSelector: function(selector, hostScope) {\n        var m = selector.match(HOST_PAREN);\n        var paren = m && m[2].trim() || '';\n        if (paren) {\n          if (!paren[0].match(SIMPLE_SELECTOR_PREFIX)) {\n            // paren starts with a type selector\n            var typeSelector = paren.split(SIMPLE_SELECTOR_PREFIX)[0];\n            // if the type selector is our hostScope then avoid pre-pending it\n            if (typeSelector === hostScope) {\n              return paren;\n            // otherwise, this selector should not match in this scope so\n            // output a bogus selector.\n            } else {\n              return SELECTOR_NO_MATCH;\n            }\n          } else {\n            // make sure to do a replace here to catch selectors like:\n            // `:host(.foo)::before`\n            return selector.replace(HOST_PAREN, function(m, host, paren) {\n              return hostScope + paren;\n            });\n          }\n        // if no paren, do a straight :host replacement.\n        // TODO(sorvell): this should not strictly be necessary but\n        // it's needed to maintain support for `:host[foo]` type selectors\n        // which have been improperly used under Shady DOM. This should be\n        // deprecated.\n        } else {\n          return selector.replace(HOST, hostScope);\n        }\n      },\n\n      documentRule: function(rule) {\n        // reset selector in case this is redone.\n        rule.selector = rule.parsedSelector;\n        this.normalizeRootSelector(rule);\n        if (!settings.useNativeShadow) {\n          this._transformRule(rule, this._transformDocumentSelector);\n        }\n      },\n\n      normalizeRootSelector: function(rule) {\n        rule.selector = rule.selector.replace(ROOT, 'html');\n      },\n\n      _transformDocumentSelector: function(selector) {\n        return selector.match(SCOPE_JUMP) ?\n          this._transformComplexSelector(selector, SCOPE_DOC_SELECTOR) :\n          this._transformSimpleSelector(selector.trim(), SCOPE_DOC_SELECTOR);\n      },\n\n      // For forward compatibility with ShadowDOM v1 and Polymer 2.x,\n      // replace ::slotted(${inner}) with ::content > ${inner}\n      _slottedToContent: function(cssText) {\n        return cssText.replace(SLOTTED_PAREN, CONTENT + '> $1');\n      },\n\n      SCOPE_NAME: 'style-scope'\n    };\n\n    var SCOPE_NAME = api.SCOPE_NAME;\n    var SCOPE_DOC_SELECTOR = ':not([' + SCOPE_NAME + '])' +\n      ':not(.' + SCOPE_NAME + ')';\n    var COMPLEX_SELECTOR_SEP = ',';\n    var SIMPLE_SELECTOR_SEP = /(^|[\\s>+~]+)((?:\\[.+?\\]|[^\\s>+~=\\[])+)/g;\n    var SIMPLE_SELECTOR_PREFIX = /[[.:#*]/;\n    var HOST = ':host';\n    var ROOT = ':root';\n    // NOTE: this supports 1 nested () pair for things like\n    // :host(:not([selected]), more general support requires\n    // parsing which seems like overkill\n    var HOST_PAREN = /(:host)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/;\n    var HOST_CONTEXT = ':host-context';\n    var HOST_CONTEXT_PAREN = /(.*)(?::host-context)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))(.*)/;\n    var CONTENT = '::content';\n    var SCOPE_JUMP = /::content|::shadow|\\/deep\\//;\n    var CSS_CLASS_PREFIX = '.';\n    var CSS_ATTR_PREFIX = '[' + SCOPE_NAME + '~=';\n    var CSS_ATTR_SUFFIX = ']';\n    var PSEUDO_PREFIX = ':';\n    var CLASS = 'class';\n    var CONTENT_START = new RegExp('^(' + CONTENT + ')');\n    var SELECTOR_NO_MATCH = 'should_not_match';\n    var SLOTTED_PAREN = /(?:::slotted)(?:\\(((?:\\([^)(]*\\)|[^)(]*)+?)\\))/g;\n\n    // exports\n    return api;\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/style-transformer.html\n// module id = 7\n// module chunks = 0","/*__wc__loader*/\nrequire('../path.html');\n\n\n\n  /**\n   * The `Polymer.Templatizer` behavior adds methods to generate instances of\n   * templates that are each managed by an anonymous `Polymer.Base` instance.\n   *\n   * Example:\n   *\n   *     // Get a template from somewhere, e.g. light DOM\n   *     var template = Polymer.dom(this).querySelector('template');\n   *     // Prepare the template\n   *     this.templatize(template);\n   *     // Instance the template with an initial data model\n   *     var instance = this.stamp({myProp: 'initial'});\n   *     // Insert the instance's DOM somewhere, e.g. light DOM\n   *     Polymer.dom(this).appendChild(instance.root);\n   *     // Changing a property on the instance will propagate to bindings\n   *     // in the template\n   *     instance.myProp = 'new value';\n   *\n   * Users of `Templatizer` may need to implement the following abstract\n   * API's to determine how properties and paths from the host should be\n   * forwarded into to instances:\n   *\n   *     _forwardParentProp: function(prop, value)\n   *     _forwardParentPath: function(path, value)\n   *\n   * Likewise, users may implement these additional abstract API's to determine\n   * how instance-specific properties that change on the instance should be\n   * forwarded out to the host, if necessary.\n   *\n   *     _forwardInstanceProp: function(inst, prop, value)\n   *     _forwardInstancePath: function(inst, path, value)\n   *\n   * In order to determine which properties are instance-specific and require\n   * custom forwarding via `_forwardInstanceProp`/`_forwardInstancePath`,\n   * define an `_instanceProps` map containing keys for each instance prop,\n   * for example:\n   *\n   *     _instanceProps: {\n   *       item: true,\n   *       index: true\n   *     }\n   *\n   * Any properties used in the template that are not defined in _instanceProp\n   * will be forwarded out to the host automatically.\n   *\n   * Users should also implement the following abstract function to show or\n   * hide any DOM generated using `stamp`:\n   *\n   *     _showHideChildren: function(shouldHide)\n   *\n   * @polymerBehavior\n   */\n  Polymer.Templatizer = {\n\n    properties: {\n      __hideTemplateChildren__: {\n        observer: '_showHideChildren'\n      }\n    },\n\n    // Extension point for overrides\n    _instanceProps: Polymer.nob,\n\n    _parentPropPrefix: '_parent_',\n\n    /**\n     * Prepares a template containing Polymer bindings by generating\n     * a constructor for an anonymous `Polymer.Base` subclass to serve as the\n     * binding context for the provided template.\n     *\n     * Use `this.stamp` to create instances of the template context containing\n     * a `root` fragment that may be stamped into the DOM.\n     *\n     * @method templatize\n     * @param {HTMLTemplateElement} template The template to process.\n     */\n    templatize: function(template) {\n      this._templatized = template;\n      // TODO(sjmiles): supply _alternate_ content reference missing from root\n      // templates (not nested). `_content` exists to provide content sharing\n      // for nested templates.\n      if (!template._content) {\n        template._content = template.content;\n      }\n      // fast path if template's anonymous class has been memoized\n      if (template._content._ctor) {\n        this.ctor = template._content._ctor;\n        //console.log('Templatizer.templatize: using memoized archetype');\n        // forward parent properties to archetype\n        this._prepParentProperties(this.ctor.prototype, template);\n        return;\n      }\n      // `archetype` is the prototype of the anonymous\n      // class created by the templatizer\n      var archetype = Object.create(Polymer.Base);\n      // normally Annotations.parseAnnotations(template) but\n      // archetypes do special caching\n      this._customPrepAnnotations(archetype, template);\n\n      // forward parent properties to archetype\n      this._prepParentProperties(archetype, template);\n\n      // setup accessors\n      archetype._prepEffects();\n      this._customPrepEffects(archetype);\n      archetype._prepBehaviors();\n      archetype._prepPropertyInfo();\n      archetype._prepBindings();\n\n      // boilerplate code\n      archetype._notifyPathUp = this._notifyPathUpImpl;\n      archetype._scopeElementClass = this._scopeElementClassImpl;\n      archetype.listen = this._listenImpl;\n      archetype._showHideChildren = this._showHideChildrenImpl;\n      archetype.__setPropertyOrig = this.__setProperty;\n      archetype.__setProperty = this.__setPropertyImpl;\n      // boilerplate code\n      var _constructor = this._constructorImpl;\n      var ctor = function TemplateInstance(model, host) {\n        _constructor.call(this, model, host);\n      };\n      // standard references\n      ctor.prototype = archetype;\n      archetype.constructor = ctor;\n      // TODO(sjmiles): constructor cache?\n      template._content._ctor = ctor;\n      // TODO(sjmiles): choose less general name\n      this.ctor = ctor;\n    },\n\n    _getRootDataHost: function() {\n      return (this.dataHost && this.dataHost._rootDataHost) || this.dataHost;\n    },\n\n    _showHideChildrenImpl: function(hide) {\n      var c = this._children;\n      for (var i=0; i<c.length; i++) {\n        var n = c[i];\n        // Ignore non-changes\n        if (Boolean(hide) != Boolean(n.__hideTemplateChildren__)) {\n          if (n.nodeType === Node.TEXT_NODE) {\n            if (hide) {\n              n.__polymerTextContent__ = n.textContent;\n              n.textContent = '';\n            } else {\n              n.textContent = n.__polymerTextContent__;\n            }\n          } else if (n.style) {\n            if (hide) {\n              n.__polymerDisplay__ = n.style.display;\n              n.style.display = 'none';\n            } else {\n              n.style.display = n.__polymerDisplay__;\n            }\n          }\n        }\n        n.__hideTemplateChildren__ = hide;\n      }\n    },\n\n    __setPropertyImpl: function(property, value, fromAbove, node) {\n      if (node && node.__hideTemplateChildren__ && property == 'textContent') {\n        property = '__polymerTextContent__';\n      }\n      this.__setPropertyOrig(property, value, fromAbove, node);\n    },\n\n    _debounceTemplate: function(fn) {\n      Polymer.dom.addDebouncer(this.debounce('_debounceTemplate', fn));\n    },\n\n    _flushTemplates: function() {\n      Polymer.dom.flush();\n    },\n\n    _customPrepEffects: function(archetype) {\n      var parentProps = archetype._parentProps;\n      for (var prop in parentProps) {\n        archetype._addPropertyEffect(prop, 'function',\n          this._createHostPropEffector(prop));\n      }\n      for (prop in this._instanceProps) {\n        archetype._addPropertyEffect(prop, 'function',\n          this._createInstancePropEffector(prop));\n      }\n    },\n\n    _customPrepAnnotations: function(archetype, template) {\n      archetype._template = template;\n      var c = template._content;\n      if (!c._notes) {\n        var rootDataHost = archetype._rootDataHost;\n        if (rootDataHost) {\n          Polymer.Annotations.prepElement = function() {\n            rootDataHost._prepElement();\n          }\n        }\n        c._notes = Polymer.Annotations.parseAnnotations(template);\n        Polymer.Annotations.prepElement = null;\n        this._processAnnotations(c._notes);\n      }\n      archetype._notes = c._notes;\n      archetype._parentProps = c._parentProps;\n    },\n\n    // Sets up accessors on the template to call abstract _forwardParentProp\n    // API that should be implemented by Templatizer users to get parent\n    // properties to their template instances.  These accessors are memoized\n    // on the archetype and copied to instances.\n    _prepParentProperties: function(archetype, template) {\n      var parentProps = this._parentProps = archetype._parentProps;\n      if (this._forwardParentProp && parentProps) {\n        // Prototype setup (memoized on archetype)\n        var proto = archetype._parentPropProto;\n        var prop;\n        if (!proto) {\n          for (prop in this._instanceProps) {\n            delete parentProps[prop];\n          }\n          proto = archetype._parentPropProto = Object.create(null);\n          if (template != this) {\n            // Assumption: if `this` isn't the template being templatized,\n            // assume that the template is not a Poylmer.Base, so prep it\n            // for binding\n            Polymer.Bind.prepareModel(proto);\n            Polymer.Base.prepareModelNotifyPath(proto);\n          }\n          // Create accessors for each parent prop that forward the property\n          // to template instances through abstract _forwardParentProp API\n          // that should be implemented by Templatizer users\n          for (prop in parentProps) {\n            var parentProp = this._parentPropPrefix + prop;\n            // TODO(sorvell): remove reference Bind library functions here.\n            // Needed for effect optimization.\n            var effects = [{\n              kind: 'function',\n              effect: this._createForwardPropEffector(prop),\n              fn: Polymer.Bind._functionEffect\n            }, {\n              kind: 'notify',\n              fn: Polymer.Bind._notifyEffect,\n              effect: {event:\n                Polymer.CaseMap.camelToDashCase(parentProp) + '-changed'}\n            }];\n            proto._propertyEffects = proto._propertyEffects || {};\n            proto._propertyEffects[parentProp] = effects;\n            Polymer.Bind._createAccessors(proto, parentProp, effects);\n          }\n        }\n        // capture this reference for use below\n        var self = this;\n        // Instance setup\n        if (template != this) {\n          Polymer.Bind.prepareInstance(template);\n          template._forwardParentProp = function(source, value) {\n            self._forwardParentProp(source, value);\n          }\n        }\n        this._extendTemplate(template, proto);\n        template._pathEffector = function(path, value, fromAbove) {\n          return self._pathEffectorImpl(path, value, fromAbove);\n        }\n      }\n    },\n\n    _createForwardPropEffector: function(prop) {\n      return function(source, value) {\n        this._forwardParentProp(prop, value);\n      };\n    },\n\n    _createHostPropEffector: function(prop) {\n      var prefix = this._parentPropPrefix;\n      return function(source, value) {\n        this.dataHost._templatized[prefix + prop] = value;\n      };\n    },\n\n    _createInstancePropEffector: function(prop) {\n      return function(source, value, old, fromAbove) {\n        if (!fromAbove) {\n          this.dataHost._forwardInstanceProp(this, prop, value);\n        }\n      };\n    },\n\n    // Similar to Polymer.Base.extend, but retains any previously set instance\n    // values (_propertySetter back on instance once accessor is installed)\n    _extendTemplate: function(template, proto) {\n      var n$ = Object.getOwnPropertyNames(proto);\n      if (proto._propertySetter) {\n        // _propertySetter API may need to be copied onto the template,\n        // and it needs to come first to allow the property swizzle below\n        template._propertySetter = proto._propertySetter;\n      }\n      for (var i=0, n; (i<n$.length) && (n=n$[i]); i++) {\n        var val = template[n];\n        if (val && n == '_propertyEffects') {\n          // Merge property effects in\n          var pe = Polymer.Base.mixin({}, val);\n          template._propertyEffects = Polymer.Base.mixin(pe, proto._propertyEffects);\n        } else {\n          var pd = Object.getOwnPropertyDescriptor(proto, n);\n          Object.defineProperty(template, n, pd);\n          if (val !== undefined) {\n            template._propertySetter(n, val);\n          }   \n        }\n      }\n    },\n\n    // Extension points for Templatizer sub-classes\n    /* eslint-disable no-unused-vars */\n    _showHideChildren: function(hidden) { },\n    _forwardInstancePath: function(inst, path, value) { },\n    _forwardInstanceProp: function(inst, prop, value) { },\n    // Defined-check rather than thunk used to avoid unnecessary work for these:\n    // _forwardParentPath: function(path, value) { },\n    // _forwardParentProp: function(prop, value) { },\n    /* eslint-enable no-unused-vars */\n\n    _notifyPathUpImpl: function(path, value) {\n      var dataHost = this.dataHost;\n      var root = Polymer.Path.root(path);\n      // Call extension point for Templatizer sub-classes\n      dataHost._forwardInstancePath.call(dataHost, this, path, value);\n      if (root in dataHost._parentProps) {\n        dataHost._templatized._notifyPath(dataHost._parentPropPrefix + path, value);\n      }\n    },\n\n    // Overrides Base notify-path module\n    _pathEffectorImpl: function(path, value, fromAbove) {\n      if (this._forwardParentPath) {\n        if (path.indexOf(this._parentPropPrefix) === 0) {\n          var subPath = path.substring(this._parentPropPrefix.length);\n          var model = Polymer.Path.root(subPath);\n          if (model in this._parentProps) {\n            this._forwardParentPath(subPath, value);\n          }\n        }\n      }\n      Polymer.Base._pathEffector.call(this._templatized, path, value, fromAbove);\n    },\n\n    _constructorImpl: function(model, host) {\n      this._rootDataHost = host._getRootDataHost();\n      this._setupConfigure(model);\n      this._registerHost(host);\n      this._beginHosting();\n      this.root = this.instanceTemplate(this._template);\n      this.root.__noContent = !this._notes._hasContent;\n      this.root.__styleScoped = true;\n      this._endHosting();\n      this._marshalAnnotatedNodes();\n      this._marshalInstanceEffects();\n      this._marshalAnnotatedListeners();\n      // each row is a document fragment which is lost when we appendChild,\n      // so we have to track each child individually\n      var children = [];\n      for (var n = this.root.firstChild; n; n=n.nextSibling) {\n        children.push(n);\n        n._templateInstance = this;\n      }\n      // Since archetype overrides Base/HTMLElement, Safari complains\n      // when accessing `children`\n      this._children = children;\n      // Ensure newly stamped nodes reflect host's hidden state\n      if (host.__hideTemplateChildren__) {\n        this._showHideChildren(true);\n      }\n      // ready self and children\n      this._tryReady();\n    },\n\n    // Decorate events with model (template instance)\n    _listenImpl: function(node, eventName, methodName) {\n      var model = this;\n      var host = this._rootDataHost;\n      var handler = host._createEventHandler(node, eventName, methodName);\n      var decorated = function(e) {\n        e.model = model;\n        handler(e);\n      };\n      host._listen(node, eventName, decorated);\n    },\n\n    _scopeElementClassImpl: function(node, value) {\n      var host = this._rootDataHost;\n      if (host) {\n        return host._scopeElementClass(node, value);\n      }\n      return value;\n    },\n\n    /**\n     * Creates an instance of the template previously processed via\n     * a call to `templatize`.\n     *\n     * The object returned is an anonymous subclass of Polymer.Base that\n     * has accessors generated to manage data in the template.  The DOM for\n     * the instance is contained in a DocumentFragment called `root` on\n     * the instance returned and must be manually inserted into the DOM\n     * by the user.\n     *\n     * Note that a call to `templatize` must be called once before using\n     * `stamp`.\n     *\n     * @method stamp\n     * @param {Object=} model An object containing key/values to serve as the\n     *   initial data configuration for the instance.  Note that properties\n     *   from the host used in the template are automatically copied into\n     *   the model.\n     * @return {Polymer.Base} The Polymer.Base instance to manage the template\n     *   instance.\n     */\n    stamp: function(model) {\n      model = model || {};\n      if (this._parentProps) {\n        var templatized = this._templatized;\n        for (var prop in this._parentProps) {\n          if (model[prop] === undefined) {\n            model[prop] = templatized[this._parentPropPrefix + prop];\n          }\n        }\n      }\n      return new this.ctor(model, this);\n    },\n\n    /**\n     * Returns the template \"model\" associated with a given element, which\n     * serves as the binding scope for the template instance the element is\n     * contained in. A template model is an instance of `Polymer.Base`, and\n     * should be used to manipulate data associated with this template instance.\n     *\n     * Example:\n     *\n     *   var model = modelForElement(el);\n     *   if (model.index < 10) {\n     *     model.set('item.checked', true);\n     *   }\n     *\n     * @method modelForElement\n     * @param {HTMLElement} el Element for which to return a template model.\n     * @return {Object<Polymer.Base>} Model representing the binding scope for\n     *   the element.\n     */\n    modelForElement: function(el) {\n      var model;\n      while (el) {\n        // An element with a _templateInstance marks the top boundary\n        // of a scope; walk up until we find one, and then ensure that\n        // its dataHost matches `this`, meaning this dom-repeat stamped it\n        if ((model = el._templateInstance)) {\n          // Found an element stamped by another template; keep walking up\n          // from its dataHost\n          if (model.dataHost != this) {\n            el = model.dataHost;\n          } else {\n            return model;\n          }\n        } else {\n          // Still in a template scope, keep going up until\n          // a _templateInstance is found\n          el = el.parentNode;\n        }\n      }\n    }\n\n  };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/template/templatizer.html\n// module id = 8\n// module chunks = 0","/*__wc__loader*/\nrequire('./settings.html');\n\nrequire('./dom-innerHTML.html');\n\n\n\n  /**\n   * DomApi is a dom manipulation library which is compatible with both\n   * Shady DOM and Shadow DOM. The general usage is\n   * `Polymer.dom(node).method(arguments)` where methods and arguments\n   * match native DOM where possible.\n   */\n  Polymer.DomApi = (function() {\n    'use strict';\n\n    var Settings = Polymer.Settings;\n    var TreeApi = Polymer.TreeApi;\n\n    var DomApi = function(node) {\n      this.node = needsToWrap ? DomApi.wrap(node) : node;\n    };\n\n    // ensure nodes are wrapped if SD polyfill is present\n    var needsToWrap = Settings.hasShadow && !Settings.nativeShadow;\n    DomApi.wrap = window.wrap ? window.wrap : function(node) { return node; };\n\n    DomApi.prototype = {\n\n      flush: function() {\n        Polymer.dom.flush();\n      },\n\n      /**\n       * Check that the given node is a descendant of `this`,\n       * ignoring ShadowDOM boundaries\n       * @param {Node} node\n       * @return {Boolean} true if `node` is a descendant or equal to `this`\n       */\n      deepContains: function(node) {\n        // fast path, use shallow `contains`.\n        if (this.node.contains(node)) {\n          return true;\n        }\n        var n = node;\n        var doc = node.ownerDocument;\n        // walk from node to `this` or `document`\n        while (n && n !== doc && n !== this.node) {\n          // use logical parentnode, or native ShadowRoot host\n          n = Polymer.dom(n).parentNode || n.host;\n        }\n        return n === this.node;\n      },\n\n      /*\n        Returns a list of nodes distributed within this element. These can be\n        dom children or elements distributed to children that are insertion\n        points.\n      */\n      queryDistributedElements: function(selector) {\n        var c$ = this.getEffectiveChildNodes();\n        var list = [];\n        for (var i=0, l=c$.length, c; (i<l) && (c=c$[i]); i++) {\n          if ((c.nodeType === Node.ELEMENT_NODE) &&\n              DomApi.matchesSelector.call(c, selector)) {\n            list.push(c);\n          }\n        }\n        return list;\n      },\n\n      /*\n        Returns a list of effective childNoes within this element. These can be\n        dom child nodes or elements distributed to children that are insertion\n        points.\n      */\n      getEffectiveChildNodes: function() {\n        var list = [];\n        var c$ = this.childNodes;\n        for (var i=0, l=c$.length, c; (i<l) && (c=c$[i]); i++) {\n          if (c.localName === CONTENT) {\n            var d$ = dom(c).getDistributedNodes();\n            for (var j=0; j < d$.length; j++) {\n              list.push(d$[j]);\n            }\n          } else {\n            list.push(c);\n          }\n        }\n        return list;\n      },\n\n      /**\n       * Notifies callers about changes to the element's effective child nodes,\n       * the same list as returned by `getEffectiveChildNodes`.\n       * @param {function} callback The supplied callback is called with an\n       * `info` argument which is an object that provides\n       * the `target` on which the changes occurred, a list of any nodes\n       * added in the `addedNodes` array, and nodes removed in the\n       * `removedNodes` array.\n       * @return {object} Returns a handle which is the argument to\n       * `unobserveNodes`.\n       */\n      observeNodes: function(callback) {\n        if (callback) {\n          if (!this.observer) {\n            this.observer = this.node.localName === CONTENT ?\n              new DomApi.DistributedNodesObserver(this) :\n              new DomApi.EffectiveNodesObserver(this);\n          }\n          return this.observer.addListener(callback);\n        }\n      },\n\n      /**\n       * Stops observing changes to the element's effective child nodes.\n       * @param {object} handle The handle for the callback that should\n       * no longer receive notifications. This handle is returned from\n       * `observeNodes`.\n       */\n      unobserveNodes: function(handle) {\n        if (this.observer) {\n          this.observer.removeListener(handle);\n        }\n      },\n\n      notifyObserver: function() {\n        if (this.observer) {\n          this.observer.notify();\n        }\n      },\n\n      // NOTE: `_query` is used primarily for ShadyDOM's querySelector impl,\n      // but it's also generally useful to recurse through the element tree\n      // and is used by Polymer's styling system. \n      _query: function(matcher, node, halter) {\n        node = node || this.node;\n        var list = [];\n        this._queryElements(TreeApi.Logical.getChildNodes(node), matcher, \n          halter, list);\n        return list;\n      },\n\n      _queryElements: function(elements, matcher, halter, list) {\n        for (var i=0, l=elements.length, c; (i<l) && (c=elements[i]); i++) {\n          if (c.nodeType === Node.ELEMENT_NODE) {\n            if (this._queryElement(c, matcher, halter, list)) {\n              return true;\n            }\n          }\n        }\n      },\n\n      _queryElement: function(node, matcher, halter, list) {\n        var result = matcher(node);\n        if (result) {\n          list.push(node);\n        }\n        if (halter && halter(result)) {\n          return result;\n        }\n        this._queryElements(TreeApi.Logical.getChildNodes(node), matcher, \n          halter, list);\n      }\n\n    };\n\n    var CONTENT = DomApi.CONTENT = 'content';\n\n    var dom = DomApi.factory = function(node) {\n      node = node || document;\n      if (!node.__domApi) {\n        node.__domApi = new DomApi.ctor(node);\n      }\n      return node.__domApi;\n    };\n\n    DomApi.hasApi = function(node) {\n      return Boolean(node.__domApi);\n    };\n\n    DomApi.ctor = DomApi;\n\n    Polymer.dom = function(obj, patch) {\n      if (obj instanceof Event) {\n        return Polymer.EventApi.factory(obj);\n      } else {\n        return DomApi.factory(obj, patch);\n      }\n    };\n\n    var p = Element.prototype;\n    DomApi.matchesSelector = p.matches || p.matchesSelector ||\n      p.mozMatchesSelector || p.msMatchesSelector ||\n      p.oMatchesSelector || p.webkitMatchesSelector;\n\n    return DomApi;\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-api.html\n// module id = 9\n// module chunks = 0","/*__wc__loader*/\n\n\nPolymer.Async = {\n\n  _currVal: 0,\n  _lastVal: 0,\n  _callbacks: [],\n  _twiddleContent: 0,\n  _twiddle: document.createTextNode(''),\n\n  run: function (callback, waitTime) {\n    if (waitTime > 0) {\n      return ~setTimeout(callback, waitTime);\n    } else {\n      this._twiddle.textContent = this._twiddleContent++;\n      this._callbacks.push(callback);\n      return this._currVal++;\n    }\n  },\n\n  cancel: function(handle) {\n    if (handle < 0) {\n      clearTimeout(~handle);\n    } else {\n      var idx = handle - this._lastVal;\n      if (idx >= 0) {\n        if (!this._callbacks[idx]) {\n          throw 'invalid async handle: ' + handle;\n        }\n        this._callbacks[idx] = null;\n      }\n    }\n  },\n\n  _atEndOfMicrotask: function() {\n    var len = this._callbacks.length;\n    for (var i=0; i<len; i++) {\n      var cb = this._callbacks[i];\n      if (cb) {\n        try {\n          cb();\n        } catch(e) {\n          // Clear queue up to this point & start over after throwing\n          i++;\n          this._callbacks.splice(0, i);\n          this._lastVal += i;\n          this._twiddle.textContent = this._twiddleContent++;\n          throw e;\n        }\n      }\n    }\n    this._callbacks.splice(0, len);\n    this._lastVal += len;\n  }\n};\n\nnew window.MutationObserver(function() {\n    Polymer.Async._atEndOfMicrotask();\n  }).observe(Polymer.Async._twiddle, {characterData: true});\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/async.html\n// module id = 10\n// module chunks = 0","/*__wc__loader*/\nrequire('./style-util.html');\n\n\n/**\n * The apply shim simulates the behavior of `@apply` proposed at\n * https://tabatkins.github.io/specs/css-apply-rule/.\n * The approach is to convert a property like this:\n *\n *    --foo: {color: red; background: blue;}\n *\n * to this:\n *\n *    --foo_-_color: red;\n *    --foo_-_background: blue;\n *\n * Then where `@apply --foo` is used, that is converted to:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background);\n *\n * This approach generally works but there are some issues and limitations.\n * Consider, for example, that somewhere *between* where `--foo` is set and used,\n * another element sets it to:\n *\n *    --foo: { border: 2px solid red; }\n *\n * We must now ensure that the color and background from the previous setting\n * do not apply. This is accomplished by changing the property set to this:\n *\n *    --foo_-_border: 2px solid red;\n *    --foo_-_color: initial;\n *    --foo_-_background: initial;\n *\n * This works but introduces one new issue.\n * Consider this setup at the point where the `@apply` is used:\n *\n *    background: orange;\n *    @apply --foo;\n *\n * In this case the background will be unset (initial) rather than the desired\n * `orange`. We address this by altering the property set to use a fallback\n * value like this:\n *\n *    color: var(--foo_-_color);\n *    background: var(--foo_-_background, orange);\n *    border: var(--foo_-_border);\n *\n * Note that the default is retained in the property set and the `background` is\n * the desired `orange`. This leads us to a limitation.\n *\n * Limitation 1:\n\n * Only properties in the rule where the `@apply`\n * is used are considered as default values.\n * If another rule matches the element and sets `background` with\n * less specificity than the rule in which `@apply` appears,\n * the `background` will not be set.\n *\n * Limitation 2:\n *\n * When using Polymer's `updateStyles` api, new properties may not be set for\n * `@apply` properties.\n\n*/\nPolymer.ApplyShim = (function(){\n  'use strict';\n\n  var styleUtil = Polymer.StyleUtil;\n\n  var MIXIN_MATCH = styleUtil.rx.MIXIN_MATCH;\n  var VAR_ASSIGN = styleUtil.rx.VAR_ASSIGN;\n  // match var(--a, --b) to make var(--a, var(--b));\n  var BAD_VAR = /var\\(\\s*(--[^,]*),\\s*(--[^)]*)\\)/g;\n  var APPLY_NAME_CLEAN = /;\\s*/m;\n  var INITIAL_INHERIT = /^\\s*(initial)|(inherit)\\s*$/;\n\n  // separator used between mixin-name and mixin-property-name when producing properties\n  // NOTE: plain '-' may cause collisions in user styles\n  var MIXIN_VAR_SEP = '_-_';\n\n  // map of mixin to property names\n  // --foo: {border: 2px} -> {properties: {(--foo, ['border'])}, dependants: {'element-name': proto}}\n  var mixinMap = {};\n\n  function mapSet(name, props) {\n    name = name.trim();\n    mixinMap[name] = {\n      properties: props,\n      dependants: {}\n    };\n  }\n\n  function mapGet(name) {\n    name = name.trim();\n    return mixinMap[name];\n  }\n\n  function replaceInitialOrInherit(property, value) {\n    var match = INITIAL_INHERIT.exec(value);\n    if (match) {\n      if (match[1]) {\n        // initial\n        // replace `initial` with the concrete initial value for this property\n        value = ApplyShim._getInitialValueForProperty(property);\n      } else {\n        // inherit\n        // with this purposfully illegal value, the variable will be invalid at\n        // compute time (https://www.w3.org/TR/css-variables/#invalid-at-computed-value-time)\n        // and for inheriting values, will behave similarly\n        // we cannot support the same behavior for non inheriting values like 'border'\n        value = 'apply-shim-inherit';\n      }\n    }\n    return value;\n  }\n\n  // \"parse\" a mixin definition into a map of properties and values\n  // cssTextToMap('border: 2px solid black') -> ('border', '2px solid black')\n  function cssTextToMap(text) {\n    var props = text.split(';');\n    var property, value;\n    var out = {};\n    for (var i = 0, p, sp; i < props.length; i++) {\n      p = props[i];\n      if (p) {\n        sp = p.split(':');\n        // ignore lines that aren't definitions like @media\n        if (sp.length > 1) {\n          property = sp[0].trim();\n          // some properties may have ':' in the value, like data urls\n          value = replaceInitialOrInherit(property, sp.slice(1).join(':'));\n          out[property] = value;\n        }\n      }\n    }\n    return out;\n  }\n\n  function invalidateMixinEntry(mixinEntry) {\n    var currentProto = ApplyShim.__currentElementProto;\n    var currentElementName = currentProto && currentProto.is;\n    for (var elementName in mixinEntry.dependants) {\n      if (elementName !== currentElementName) {\n        mixinEntry.dependants[elementName].__applyShimInvalid = true;\n      }\n    }\n  }\n\n  function produceCssProperties(matchText, propertyName, valueProperty, valueMixin) {\n    // handle case where property value is a mixin\n    if (valueProperty) {\n      // form: --mixin2: var(--mixin1), where --mixin1 is in the map\n      styleUtil.processVariableAndFallback(valueProperty, function(prefix, value) {\n        if (value && mapGet(value)) {\n          valueMixin = '@apply ' + value + ';';\n        }\n      });\n    }\n    if (!valueMixin) {\n      return matchText;\n    }\n    var mixinAsProperties = consumeCssProperties(valueMixin);\n    var prefix = matchText.slice(0, matchText.indexOf('--'));\n    var mixinValues = cssTextToMap(mixinAsProperties);\n    var combinedProps = mixinValues;\n    var mixinEntry = mapGet(propertyName);\n    var oldProps = mixinEntry && mixinEntry.properties;\n    if (oldProps) {\n      // NOTE: since we use mixin, the map of properties is updated here\n      // and this is what we want.\n      combinedProps = Object.create(oldProps);\n      combinedProps = Polymer.Base.mixin(combinedProps, mixinValues);\n    } else {\n      mapSet(propertyName, combinedProps);\n    }\n    var out = [];\n    var p, v;\n    // set variables defined by current mixin\n    var needToInvalidate = false;\n    for (p in combinedProps) {\n      v = mixinValues[p];\n      // if property not defined by current mixin, set initial\n      if (v === undefined) {\n        v = 'initial';\n      }\n      if (oldProps && !(p in oldProps)) {\n        needToInvalidate = true;\n      }\n      out.push(propertyName + MIXIN_VAR_SEP + p + ': ' + v);\n    }\n    if (needToInvalidate) {\n      invalidateMixinEntry(mixinEntry);\n    }\n    if (mixinEntry) {\n      mixinEntry.properties = combinedProps;\n    }\n    // because the mixinMap is global, the mixin might conflict with\n    // a different scope's simple variable definition:\n    // Example:\n    // some style somewhere:\n    // --mixin1:{ ... }\n    // --mixin2: var(--mixin1);\n    // some other element:\n    // --mixin1: 10px solid red;\n    // --foo: var(--mixin1);\n    // In this case, we leave the original variable definition in place.\n    if (valueProperty) {\n      prefix = matchText + ';' + prefix;\n    }\n    return prefix + out.join('; ') + ';';\n  }\n\n  // fix shim'd var syntax\n  // var(--a, --b) -> var(--a,var(--b))\n  function fixVars(matchText, varA, varB) {\n    // if fallback doesn't exist, or isn't a broken variable, abort\n    return 'var(' + varA + ',' + 'var(' + varB + '))';\n  }\n\n  // produce variable consumption at the site of mixin consumption\n  // @apply --foo; -> for all props (${propname}: var(--foo_-_${propname}, ${fallback[propname]}}))\n  // Example:\n  // border: var(--foo_-_border); padding: var(--foo_-_padding, 2px)\n  function atApplyToCssProperties(mixinName, fallbacks) {\n    mixinName = mixinName.replace(APPLY_NAME_CLEAN, '');\n    var vars = [];\n    var mixinEntry = mapGet(mixinName);\n    // if we depend on a mixin before it is created\n    // make a sentinel entry in the map to add this element as a dependency for when it is defined.\n    if (!mixinEntry) {\n      mapSet(mixinName, {});\n      mixinEntry = mapGet(mixinName);\n    }\n    if (mixinEntry) {\n      var currentProto = ApplyShim.__currentElementProto;\n      if (currentProto) {\n        mixinEntry.dependants[currentProto.is] = currentProto;\n      }\n      var p, parts, f;\n      for (p in mixinEntry.properties) {\n        f = fallbacks && fallbacks[p];\n        parts = [p, ': var(', mixinName, MIXIN_VAR_SEP, p];\n        if (f) {\n          parts.push(',', f);\n        }\n        parts.push(')');\n        vars.push(parts.join(''));\n      }\n    }\n    return vars.join('; ');\n  }\n\n  // replace mixin consumption with variable consumption\n  function consumeCssProperties(text) {\n    var m;\n    // loop over text until all mixins with defintions have been applied\n    while((m = MIXIN_MATCH.exec(text))) {\n      var matchText = m[0];\n      var mixinName = m[1];\n      var idx = m.index;\n      // collect properties before apply to be \"defaults\" if mixin might override them\n      // match includes a \"prefix\", so find the start and end positions of @apply\n      var applyPos = idx + matchText.indexOf('@apply');\n      var afterApplyPos = idx + matchText.length;\n      // find props defined before this @apply\n      var textBeforeApply = text.slice(0, applyPos);\n      var textAfterApply = text.slice(afterApplyPos);\n      var defaults = cssTextToMap(textBeforeApply);\n      var replacement = atApplyToCssProperties(mixinName, defaults);\n      // use regex match position to replace mixin, keep linear processing time\n      text = [textBeforeApply, replacement, textAfterApply].join('');\n      // move regex search to _after_ replacement\n      MIXIN_MATCH.lastIndex = idx + replacement.length;\n    }\n    return text;\n  }\n\n  var ApplyShim = {\n    _measureElement: null,\n    _map: mixinMap,\n    _separator: MIXIN_VAR_SEP,\n    transform: function(styles, elementProto) {\n      this.__currentElementProto = elementProto;\n      styleUtil.forRulesInStyles(styles, this._boundFindDefinitions);\n      styleUtil.forRulesInStyles(styles, this._boundFindApplications)\n      if (elementProto) {\n        elementProto.__applyShimInvalid = false;\n      }\n      this.__currentElementProto = null;\n    },\n    _findDefinitions: function(rule) {\n      var cssText = rule.parsedCssText;\n      // fix shim variables\n      cssText = cssText.replace(BAD_VAR, fixVars);\n      // produce variables\n      cssText = cssText.replace(VAR_ASSIGN, produceCssProperties);\n      rule.cssText = cssText;\n      // :root was only used for variable assignment in property shim,\n      // but generates invalid selectors with real properties.\n      // replace with `:host > *`, which serves the same effect\n      if (rule.selector === ':root') {\n        rule.selector = ':host > *';\n      }\n    },\n    _findApplications: function(rule) {\n      // consume mixins\n      rule.cssText = consumeCssProperties(rule.cssText);\n    },\n    transformRule: function(rule) {\n      this._findDefinitions(rule);\n      this._findApplications(rule);\n    },\n    _getInitialValueForProperty: function(property) {\n      if (!this._measureElement) {\n        this._measureElement = document.createElement('meta');\n        this._measureElement.style.all = 'initial';\n        document.head.appendChild(this._measureElement);\n      }\n      return window.getComputedStyle(this._measureElement).getPropertyValue(property);\n    }\n  };\n\n  ApplyShim._boundTransformRule = ApplyShim.transformRule.bind(ApplyShim);\n  ApplyShim._boundFindDefinitions = ApplyShim._findDefinitions.bind(ApplyShim);\n  ApplyShim._boundFindApplications = ApplyShim._findApplications.bind(ApplyShim);\n  return ApplyShim;\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/apply-shim.html\n// module id = 11\n// module chunks = 0","/*__wc__loader*/\nrequire('./style-util.html');\n\nrequire('./style-cache.html');\n\nrequire('./settings.html');\n\n\n\n  Polymer.StyleDefaults = (function() {\n\n    var styleProperties = Polymer.StyleProperties;\n    var StyleCache = Polymer.StyleCache;\n    var nativeVariables = Polymer.Settings.useNativeCSSProperties;\n\n    var api = {\n\n      _styles: [],\n      _properties: null,\n      customStyle: {},\n      _styleCache: new StyleCache(),\n      _element: Polymer.DomApi.wrap(document.documentElement),\n\n      addStyle: function(style) {\n        this._styles.push(style);\n        this._properties = null;\n      },\n\n      // NOTE: this object can be used as a styling scope so it has an api\n      // similar to that of an element wrt style properties\n      get _styleProperties() {\n        if (!this._properties) {\n          // force rules to reparse since they may be out of date\n          styleProperties.decorateStyles(this._styles, this);\n          // NOTE: reset cache for own properties; it may have been set when\n          // an element in an import applied styles (e.g. custom-style)\n          this._styles._scopeStyleProperties = null;\n          this._properties = styleProperties\n            .hostAndRootPropertiesForScope(this).rootProps;\n          // mixin customStyle\n          styleProperties.mixinCustomStyle(this._properties, this.customStyle);\n          styleProperties.reify(this._properties);\n        }\n        return this._properties;\n      },\n\n      hasStyleProperties: function() {\n        return Boolean(this._properties);\n      },\n\n      _needsStyleProperties: function() {},\n\n      _computeStyleProperties: function() {\n        return this._styleProperties;\n      },\n\n      /**\n       * Re-evaluates and applies custom CSS properties to all elements in the\n       * document based on dynamic changes, such as adding or removing classes.\n       *\n       * For performance reasons, Polymer's custom CSS property shim relies\n       * on this explicit signal from the user to indicate when changes have\n       * been made that affect the values of custom properties.\n       *\n       * @method updateStyles\n       * @param {Object=} properties Properties object which is mixed into\n       * the document root `customStyle` property. This argument provides a\n       * shortcut for setting `customStyle` and then calling `updateStyles`.\n      */\n      updateStyles: function(properties) {\n        // force properties update.\n        this._properties = null;\n        if (properties) {\n          Polymer.Base.mixin(this.customStyle, properties);\n        }\n        // invalidate the cache\n        this._styleCache.clear();\n        // update any custom-styles we are tracking\n        for (var i=0, s; i < this._styles.length; i++) {\n          s = this._styles[i];\n          s = s.__importElement || s;\n          s._apply();\n        }\n        if (nativeVariables) {\n          styleProperties.updateNativeStyleProperties(document.documentElement, this.customStyle);\n        }\n      }\n\n    };\n\n    // exports\n    return api;\n\n  })();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/style-defaults.html\n// module id = 12\n// module chunks = 0","/*__wc__loader*/\n\n(function() {\n\n  Polymer.StyleCache = function() {\n    this.cache = {};\n  };\n\n  Polymer.StyleCache.prototype = {\n    \n    MAX: 100,\n\n    store: function(is, data, keyValues, keyStyles) {\n      data.keyValues = keyValues;\n      data.styles = keyStyles;\n      var s$ = this.cache[is] = this.cache[is] || [];\n      s$.push(data);\n      if (s$.length > this.MAX) {\n        s$.shift();\n      }\n    },\n\n    retrieve: function(is, keyValues, keyStyles) {\n      var cache = this.cache[is];\n      if (cache) {\n        // look through cache backwards as most recent push is last.\n        for (var i=cache.length-1, data; i >= 0; i--) {\n          data = cache[i];\n          if (keyStyles === data.styles &&\n              this._objectsEqual(keyValues, data.keyValues)) {\n            return data;\n          }\n        }\n      }\n    },\n\n    clear: function() {\n      this.cache = {};\n    },\n\n    // note, this is intentially limited to support just the cases we need\n    // right now. The objects we're checking here are either objects that must \n    // always have the same keys OR arrays.\n    _objectsEqual: function(target, source) {\n      var t, s;\n      for (var i in target) {\n        t = target[i], s = source[i];\n        if (!(typeof t === 'object' && t ? this._objectsStrictlyEqual(t, s) : \n            t === s)) {\n          return false;\n        }\n      }\n      if (Array.isArray(target)) {\n        return target.length === source.length;\n      }\n      return true;\n    },\n\n    _objectsStrictlyEqual: function(target, source) {\n      return this._objectsEqual(target, source) && \n        this._objectsEqual(source, target);\n    }\n\n  };\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/style-cache.html\n// module id = 13\n// module chunks = 0","/*__wc__loader*/\nrequire('./polymer-mini.html');\n\nrequire('./src/standard/annotations.html');\n\nrequire('./src/standard/events.html');\n\nrequire('./src/standard/gestures.html');\n\nrequire('./src/standard/utils.html');\n\nrequire('./src/standard/effectBuilder.html');\n\nrequire('./src/standard/configure.html');\n\nrequire('./src/standard/notify-path.html');\n\nrequire('./src/standard/resolveUrl.html');\n\nrequire('./src/standard/styling.html');\n\nrequire('./src/standard/x-styling.html');\n\nrequire('./src/lib/custom-style.html');\n\nrequire('./src/lib/template/dom-template.html');\n\nrequire('./src/lib/template/dom-repeat.html');\n\nrequire('./src/lib/template/array-selector.html');\n\nrequire('./src/lib/template/dom-if.html');\n\nrequire('./src/lib/template/dom-bind.html');\n\n\n\n  Polymer.Base._addFeature({\n\n    _registerFeatures: function() {\n      // identity\n      this._prepIs();\n      // factory\n      if (this.factoryImpl) {\n        this._prepConstructor();\n      }\n      // styles\n      this._prepStyles();\n    },\n\n    _finishRegisterFeatures: function() {\n      // template\n      this._prepTemplate();\n      // style shimming\n      this._prepShimStyles();\n      // template markup\n      this._prepAnnotations();\n      // accessors\n      this._prepEffects();\n      // shared behaviors\n      this._prepBehaviors();\n      // fast access to property info\n      this._prepPropertyInfo();\n      // accessors part 2\n      this._prepBindings();\n      // dom encapsulation\n      this._prepShady();\n    },\n\n    _prepBehavior: function(b) {\n      this._addPropertyEffects(b.properties);\n      this._addComplexObserverEffects(b.observers);\n      this._addHostAttributes(b.hostAttributes);\n    },\n\n    _initFeatures: function() {\n      // setup gestures\n      this._setupGestures();\n      // manage configuration\n      this._setupConfigure(this.__data__);\n      // setup style properties\n      this._setupStyleProperties();\n      // setup debouncers\n      this._setupDebouncers();\n      // setup shady\n      this._setupShady();\n      this._registerHost();\n      if (this._template) {\n        this._validateApplyShim();\n        // manage local dom\n        this._poolContent();\n        // host stack\n        this._beginHosting();\n        // instantiate template\n        this._stampTemplate();\n        // host stack\n        this._endHosting();\n        // concretize template references\n        this._marshalAnnotationReferences();\n      }\n      // concretize effects on instance\n      this._marshalInstanceEffects();\n      // acquire instance behaviors\n      this._marshalBehaviors();\n      /*\n      TODO(sorvell): It's *slightly() more efficient to marshal attributes prior\n      to installing hostAttributes, but then hostAttributes must be separately\n      funneled to configure, which is cumbersome.\n      Since this delta seems hard to measure we will not bother atm.\n      */\n      // install host attributes\n      this._marshalHostAttributes();\n      // acquire initial instance attribute values\n      this._marshalAttributes();\n      // top-down initial distribution, configuration, & ready callback\n      this._tryReady();\n    },\n\n    _marshalBehavior: function(b) {\n      // establish listeners on instance\n      if (b.listeners) {\n        this._listenListeners(b.listeners);\n      }\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./polymer.html\n// module id = 15\n// module chunks = 0","/*__wc__loader*/\nrequire('./polymer-micro.html');\n\nrequire('./src/mini/template.html');\n\nrequire('./src/mini/ready.html');\n\nrequire('./src/mini/shady.html');\n\nrequire('./src/mini/shadow.html');\n\nrequire('./src/mini/debouncer.html');\n\n\n\n  Polymer.DomModule = document.createElement('dom-module');\n\n  Polymer.Base._addFeature({\n\n    _registerFeatures: function() {\n      // identity\n      this._prepIs();\n      // shared behaviors\n      this._prepBehaviors();\n      // factory\n      this._prepConstructor();\n      // template\n      this._prepTemplate();\n      // dom encapsulation\n      this._prepShady();\n      // fast access to property info\n      this._prepPropertyInfo();\n    },\n\n    _prepBehavior: function(b) {\n      this._addHostAttributes(b.hostAttributes);\n    },\n\n    _initFeatures: function() {\n      this._registerHost();\n      if (this._template) {\n        // manage local dom\n        this._poolContent();\n        // host stack\n        this._beginHosting();\n        // instantiate template\n        this._stampTemplate();\n        // host stack\n        this._endHosting();\n      }\n      // install host attributes\n      this._marshalHostAttributes();\n      // setup debouncers\n      this._setupDebouncers();\n      // instance shared behaviors\n      this._marshalBehaviors();\n      // top-down initial distribution, configuration, & ready callback\n      this._tryReady();\n    },\n\n    _marshalBehavior: function(b) {\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./polymer-mini.html\n// module id = 16\n// module chunks = 0","/*__wc__loader*/\nrequire('./src/polymer-lib.html');\n\nrequire('./src/micro/tag.html');\n\nrequire('./src/micro/behaviors.html');\n\nrequire('./src/micro/extends.html');\n\nrequire('./src/micro/constructor.html');\n\nrequire('./src/micro/properties.html');\n\nrequire('./src/micro/attributes.html');\n\n\n  Polymer.version = '1.x';\n\n\n\n\n  Polymer.Base._addFeature({\n\n    _registerFeatures: function() {\n      // identity\n      this._prepIs();\n      // shared behaviors\n      this._prepBehaviors();\n      // factory\n      this._prepConstructor();\n      // fast access to property info\n      this._prepPropertyInfo();\n    },\n\n    _prepBehavior: function(b) {\n      this._addHostAttributes(b.hostAttributes);\n    },\n\n    _marshalBehavior: function(b) {\n    },\n\n    _initFeatures: function() {\n      // install host attributes\n      this._marshalHostAttributes();\n      // acquire behaviors\n      this._marshalBehaviors();\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./polymer-micro.html\n// module id = 17\n// module chunks = 0","/*__wc__loader*/\nrequire('./lib/unresolved.html');\n\nrequire('./lib/settings.html');\n\nrequire('./lib/polymer-bootstrap.html');\n\nrequire('./lib/lang.html');\n\nrequire('./lib/render-status.html');\n\nrequire('./lib/base.html');\n\nrequire('./lib/dom-module.html');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/polymer-lib.html\n// module id = 18\n// module chunks = 0","/*__wc__loader*/\n\n(function() {\n\n  // Ensure that the `unresolved` attribute added by the WebComponents polyfills\n  // is removed. This is done as a convenience so users don't have to remember\n  // to do so themselves. This attribute provides FOUC prevention when\n  // native Custom Elements is not available.\n\n  function resolve() {\n    document.body.removeAttribute('unresolved');\n  }\n\n  if (window.WebComponents) {\n    addEventListener('WebComponentsReady', resolve);\n  } else {\n    if (document.readyState === 'interactive' || document.readyState === 'complete') {\n      resolve();\n    } else {\n      addEventListener('DOMContentLoaded', resolve);\n    }\n  }\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/unresolved.html\n// module id = 19\n// module chunks = 0","/*__wc__loader*/\n\n\n  (function() {\n\n    // until ES6 modules become standard, we follow Occam and simply stake out\n    // a global namespace\n\n    // Polymer is a Function, but of course this is also an Object, so we\n    // hang various other objects off of Polymer.*\n\n    var userPolymer = window.Polymer;\n\n    window.Polymer = function(prototype) {\n      // if input is a `class` (aka a function with a prototype), use the prototype\n      // remember that the `constructor` will never be called\n      if (typeof prototype === 'function') {\n        prototype = prototype.prototype;\n      }\n      // if there is no prototype, use a default empty object\n      if (!prototype) {\n        prototype = {};\n      }\n      // desugar the prototype and return a factory object\n      // Polymer.Base is now chained to prototype, and for IE10 compat\n      // this may have resulted in a new prototype being created\n      prototype = desugar(prototype);\n      // we have a custom constructor if the constructor's prototype\n      // is the prototype we're registering...\n      var customCtor = prototype === prototype.constructor.prototype ?\n        prototype.constructor : null;\n      var options = {\n        prototype: prototype\n      };\n      // NOTE: we're specifically supporting older Chrome versions here\n      // (specifically Chrome 39) that throw when options.extends is undefined.\n      if (prototype.extends) {\n        options.extends = prototype.extends;\n      }\n      Polymer.telemetry._registrate(prototype);\n      var ctor = document.registerElement(prototype.is, options);\n      return customCtor || ctor;\n    };\n\n    var desugar = function(prototype) {\n      // Note: need to chain user prototype with the correct type-extended\n      // version of Polymer.Base; this is especially important when you can't\n      // prototype swizzle (e.g. IE10), since CustomElements uses getPrototypeOf\n      var base = Polymer.Base;\n      if (prototype.extends) {\n        base = Polymer.Base._getExtendedPrototype(prototype.extends);\n      }\n      prototype = Polymer.Base.chainObject(prototype, base);\n      prototype.registerCallback();\n      return prototype;\n    };\n\n    if (userPolymer) {\n      for (var i in userPolymer) {\n        Polymer[i] = userPolymer[i];\n      }\n    }\n\n    Polymer.Class = function(prototype) {\n      /*\n      factoryImpl is required for a class constructor to be returned\n      Because users of Polymer.Class always expect a class constructor,\n      always provide a factoryImpl function\n      */\n      if (!prototype.factoryImpl) {\n        prototype.factoryImpl = function() {};\n      }\n      return desugar(prototype).constructor;\n    }\n\n  })();\n\n  /*\n  // Raw usage\n  [ctor =] Polymer.Class(prototype);\n  document.registerElement(name, ctor);\n\n  // Simplified usage\n  [ctor = ] Polymer(prototype);\n  */\n\n  // telemetry: statistics, logging, and debug\n\n  Polymer.telemetry = {\n    registrations: [],\n    _regLog: function(prototype) {\n      console.log('[' + prototype.is + ']: registered')\n    },\n    _registrate: function(prototype) {\n      this.registrations.push(prototype);\n      Polymer.log && this._regLog(prototype);\n    },\n    dumpRegistrations: function() {\n      this.registrations.forEach(this._regLog);\n    }\n  };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/polymer-bootstrap.html\n// module id = 20\n// module chunks = 0","/*__wc__loader*/\n\n\n  // a tiny bit of sugar for `document.currentScript.ownerDocument`\n  Object.defineProperty(window, 'currentImport', {\n    enumerable: true,\n    configurable: true,\n    get: function() {\n      return (document._currentScript || document.currentScript || {}).ownerDocument;\n    }\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/lang.html\n// module id = 21\n// module chunks = 0","/*__wc__loader*/\n\n  /*\n   * Helper for determining when first render occurs.\n   * Call `Polymer.RenderStatus.whenReady(callback)` to be notified when\n   * first render occurs or immediately if it has already occured.\n   * Note that since HTML Imports are designed to load before rendering,\n   * this call can also be used to guarantee that imports have loaded.\n   * This behavior is normalized to function correctly with the HTMLImports\n   * polyfill which does not otherwise maintain this rendering guarantee.\n   * Querying style and layout data before first render is currently\n   * problematic on some browsers (Blink/Webkit) so this helper can be used\n   * to prevent doing so until a safe time.\n   */\n  Polymer.RenderStatus = {\n\n    _ready: false,\n\n    _callbacks: [],\n\n    whenReady: function(cb) {\n      if (this._ready) {\n        cb();\n      } else {\n        this._callbacks.push(cb);\n      }\n    },\n\n    _makeReady: function() {\n      this._ready = true;\n      for (var i=0; i < this._callbacks.length; i++) {\n        this._callbacks[i]();\n      }\n      this._callbacks = [];\n    },\n\n    _catchFirstRender: function() {\n      requestAnimationFrame(function() {\n        Polymer.RenderStatus._makeReady();\n      });\n    },\n\n    _afterNextRenderQueue: [],\n    _waitingNextRender: false,\n\n    afterNextRender: function(element, fn, args) {\n      this._watchNextRender();\n      this._afterNextRenderQueue.push([element, fn, args]);\n    },\n\n    hasRendered: function() {\n      return this._ready;\n    },\n\n    _watchNextRender: function() {\n      if (!this._waitingNextRender) {\n        this._waitingNextRender = true;\n        var fn = function() {\n          Polymer.RenderStatus._flushNextRender();\n        };\n        if (!this._ready) {\n          this.whenReady(fn);\n        } else {\n          requestAnimationFrame(fn);\n        }\n      }\n    },\n\n    _flushNextRender: function() {\n      var self = this;\n      // we want to defer after render until just after the paint.\n      setTimeout(function() {\n        self._flushRenderCallbacks(self._afterNextRenderQueue);\n        self._afterNextRenderQueue = [];\n        self._waitingNextRender = false;\n      });\n    },\n\n    _flushRenderCallbacks: function(callbacks) {\n      for (var i=0, h; i < callbacks.length; i++) {\n        h = callbacks[i];\n        h[1].apply(h[0], h[2] || Polymer.nar);\n      }\n    }\n  };\n\n  if (window.HTMLImports) {\n    HTMLImports.whenReady(function() {\n      Polymer.RenderStatus._catchFirstRender();\n    });\n  } else {\n    Polymer.RenderStatus._catchFirstRender();\n  }\n\n  // NOTE: for bc.\n  Polymer.ImportStatus = Polymer.RenderStatus;\n  Polymer.ImportStatus.whenLoaded = Polymer.ImportStatus.whenReady;\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/render-status.html\n// module id = 22\n// module chunks = 0","/*__wc__loader*/\nrequire('./settings.html');\n\n\n(function() {\n\n  'use strict';\n\n  var settings = Polymer.Settings;\n\n  Polymer.Base = {\n\n    // Used for `isInstance` type checking; cannot use `instanceof` because\n    // there is no common Polymer.Base in the prototype chain between type\n    // extensions and normal custom elements\n    __isPolymerInstance__: true,\n\n    // pluggable features\n    // `this` context is a prototype, not an instance\n    _addFeature: function(feature) {\n      this.mixin(this, feature);\n    },\n\n    // `this` context is a prototype, not an instance\n    registerCallback: function() {\n      /*\n        When lazyRegister is 'max' defer all behavior work until first element\n        creation.\n        When set, a behavior cannot setup an element's `is` or\n        custom constructor via defining `factoryImpl`.\n        We do call beforeRegister on the prototype to preserve\n        the ability to use it in ES6. This orders the element\n        prototype's `beforeRegister` before behaviors' rather than after\n        as in the normal case.\n      */\n      if (settings.lazyRegister === 'max') {\n        if (this.beforeRegister) {\n          this.beforeRegister();\n        }\n      } else {\n        this._desugarBehaviors(); // abstract\n        // this code was in a function but is unrolled here for perf\n        for (var i=0, b; i < this.behaviors.length; i++) {\n          b = this.behaviors[i];\n          if (b.beforeRegister) {\n            b.beforeRegister.call(this);\n          }\n        }\n        if (this.beforeRegister) {\n          this.beforeRegister();\n        }\n      }\n      this._registerFeatures();  // abstract\n      if (!settings.lazyRegister) {\n        this.ensureRegisterFinished();\n      }\n    },\n\n    createdCallback: function() {\n      if (settings.disableUpgradeEnabled) {\n        if (this.hasAttribute('disable-upgrade')) {\n          this._propertySetter = disableUpgradePropertySetter;\n          this._configValue = null;\n          this.__data__ = {};\n          return;\n        } else {\n          this.__hasInitialized = true;\n        }\n      }\n      this.__initialize();\n    },\n\n    __initialize: function() {\n      if (!this.__hasRegisterFinished) {\n        this._ensureRegisterFinished(this.__proto__);\n      }\n      Polymer.telemetry.instanceCount++;\n      this.root = this;\n      // this code was in a function but is unrolled here for perf\n      for (var i=0, b; i < this.behaviors.length; i++) {\n        b = this.behaviors[i];\n        if (b.created) {\n          b.created.call(this);\n        }\n      }\n      if (this.created) {\n        this.created();\n      }\n      this._initFeatures(); // abstract\n    },\n\n    /**\n     * As an optimization, when `Polymer.Settings.lazyRegister` is set to true\n     * registration tasks are deferred until the first instance of the element\n     * is created. If an element should not defer registration tasks until\n     * this time, `ensureRegisterFinished` may be called\n     * on the element's prototype.\n     */\n    ensureRegisterFinished: function() {\n      this._ensureRegisterFinished(this);\n    },\n\n    _ensureRegisterFinished: function(proto) {\n      if (proto.__hasRegisterFinished !== proto.is || !proto.is) {\n        // apply behavior's beforeRegister at first instance time\n        // IFF `lazyRegister` is 'max'\n        if (settings.lazyRegister === 'max') {\n          proto._desugarBehaviors(); // abstract\n          // this code was in a function but is unrolled here for perf\n          for (var i=0, b; i < proto.behaviors.length; i++) {\n            b = proto.behaviors[i];\n            if (b.beforeRegister) {\n              b.beforeRegister.call(proto);\n            }\n          }\n        }\n        proto.__hasRegisterFinished = proto.is;\n        if (proto._finishRegisterFeatures) {\n          proto._finishRegisterFeatures();\n        }\n        // registration extension point\n        // this code was in a function but is unrolled here for perf\n        for (var j=0, pb; j < proto.behaviors.length; j++) {\n          pb = proto.behaviors[j];\n          if (pb.registered) {\n            pb.registered.call(proto);\n          }\n        }\n        if (proto.registered) {\n          proto.registered();\n        }\n        // where prototypes are simulated (IE10), element instance\n        // must be specfically fixed up.\n        if (settings.usePolyfillProto && proto !== this) {\n          proto.extend(this, proto);\n        }\n      }\n    },\n\n    // reserved for canonical behavior\n    attachedCallback: function() {\n      // NOTE: workaround for:\n      // https://code.google.com/p/chromium/issues/detail?id=516550\n      // To allow querying style/layout data in attached, we defer it\n      // until we are sure rendering is ready.\n      var self = this;\n      Polymer.RenderStatus.whenReady(function() {\n        self.isAttached = true;\n        // this code was in a function but is unrolled here for perf\n        for (var i=0, b; i < self.behaviors.length; i++) {\n          b = self.behaviors[i];\n          if (b.attached) {\n            b.attached.call(self);\n          }\n        }\n        if (self.attached) {\n          self.attached();\n        }\n      });\n    },\n\n    // reserved for canonical behavior\n    detachedCallback: function() {\n      // NOTE: duplicate attachedCallback behavior\n      var self = this;\n      Polymer.RenderStatus.whenReady(function() {\n        self.isAttached = false;\n        // this code was in a function but is unrolled here for perf\n        for (var i=0, b; i < self.behaviors.length; i++) {\n          b = self.behaviors[i];\n          if (b.detached) {\n            b.detached.call(self);\n          }\n        }\n        if (self.detached) {\n          self.detached();\n        }\n      });\n    },\n\n    // reserved for canonical behavior\n    attributeChangedCallback: function(name, oldValue, newValue) {\n      // TODO(sorvell): consider filtering out changes to host attributes\n      // note: this was barely measurable with 3 host attributes.\n      this._attributeChangedImpl(name); // abstract\n      // this code was in a function but is unrolled here for perf\n      for (var i=0, b; i < this.behaviors.length; i++) {\n        b = this.behaviors[i];\n        if (b.attributeChanged) {\n          b.attributeChanged.call(this, name, oldValue, newValue);\n        }\n      }\n      if (this.attributeChanged) {\n        this.attributeChanged(name, oldValue, newValue);\n      }\n    },\n\n    _attributeChangedImpl: function(name) {\n      this._setAttributeToProperty(this, name);\n    },\n\n    /**\n     * Copies own properties (including accessor descriptors) from a source\n     * object to a target object.\n     *\n     * @method extend\n     * @param {?Object} target Target object to copy properties to.\n     * @param {?Object} source Source object to copy properties from.\n     * @return {?Object} Target object that was passed as first argument or\n     *     source object if the target was null.\n     */\n    extend: function(target, source) {\n      if (target && source) {\n        var n$ = Object.getOwnPropertyNames(source);\n        for (var i=0, n; (i<n$.length) && (n=n$[i]); i++) {\n          this.copyOwnProperty(n, source, target);\n        }\n      }\n      return target || source;\n    },\n\n    /**\n     * Copies props from a source object to a target object.\n     *\n     * Note, this method uses a simple `for...in` strategy for enumerating\n     * properties.  To ensure only `ownProperties` are copied from source\n     * to target and that accessor implementations are copied, use `extend`.\n     *\n     * @method mixin\n     * @param {!Object} target Target object to copy properties to.\n     * @param {?Object} source Source object to copy properties from.\n     * @return {!Object} Target object that was passed as first argument.\n     */\n    mixin: function(target, source) {\n      for (var i in source) {\n        target[i] = source[i];\n      }\n      return target;\n    },\n\n    copyOwnProperty: function(name, source, target) {\n      var pd = Object.getOwnPropertyDescriptor(source, name);\n      if (pd) {\n        Object.defineProperty(target, name, pd);\n      }\n    },\n\n    _logger: function(level, args) {\n      // accept ['foo', 'bar'] and [['foo', 'bar']]\n      if (args.length === 1 && Array.isArray(args[0])) {\n        args = args[0];\n      }\n      // only accept logging functions\n      switch(level) {\n        case 'log':\n        case 'warn':\n        case 'error':\n          console[level].apply(console, args);\n          break;\n      }\n    },\n    _log: function() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('log', args);\n    },\n    _warn: function() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('warn', args);\n    },\n    _error: function() {\n      var args = Array.prototype.slice.call(arguments, 0);\n      this._logger('error', args);\n    },\n    _logf: function(/* args*/) {\n      return this._logPrefix.concat(this.is).concat(Array.prototype.slice.call(arguments, 0));\n    }\n  };\n\n  Polymer.Base._logPrefix = (function(){\n    // only Firefox, Chrome, and Safari support colors in console logging\n    var color = (window.chrome && !(/edge/i.test(navigator.userAgent))) || (/firefox/i.test(navigator.userAgent));\n    return color ? ['%c[%s::%s]:', 'font-weight: bold; background-color:#EEEE00;'] : ['[%s::%s]:'];\n  })();\n\n  Polymer.Base.chainObject = function(object, inherited) {\n    if (object && inherited && object !== inherited) {\n      if (!Object.__proto__) {\n        object = Polymer.Base.extend(Object.create(inherited), object);\n      }\n      object.__proto__ = inherited;\n    }\n    return object;\n  };\n\n  Polymer.Base = Polymer.Base.chainObject(Polymer.Base, HTMLElement.prototype);\n  Polymer.BaseDescriptors = {};\n\n  var disableUpgradePropertySetter;\n\n  if (settings.disableUpgradeEnabled) {\n\n    disableUpgradePropertySetter = function(property, value) {\n      this.__data__[property] = value;\n    }\n\n    var origAttributeChangedCallback = Polymer.Base.attributeChangedCallback;\n    Polymer.Base.attributeChangedCallback = function(name, oldValue, newValue) {\n      if (!this.__hasInitialized && name === 'disable-upgrade') {\n        this.__hasInitialized = true;\n        this._propertySetter = Polymer.Bind._modelApi._propertySetter;\n        this._configValue = Polymer.Base._configValue;\n        this.__initialize();\n      }\n      origAttributeChangedCallback.call(this, name, oldValue, newValue);\n    }\n\n  }\n\n  if (window.CustomElements) {\n    Polymer.instanceof = CustomElements.instanceof;\n  } else {\n    Polymer.instanceof = function(obj, ctor) {\n      return obj instanceof ctor;\n    };\n  }\n\n  Polymer.isInstance = function(obj) {\n    return Boolean(obj && obj.__isPolymerInstance__);\n  };\n\n  // TODO(sjmiles): ad hoc telemetry\n  Polymer.telemetry.instanceCount = 0;\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/base.html\n// module id = 23\n// module chunks = 0","/*__wc__loader*/\n\n\n(function() {\n\n  var modules = {};\n  var lcModules = {};\n  var findModule = function(id) {\n    return modules[id] || lcModules[id.toLowerCase()];\n  };\n\n  /**\n   * The `dom-module` element registers the dom it contains to the name given\n   * by the module's id attribute. It provides a unified database of dom\n   * accessible via any dom-module element. Use the `import(id, selector)`\n   * method to locate dom within this database. For example,\n   *\n   * <dom-module id=\"foo\">\n   *   <img src=\"stuff.png\">\n   * </dom-module>\n   *\n   * Then in code in some other location that cannot access the dom-module above\n   *\n   * var img = document.createElement('dom-module').import('foo', 'img');\n   *\n   */\n  var DomModule = function() {\n    return document.createElement('dom-module');\n  };\n\n  DomModule.prototype = Object.create(HTMLElement.prototype);\n\n  Polymer.Base.mixin(DomModule.prototype, {\n\n    createdCallback: function() {\n      this.register();\n    },\n\n    /**\n     * Registers the dom-module at a given id. This method should only be called\n     * when a dom-module is imperatively created. For\n     * example, `document.createElement('dom-module').register('foo')`.\n     * @method register\n     * @param {String} id The id at which to register the dom-module.\n     */\n    register: function(id) {\n      id = id || this.id ||\n        this.getAttribute('name') || this.getAttribute('is');\n      if (id) {\n        this.id = id;\n        // store id separate from lowercased id so that\n        // in all cases mixedCase id will stored distinctly\n        // and lowercase version is a fallback\n        modules[id] = this;\n        lcModules[id.toLowerCase()] = this;\n      }\n    },\n\n    /**\n     * Retrieves the dom specified by `selector` in the module specified by\n     * `id`. For example, this.import('foo', 'img');\n     * @method register\n     * @param {String} id\n     * @param {String} selector\n     * @return {Object} Returns the dom which matches `selector` in the module\n     * at the specified `id`.\n     */\n    import: function(id, selector) {\n      if (id) {\n        var m = findModule(id);\n        if (!m) {\n          // If polyfilling, a script can run before a dom-module element\n          // is upgraded. We force the containing document to upgrade\n          // dom-modules and try again to workaround this polyfill limitation.\n          forceDomModulesUpgrade();\n          m = findModule(id);\n        }\n        if (m && selector) {\n          m = m.querySelector(selector);\n        }\n        return m;\n      }\n    }\n\n  });\n\n  Object.defineProperty(DomModule.prototype, 'constructor', {\n    value: DomModule, configurable: true, writable: true\n  });\n\n  // NOTE: HTMLImports polyfill does not\n  // block scripts on upgrading elements. However, we want to ensure that\n  // any dom-module in the tree is available prior to a subsequent script\n  // processing.\n  // Therefore, we force any dom-modules in the tree to upgrade when dom-module\n  // is registered by temporarily setting CE polyfill to crawl the entire\n  // imports tree. (Note: this should only upgrade any imports that have been\n  // loaded by this point. In addition the HTMLImports polyfill should be\n  // changed to upgrade elements prior to running any scripts.)\n  var cePolyfill = window.CustomElements && !CustomElements.useNative;\n  // NOTE: Under polyfilled CE/HI, if script and html are separate, then\n  // for dom modules to be found, script should be executed as follows:\n  //   HTMLImports.whenReady(function() {\n  //    CustomElements.ready = false;\n  //    // registrations\n  //    CustomElements.upgradeDocumentTree(document);\n  //    CustomElements.ready = true;\n  //  });\n  // TODO(sorvell): A webcomponentsjs method should be added for this.\n  document.registerElement('dom-module', DomModule);\n\n  function forceDomModulesUpgrade() {\n    if (cePolyfill) {\n      var script = document._currentScript || document.currentScript;\n      var doc = script && script.ownerDocument || document;\n      // find all dom-modules\n      var modules = doc.querySelectorAll('dom-module');\n      // minimize work by going backwards and stopping if we find an\n      // upgraded module.\n      for (var i= modules.length-1, m; (i >=0) && (m=modules[i]); i--) {\n        if (m.__upgraded__) {\n          return;\n        } else {\n          CustomElements.upgrade(m);\n        }\n      }\n    }\n  }\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-module.html\n// module id = 24\n// module chunks = 0","/*__wc__loader*/\n\n\n  Polymer.Base._addFeature({\n\n    _prepIs: function() {\n      if (!this.is) {\n        var module =\n          (document._currentScript || document.currentScript).parentNode;\n        if (module.localName === 'dom-module') {\n          var id = module.id || module.getAttribute('name')\n            || module.getAttribute('is');\n          this.is = id;\n        }\n      }\n      if (this.is) {\n        this.is = this.is.toLowerCase();\n      }\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/micro/tag.html\n// module id = 25\n// module chunks = 0","/*__wc__loader*/\n\n\n  /**\n   * Automatically extend using objects referenced in `behaviors` array.\n   *\n   *     someBehaviorObject = {\n   *       accessors: {\n   *        value: {type: Number, observer: '_numberChanged'}\n   *       },\n   *       observers: [\n   *         // ...\n   *       ],\n   *       ready: function() {\n   *         // called before prototoype's ready\n   *       },\n   *       _numberChanged: function() {}\n   *     };\n   *\n   *     Polymer({\n   *\n   *       behaviors: [\n   *         someBehaviorObject\n   *       ]\n   *\n   *       ...\n   *\n   *     });\n   *\n   * @class base feature: behaviors\n   */\n\n  Polymer.Base._addFeature({\n\n    /**\n     * Array of objects to extend this prototype with.\n     *\n     * Each entry in the array may specify either a behavior object or array\n     * of behaviors.\n     *\n     * Each behavior object may define lifecycle callbacks, `properties`,\n     * `hostAttributes`, `observers` and `listeners`.\n     *\n     * Lifecycle callbacks will be called for each behavior in the order given\n     * in the `behaviors` array, followed by the callback on the prototype.\n     * Additionally, any non-lifecycle functions on the behavior object are\n     * mixed into the base prototype, such that same-named functions on the\n     * prototype take precedence, followed by later behaviors over earlier\n     * behaviors.\n     */\n    behaviors: [],\n\n    _desugarBehaviors: function() {\n      if (this.behaviors.length) {\n        this.behaviors = this._desugarSomeBehaviors(this.behaviors);\n      }\n    },\n\n    _desugarSomeBehaviors: function(behaviors) {\n      var behaviorSet = [];\n      // iteration 1\n      behaviors = this._flattenBehaviorsList(behaviors);\n      // iteration 2\n      // traverse the behaviors in _reverse_ order (youngest first) because\n      // `_mixinBehavior` has _first property wins_ behavior, this is done\n      // to optimize # of calls to `_copyOwnProperty`\n      for (var i=behaviors.length-1; i>=0; i--) {\n        var b = behaviors[i];\n        if (behaviorSet.indexOf(b) === -1) {\n          this._mixinBehavior(b);\n          behaviorSet.unshift(b);\n        }\n      }\n      return behaviorSet;\n    },\n\n    _flattenBehaviorsList: function(behaviors) {\n      var flat = [];\n      for (var i=0; i < behaviors.length; i++) {\n        var b = behaviors[i];\n        if (b instanceof Array) {\n          flat = flat.concat(this._flattenBehaviorsList(b));\n        }\n        // filter out null entries so other iterators don't need to check\n        else if (b) {\n          flat.push(b);\n        } else {\n          this._warn(this._logf('_flattenBehaviorsList', 'behavior is null, check for missing or 404 import'));\n        }\n      }\n      return flat;\n    },\n\n    _mixinBehavior: function(b) {\n      var n$ = Object.getOwnPropertyNames(b);\n      var useAssignment = b._noAccessors;\n      for (var i=0, n; (i<n$.length) && (n=n$[i]); i++) {\n        if (!Polymer.Base._behaviorProperties[n] && !this.hasOwnProperty(n)) {\n          if (useAssignment) {\n            this[n] = b[n];\n          } else {\n            this.copyOwnProperty(n, b, this);\n          }\n        }\n      }\n    },\n\n    _prepBehaviors: function() {\n      this._prepFlattenedBehaviors(this.behaviors);\n    },\n\n    _prepFlattenedBehaviors: function(behaviors) {\n      // iteration 3\n      // `_prepBehavior` goes in natural order\n      // otherwise, it's a tricky detail for implementors of `_prepBehavior`\n      for (var i=0, l=behaviors.length; i<l; i++) {\n        this._prepBehavior(behaviors[i]);\n      }\n      // prep our prototype-as-behavior\n      this._prepBehavior(this);\n    },\n\n    _marshalBehaviors: function() {\n      for (var i=0; i < this.behaviors.length; i++) {\n        this._marshalBehavior(this.behaviors[i]);\n      }\n      this._marshalBehavior(this);\n    }\n\n  });\n\n  // special properties on behaviors are not mixed in and are instead\n  // either processed specially (e.g. listeners, properties) or available\n  // for calling via doBehavior (e.g. created, ready)\n  Polymer.Base._behaviorProperties = {\n    hostAttributes: true,\n    beforeRegister: true,\n    registered: true,\n    properties: true,\n    observers: true,\n    listeners: true,\n    created: true,\n    attached: true,\n    detached: true,\n    attributeChanged: true,\n    ready: true,\n    _noAccessors: true\n  }\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/micro/behaviors.html\n// module id = 26\n// module chunks = 0","/*__wc__loader*/\n\n\n  /**\n   * Support `extends` property (for type-extension only).\n   *\n   * If the mixin is String-valued, the corresponding Polymer module\n   * is mixed in.\n   *\n   *     Polymer({\n   *       is: 'pro-input',\n   *       extends: 'input',\n   *       ...\n   *     });\n   *\n   * Type-extension objects are created using `is` notation in HTML, or via\n   * the secondary argument to `document.createElement` (the type-extension\n   * rules are part of the Custom Elements specification, not something\n   * created by Polymer).\n   *\n   * Example:\n   *\n   *     <!-- right: creates a pro-input element -->\n   *     <input is=\"pro-input\">\n   *\n   *     <!-- wrong: creates an unknown element -->\n   *     <pro-input>\n   *\n   *     <script>\n   *        // right: creates a pro-input element\n   *        var elt = document.createElement('input', 'pro-input');\n   *\n   *        // wrong: creates an unknown element\n   *        var elt = document.createElement('pro-input');\n   *     <\\script>\n   *\n   *   @class base feature: extends\n   */\n\n  Polymer.Base._addFeature({\n\n    _getExtendedPrototype: function(tag) {\n      return this._getExtendedNativePrototype(tag);\n    },\n\n    _nativePrototypes: {}, // static\n\n    _getExtendedNativePrototype: function(tag) {\n      var p = this._nativePrototypes[tag];\n      if (!p) {\n        p = Object.create(this.getNativePrototype(tag));\n        var p$ = Object.getOwnPropertyNames(Polymer.Base);\n        for (var i=0, n; (i < p$.length) && (n=p$[i]); i++) {\n          if (!Polymer.BaseDescriptors[n]) {\n            p[n] = Polymer.Base[n];\n          }\n        }\n        Object.defineProperties(p, Polymer.BaseDescriptors);\n        this._nativePrototypes[tag] = p;\n      }\n      return p;\n    },\n\n    /**\n     * Returns the native element prototype for the tag specified.\n     *\n     * @method getNativePrototype\n     * @param {string} tag  HTML tag name.\n     * @return {Object} Native prototype for specified tag.\n    */\n    getNativePrototype: function(tag) {\n      // TODO(sjmiles): sad necessity\n      return Object.getPrototypeOf(document.createElement(tag));\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/micro/extends.html\n// module id = 27\n// module chunks = 0","/*__wc__loader*/\n\n\n  /**\n   * Generates a boilerplate constructor.\n   * \n   *     XFoo = Polymer({\n   *       is: 'x-foo'\n   *     });\n   *     ASSERT(new XFoo() instanceof XFoo);\n   *  \n   * You can supply a custom constructor on the prototype. But remember that \n   * this constructor will only run if invoked **manually**. Elements created\n   * via `document.createElement` or from HTML _will not invoke this method_.\n   * \n   * Instead, we reuse the concept of `constructor` for a factory method which \n   * can take arguments. \n   * \n   *     MyFoo = Polymer({\n   *       is: 'my-foo',\n   *       constructor: function(foo) {\n   *         this.foo = foo;\n   *       }\n   *       ...\n   *     });\n   * \n   * @class base feature: constructor\n   */\n\n  Polymer.Base._addFeature({\n\n    // registration-time\n\n    _prepConstructor: function() {\n      // support both possible `createElement` signatures\n      this._factoryArgs = this.extends ? [this.extends, this.is] : [this.is];\n      // thunk the constructor to delegate allocation to `createElement`\n      var ctor = function() { \n        return this._factory(arguments); \n      };\n      if (this.hasOwnProperty('extends')) {\n        ctor.extends = this.extends; \n      }\n      // ensure constructor is set. The `constructor` property is\n      // not writable on Safari; note: Chrome requires the property\n      // to be configurable.\n      Object.defineProperty(this, 'constructor', {value: ctor, \n        writable: true, configurable: true});\n      ctor.prototype = this;\n    },\n\n    _factory: function(args) {\n      var elt = document.createElement.apply(document, this._factoryArgs);\n      if (this.factoryImpl) {\n        this.factoryImpl.apply(elt, args);\n      }\n      return elt;\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/micro/constructor.html\n// module id = 28\n// module chunks = 0","/*__wc__loader*/\n\n\n  /**\n   * Define property metadata.\n   *\n   *     properties: {\n   *       <property>: <Type || Object>,\n   *       ...\n   *     }\n   *\n   * Example:\n   *\n   *     properties: {\n   *       // `foo` property can be assigned via attribute, will be deserialized to\n   *       // the specified data-type. All `properties` properties have this behavior.\n   *       foo: String,\n   *\n   *       // `bar` property has additional behavior specifiers.\n   *       //   type: as above, type for (de-)serialization\n   *       //   notify: true to send a signal when a value is set to this property\n   *       //   reflectToAttribute: true to serialize the property to an attribute\n   *       //   readOnly: if true, the property has no setter\n   *       bar: {\n   *         type: Boolean,\n   *         notify: true\n   *       }\n   *     }\n   *\n   * By itself the properties feature doesn't do anything but provide property\n   * information. Other features use this information to control behavior.\n   *\n   * The `type` information is used by the `attributes` feature to convert\n   * String values in attributes to typed properties. The `bind` feature uses\n   * property information to control property access.\n   *\n   * Marking a property as `notify` causes a change in the property to\n   * fire a non-bubbling event called `<property>-changed`. Elements that\n   * have enabled two-way binding to the property use this event to\n   * observe changes.\n   *\n   * `readOnly` properties have a getter, but no setter. To set a read-only\n   * property, use the private setter method `_set_<property>(value)`.\n   *\n   * @class base feature: properties\n   */\n\n  // null object\n  Polymer.nob = Object.create(null);\n\n  Polymer.Base._addFeature({\n\n    /**\n     * Returns a property descriptor object for the property specified.\n     *\n     * This method allows introspecting the configuration of a Polymer element's\n     * properties as configured in its `properties` object.  Note, this method\n     * normalizes shorthand forms of the `properties` object into longhand form.\n     *\n     * @method getPropertyInfo\n     * @param {string} property Name of property to introspect.\n     * @return {Object} Property descriptor for specified property.\n    */\n    // TODO(sorvell): This function returns the first property object found\n    // and this is not the property info Polymer acts on for readOnly or type\n    // This api should be combined with _propertyInfo.\n    getPropertyInfo: function(property) {\n      var info = this._getPropertyInfo(property, this.properties);\n      if (!info) {\n        for (var i=0; i < this.behaviors.length; i++) {\n          info = this._getPropertyInfo(property, this.behaviors[i].properties);\n          if (info) {\n            return info;\n          }\n        }\n      }\n      return info || Polymer.nob;\n    },\n\n    _getPropertyInfo: function(property, properties) {\n      var p = properties && properties[property];\n      if (typeof(p) === 'function') {\n        p = properties[property] = {\n          type: p\n        };\n      }\n      // Let users determine whether property was defined without null check\n      if (p) {\n        p.defined = true;\n      }\n      return p;\n    },\n\n    // union properties, behaviors.properties, and propertyEffects\n    _prepPropertyInfo: function() {\n      this._propertyInfo = {};\n      for (var i=0; i < this.behaviors.length; i++) {\n        this._addPropertyInfo(this._propertyInfo, this.behaviors[i].properties);\n      }\n      this._addPropertyInfo(this._propertyInfo, this.properties);\n      this._addPropertyInfo(this._propertyInfo, this._propertyEffects);\n    },\n\n    // list of propertyInfo with {readOnly, type, attribute}\n    _addPropertyInfo: function(target, source) {\n      if (source) {\n        var t, s;\n        for (var i in source) {\n          t = target[i];\n          s = source[i];\n          // optimization: avoid info'ing properties that are protected and\n          // not read only since they are not needed for attributes or\n          // configuration.\n          if (i[0] === '_' && !s.readOnly) {\n            continue;\n          }\n          if (!target[i]) {\n            target[i] = {\n              type: typeof(s) === 'function' ? s : s.type,\n              readOnly: s.readOnly,\n              attribute: Polymer.CaseMap.camelToDashCase(i)\n            }\n          } else {\n            if (!t.type) {\n              t.type = s.type;\n            }\n            if (!t.readOnly) {\n              t.readOnly = s.readOnly;\n            }\n          }\n        }\n      }\n    }\n\n  });\n\n/*\n * Object containing property configuration data, where keys are property\n * names and values are descriptor objects that configure Polymer features\n * for the property.  Valid fields in the property descriptor object are\n * as follows:\n *\n * * `type` - used to determine how to deserialize attribute value strings\n *    to JS properties.  By convention, this field takes a JS constructor\n *    for the type, such as `String` or `Boolean`.\n * * `value` - default value for the property.  The value may either be a\n *    primitive value, or a function that returns a value (which should be\n *    used for initializing Objects and Arrays to avoid shared objects on\n *    instances).\n * * `notify` - when `true`, configures the property to fire a non-bubbling\n *    event called `<property>-changed` for each change to the property.\n *    Elements that have enabled two-way binding to the property use this\n *    event to observe changes.\n * * `readOnly` - when `true` configures the property to have a getter, but\n *    no setter. To set a read-only property, use the private setter method\n *    `_set_<property>(value)`.\n * * `reflectToAttribute` - when `true` configures the property value to\n *    be serialized to a string and reflected to the attribute each time\n *    it changes.  This can impact performance, so it should be used\n *    only when reflecting the attribute value is important.\n * * `observer` - indicates the name of a function that should be called\n *    each time the property changes. `e.g.: `observer: 'valueChanged'\n * * `computed` - configures the property to be computed by a computing\n *    function each time one or more dependent properties change.\n *    `e.g.: `computed: 'computeValue(prop1, prop2)'\n *\n * Note: a shorthand may be used for the object descriptor when only the\n * type needs to be specified by using the type as the descriptor directly.\n * @memberof! feature: properties\n */\n(function() {\n  var propertiesDesc = {configurable: true, writable: true, enumerable: true,\n    value: {}};\n  Polymer.BaseDescriptors.properties = propertiesDesc;\n  Object.defineProperty(Polymer.Base, 'properties', propertiesDesc);\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/micro/properties.html\n// module id = 29\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/case-map.html');\n\n\n\n  /**\n   * Support for `hostAttributes` property.\n   *\n   *     hostAttributes: {\n   *       'aria-role': 'button',\n   *       tabindex: 0\n   *     }\n   *\n   * `hostAttributes` is an object containing attribute names as keys and static values\n   * to set to attributes when the element is created.\n   *\n   * Support for mapping attributes to properties.\n   *\n   * Properties that are configured in `properties` with a type are mapped\n   * to attributes.\n   *\n   * A value set in an attribute is deserialized into the specified\n   * data-type and stored into the matching property.\n   *\n   * Example:\n   *\n   *     properties: {\n   *       // values set to index attribute are converted to Number and propagated\n   *       // to index property\n   *       index: Number,\n   *       // values set to label attribute are propagated to index property\n   *       label: String\n   *     }\n   *\n   * Types supported for deserialization:\n   *\n   * - Number\n   * - Boolean\n   * - String\n   * - Object (JSON)\n   * - Array (JSON)\n   * - Date\n   *\n   * This feature implements `attributeChanged` to support automatic\n   * propagation of attribute values at run-time. If you override\n   * `attributeChanged` be sure to call this base class method\n   * if you also want the standard behavior.\n   *\n   * @class base feature: attributes\n   */\n\n  Polymer.Base._addFeature({\n\n    // prototype time\n    _addHostAttributes: function(attributes) {\n      if (!this._aggregatedAttributes) {\n        this._aggregatedAttributes = {};\n      }\n      if (attributes) {\n        this.mixin(this._aggregatedAttributes, attributes);\n      }\n    },\n\n    // instance time\n    _marshalHostAttributes: function() {\n      if (this._aggregatedAttributes) {\n        this._applyAttributes(this, this._aggregatedAttributes);\n      }\n    },\n\n    /* apply attributes to node but avoid overriding existing values */\n    _applyAttributes: function(node, attr$) {\n      for (var n in attr$) {\n        // NOTE: never allow 'class' to be set in hostAttributes\n        // since shimming classes would make it work\n        // inconsisently under native SD\n        if (!this.hasAttribute(n) && (n !== 'class')) {\n          var v = attr$[n];\n          this.serializeValueToAttribute(v, n, this);\n        }\n      }\n    },\n\n    _marshalAttributes: function() {\n      this._takeAttributesToModel(this);\n    },\n\n    _takeAttributesToModel: function(model) {\n      if (this.hasAttributes()) {\n        for (var i in this._propertyInfo) {\n          var info = this._propertyInfo[i];\n          if (this.hasAttribute(info.attribute)) {\n            this._setAttributeToProperty(model, info.attribute, i, info);\n          }\n        }\n      }\n    },\n\n    _setAttributeToProperty: function(model, attribute, property, info) {\n      // Don't deserialize back to property if currently reflecting\n      if (!this._serializing) {\n        property = (property || Polymer.CaseMap.dashToCamelCase(attribute));\n        // fallback to property lookup\n        // TODO(sorvell): check for _propertyInfo existence because of dom-bind\n        info = info || (this._propertyInfo && this._propertyInfo[property]);\n        if (info && !info.readOnly) {\n          var v = this.getAttribute(attribute);\n          model[property] = this.deserialize(v, info.type);\n        }\n      }\n    },\n\n    _serializing: false,\n\n    /**\n     * Serializes a property to its associated attribute.\n     *\n     * Generally users should set `reflectToAttribute: true` in the\n     * `properties` configuration to achieve automatic attribute reflection.\n     *\n     * @method reflectPropertyToAttribute\n     * @param {string} property Property name to reflect.\n     * @param {*=} attribute Attribute name to reflect.\n     * @param {*=} value Property value to refect.\n     */\n    reflectPropertyToAttribute: function(property, attribute, value) {\n      this._serializing = true;\n      value = (value === undefined) ? this[property] : value;\n      this.serializeValueToAttribute(value,\n        attribute || Polymer.CaseMap.camelToDashCase(property));\n      this._serializing = false;\n    },\n\n    /**\n     * Sets a typed value to an HTML attribute on a node.\n     *\n     * This method calls the `serialize` method to convert the typed\n     * value to a string.  If the `serialize` method returns `undefined`,\n     * the attribute will be removed (this is the default for boolean\n     * type `false`).\n     *\n     * @method serializeValueToAttribute\n     * @param {*} value Value to serialize.\n     * @param {string} attribute Attribute name to serialize to.\n     * @param {Element=} node Element to set attribute to (defaults to this).\n     */\n    serializeValueToAttribute: function(value, attribute, node) {\n      var str = this.serialize(value);\n      // TODO(kschaaf): Consider enabling under a flag\n      // if (str && str.length > 250) {\n      //   this._warn(this._logf('serializeValueToAttribute',\n      //     'serializing long attribute values can lead to poor performance', this));\n      // }\n      node = node || this;\n      if (str === undefined) {\n        node.removeAttribute(attribute);\n      } else {\n        node.setAttribute(attribute, str);\n      }\n    },\n\n    /**\n     * Converts a string to a typed value.\n     *\n     * This method is called by Polymer when reading HTML attribute values to\n     * JS properties.  Users may override this method on Polymer element\n     * prototypes to provide deserialization for custom `type`s.  Note,\n     * the `type` argument is the value of the `type` field provided in the\n     * `properties` configuration object for a given property, and is\n     * by convention the constructor for the type to deserialize.\n     *\n     * Note: The return value of `undefined` is used as a sentinel value to\n     * indicate the attribute should be removed.\n     *\n     * @method deserialize\n     * @param {string} value Attribute value to deserialize.\n     * @param {*} type Type to deserialize the string to.\n     * @return {*} Typed value deserialized from the provided string.\n     */\n    deserialize: function(value, type) {\n      switch (type) {\n        case Number:\n          value = Number(value);\n          break;\n\n        case Boolean:\n          value = (value != null);\n          break;\n\n        case Object:\n          try {\n            value = JSON.parse(value);\n          } catch(x) {\n            // allow non-JSON literals like Strings and Numbers\n          }\n          break;\n\n        case Array:\n          try {\n            value = JSON.parse(value);\n          } catch(x) {\n            value = null;\n            console.warn('Polymer::Attributes: couldn`t decode Array as JSON');\n          }\n          break;\n\n        case Date:\n          value = new Date(value);\n          break;\n\n        case String:\n        default:\n          break;\n      }\n      return value;\n    },\n\n    /**\n     * Converts a typed value to a string.\n     *\n     * This method is called by Polymer when setting JS property values to\n     * HTML attributes.  Users may override this method on Polymer element\n     * prototypes to provide serialization for custom types.\n     *\n     * @method serialize\n     * @param {*} value Property value to serialize.\n     * @return {string} String serialized from the provided property value.\n     */\n    serialize: function(value) {\n      /* eslint-disable no-fallthrough */\n      switch (typeof value) {\n        case 'boolean':\n          return value ? '' : undefined;\n\n        case 'object':\n          if (value instanceof Date) {\n            return value.toString();\n          } else if (value) {\n            try {\n              return JSON.stringify(value);\n            } catch(x) {\n              return '';\n            }\n          }\n\n        default:\n          return value != null ? value : undefined;\n      }\n    }\n    /* eslint-enable no-fallthrough */\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/micro/attributes.html\n// module id = 30\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/resolve-url.html');\n\n\n\n  /**\n   * Automatic template management.\n   *\n   * The `template` feature locates and instances a `<template>` element\n   * corresponding to the current Polymer prototype.\n   *\n   * The `<template>` element may be immediately preceeding the script that\n   * invokes `Polymer()`.\n   *\n   * @class standard feature: template\n   */\n\n  Polymer.Base._addFeature({\n\n    _prepTemplate: function() {\n      // locate template using dom-module\n      var module;\n      if (this._template === undefined) {\n        module = Polymer.DomModule.import(this.is);\n        this._template = module && module.querySelector('template');\n      }\n      // NOTE: users setting `_importPath` is supported in Polymer 2.x but not\n      // 1.x.\n      if (module) {\n        var assetPath = module.getAttribute('assetpath') || '';\n        var importURL = Polymer.ResolveUrl.resolveUrl(assetPath,\n        module.ownerDocument.baseURI);\n        this._importPath = Polymer.ResolveUrl.pathFromUrl(importURL);\n      } else {\n        this._importPath = '';\n      }\n      // stick finger in footgun\n      if (this._template && this._template.hasAttribute('is')) {\n        this._warn(this._logf('_prepTemplate', 'top-level Polymer template ' +\n          'must not be a type-extension, found', this._template,\n          'Move inside simple <template>.'));\n      }\n      // bootstrap the template if it has not already been\n      if (this._template && !this._template.content &&\n          window.HTMLTemplateElement && HTMLTemplateElement.decorate) {\n        HTMLTemplateElement.decorate(this._template);\n      }\n    },\n\n    _stampTemplate: function() {\n      if (this._template) {\n        // note: root is now a fragment which can be manipulated\n        // while not attached to the element.\n        this.root = this.instanceTemplate(this._template);\n      }\n    },\n\n    /**\n     * Calls `importNode` on the `content` of the `template` specified and\n     * returns a document fragment containing the imported content.\n     *\n     * @method instanceTemplate\n     * @param {HTMLTemplateElement} template HTML template element to instance.\n     * @return {DocumentFragment} Document fragment containing the imported\n     *   template content.\n    */\n    instanceTemplate: function(template) {\n      var dom =\n        document.importNode(template._content || template.content, true);\n      return dom;\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mini/template.html\n// module id = 31\n// module chunks = 0","/*__wc__loader*/\n\n\n  /**\n   * Provides `ready` lifecycle callback which is called parent to child.\n   *\n   * This can be useful in a number of cases. Here are some examples:\n   *\n   * Setting a default property value that should have a side effect: To ensure\n   * the side effect, an element must set a default value no sooner than\n   * `created`; however, since `created` flows child to host, this is before the\n   * host has had a chance to set a property value on the child. The `ready`\n   * method solves this problem since it's called host to child.\n   *\n   * Dom distribution: To support reprojection efficiently, it's important to\n   * distribute from host to child in one shot. The `attachedCallback` mostly\n   * goes in the desired order except for elements that are in dom to start; in\n   * this case, all children are attached before the host element. Ready also\n   * addresses this case since it's guaranteed to be called host to child.\n   *\n   * @class standard feature: ready\n   */\n\n(function() {\n\n  var baseAttachedCallback = Polymer.Base.attachedCallback;\n  var baseDetachedCallback = Polymer.Base.detachedCallback;\n\n  Polymer.Base._addFeature({\n\n    _hostStack: [],\n\n    /**\n     * Lifecycle callback invoked when all local DOM children of this element\n     * have been created and \"configured\" with data bound from this element,\n     * attribute values, or defaults.\n     *\n     * @method ready\n     */\n    ready: function() {\n    },\n\n    // NOTE: The concept of 'host' is overloaded. There are two different\n    // notions:\n    // 1. an element hosts the elements in its local dom root.\n    // 2. an element hosts the elements on which it configures data.\n    // Practially, these notions are almost always coincident.\n    // Some special elements like templates may separate them.\n    // In order not to over-emphaisize this technical difference, we expose\n    // one concept to the user and it maps to the dom-related meaning of host.\n    //\n    // set this element's `host` and push this element onto the `host`'s\n    // list of `client` elements\n    // this.dataHost reflects the parent element who manages\n    // any bindings for the element.  Only elements originally\n    // stamped from Polymer templates have a dataHost, and this\n    // never changes\n    _registerHost: function(host) {\n      // NOTE: The `dataHost` of an element never changes.\n      this.dataHost = host = host ||\n        Polymer.Base._hostStack[Polymer.Base._hostStack.length-1];\n      if (host && host._clients) {\n        host._clients.push(this);\n      }\n      this._clients = null;\n      this._clientsReadied = false;\n    },\n\n    // establish this element as the current hosting element (allows\n    // any elements we stamp to easily set host to us).\n    _beginHosting: function() {\n      Polymer.Base._hostStack.push(this);\n      if (!this._clients) {\n        this._clients = [];\n      }\n    },\n\n    _endHosting: function() {\n      // this element is no longer the current hosting element\n      Polymer.Base._hostStack.pop();\n    },\n\n    _tryReady: function() {\n      this._readied = false;\n      if (this._canReady()) {\n        this._ready();\n      }\n    },\n\n    _canReady: function() {\n      return !this.dataHost || this.dataHost._clientsReadied;\n    },\n\n    _ready: function() {\n      // extension point\n      this._beforeClientsReady();\n      if (this._template) {\n        // prepare root\n        this._setupRoot();\n        this._readyClients();\n      }\n      this._clientsReadied = true;\n      this._clients = null;\n      // extension point\n      this._afterClientsReady();\n      this._readySelf();\n    },\n\n    _readyClients: function() {\n      // logically distribute self\n      this._beginDistribute();\n      // now fully prepare localChildren\n      var c$ = this._clients;\n      if (c$) {\n        for (var i=0, l= c$.length, c; (i<l) && (c=c$[i]); i++) {\n          c._ready();\n        }\n      }\n      // perform actual dom composition\n      this._finishDistribute();\n      // ensure elements are attached if they are in the dom at ready time\n      // helps normalize attached ordering between native and polyfill ce.\n      // TODO(sorvell): worth perf cost? ~6%\n      // if (!Polymer.Settings.useNativeCustomElements) {\n      //   CustomElements.takeRecords();\n      // }\n    },\n\n    // mark readied and call `ready`\n    // note: called localChildren -> host\n    _readySelf: function() {\n      // ready\n      // this code was in a function but is unrolled here for perf\n      for (var i=0, b; i < this.behaviors.length; i++) {\n        b = this.behaviors[i];\n        if (b.ready) {\n          b.ready.call(this);\n        }\n      }\n      if (this.ready) {\n        this.ready();\n      }\n      this._readied = true;\n      if (this._attachedPending) {\n        this._attachedPending = false;\n        this.attachedCallback();\n      }\n    },\n\n    // for system overriding\n    _beforeClientsReady: function() {},\n    _afterClientsReady: function() {},\n    _beforeAttached: function() {},\n\n    /**\n     * Polymer library implementation of the Custom Elements `attachedCallback`.\n     *\n     * Note, users should not override `attachedCallback`, and instead should\n     * implement the `attached` method on Polymer elements to receive\n     * attached-time callbacks.\n     *\n     * @protected\n     */\n    attachedCallback: function() {\n      if (this._readied) {\n        this._beforeAttached();\n        baseAttachedCallback.call(this);\n      } else {\n        this._attachedPending = true;\n      }\n    },\n\n    /**\n     * Polymer library implementation of the Custom Elements `detachedCallback`.\n     *\n     * Note, users should not override `detachedCallback`, and instead should\n     * implement the `detached` method on Polymer elements to receive\n     * detached-time callbacks.\n     *\n     * @protected\n     */\n    detachedCallback: function() {\n      if (this._readied) {\n        baseDetachedCallback.call(this);\n      } else {\n        this._attachedPending = false;\n      }\n    }\n\n  });\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mini/ready.html\n// module id = 32\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/array-splice.html');\n\nrequire('../lib/dom-tree-api.html');\n\nrequire('../lib/dom-api.html');\n\nrequire('../lib/dom-api-shady.html');\n\nrequire('../lib/dom-api-shadow.html');\n\nrequire('../lib/dom-api-flush.html');\n\nrequire('../lib/dom-api-event.html');\n\nrequire('../lib/dom-api-classlist.html');\n\nrequire('../lib/dom-api-effective-nodes-observer.html');\n\nrequire('../lib/dom-api-distributed-nodes-observer.html');\n\n\n\n  (function() {\n    /**\n      Implements a pared down version of ShadowDOM's scoping, which is easy to\n      polyfill across browsers.\n    */\n    var DomApi = Polymer.DomApi;\n    var TreeApi = Polymer.TreeApi;\n\n    Polymer.Base._addFeature({\n\n      _prepShady: function() {\n        // Use this system if and only if localDom is needed.\n        this._useContent = this._useContent || Boolean(this._template);\n      },\n\n      _setupShady: function() {\n        // object shaping...\n        this.shadyRoot = null;\n        if (!this.__domApi) {\n          this.__domApi = null;\n        }\n        if (!this.__dom) {\n          this.__dom = null;\n        }\n        if (!this._ownerShadyRoot) {\n          this._ownerShadyRoot = undefined;\n        }\n      },\n\n      // called as part of content initialization, prior to template stamping\n      _poolContent: function() {\n        if (this._useContent) {\n          // capture lightChildren to help reify dom scoping\n          TreeApi.Logical.saveChildNodes(this);\n        }\n      },\n\n      // called as part of content initialization, after template stamping\n      _setupRoot: function() {\n        if (this._useContent) {\n          this._createLocalRoot();\n          // light elements may not be upgraded if they are light children\n          // and there is no configuration flow (no dataHost) and they are\n          // removed from document by shadyDOM distribution\n          // so we ensure this here\n          if (!this.dataHost) {\n            upgradeLogicalChildren(TreeApi.Logical.getChildNodes(this));\n          }\n        }\n      },\n\n      _createLocalRoot: function() {\n        this.shadyRoot = this.root;\n        this.shadyRoot._distributionClean = false;\n        this.shadyRoot._hasDistributed = false;\n        this.shadyRoot._isShadyRoot = true;\n        this.shadyRoot._dirtyRoots = [];\n        // capture insertion point list\n        var i$ = this.shadyRoot._insertionPoints = !this._notes ||\n          this._notes._hasContent ?\n          this.shadyRoot.querySelectorAll('content') : [];\n        // save logical tree info\n        // a. for shadyRoot\n        // b. for insertion points (fallback)\n        // c. for parents of insertion points\n        TreeApi.Logical.saveChildNodes(this.shadyRoot);\n        for (var i=0, c; i < i$.length; i++) {\n          c = i$[i];\n          TreeApi.Logical.saveChildNodes(c);\n          TreeApi.Logical.saveChildNodes(c.parentNode);\n        }\n        this.shadyRoot.host = this;\n      },\n\n      /**\n       * Force this element to distribute its children to its local dom.\n       * A user should call `distributeContent` if distribution has been\n       * invalidated due to changes to selectors on child elements that\n       * effect distribution that were not made via `Polymer.dom`.\n       * For example, if an element contains an insertion point with\n       * `<content select=\".foo\">` and a `foo` class is added to a child,\n       * then `distributeContent` must be called to update\n       * local dom distribution.\n       * @method distributeContent\n       * @param {boolean} updateInsertionPoints Shady DOM does not detect\n       *   <content> insertion that is nested in a sub-tree being appended.\n       *   Set to true to distribute to newly added nested <content>'s.\n       */\n      distributeContent: function(updateInsertionPoints) {\n        if (this.shadyRoot) {\n          this.shadyRoot._invalidInsertionPoints =\n            this.shadyRoot._invalidInsertionPoints || updateInsertionPoints;\n          // Distribute the host that's the top of this element's distribution\n          // tree. Distributing that host will *always* distibute this element.\n          var host = getTopDistributingHost(this);\n          Polymer.dom(this)._lazyDistribute(host);\n        }\n      },\n\n      _distributeContent: function() {\n        if (this._useContent && !this.shadyRoot._distributionClean) {\n          if (this.shadyRoot._invalidInsertionPoints) {\n            Polymer.dom(this)._updateInsertionPoints(this);\n            this.shadyRoot._invalidInsertionPoints = false;\n          }\n          // logically distribute self\n          this._beginDistribute();\n          this._distributeDirtyRoots();\n          this._finishDistribute();\n        }\n      },\n\n      _beginDistribute: function() {\n        if (this._useContent && DomApi.hasInsertionPoint(this.shadyRoot)) {\n          // reset distributions\n          this._resetDistribution();\n          // compute which nodes should be distributed where\n          // TODO(jmesserly): this is simplified because we assume a single\n          // ShadowRoot per host and no `<shadow>`.\n          this._distributePool(this.shadyRoot, this._collectPool());\n        }\n      },\n\n      _distributeDirtyRoots: function() {\n        var c$ = this.shadyRoot._dirtyRoots;\n        for (var i=0, l= c$.length, c; (i<l) && (c=c$[i]); i++) {\n          c._distributeContent();\n        }\n        this.shadyRoot._dirtyRoots = [];\n      },\n\n      _finishDistribute: function() {\n        // compose self\n        if (this._useContent) {\n          // note: it's important to mark this clean before distribution\n          // so that attachment that provokes additional distribution (e.g.\n          // adding something to your parentNode) works\n          this.shadyRoot._distributionClean = true;\n          if (DomApi.hasInsertionPoint(this.shadyRoot)) {\n            this._composeTree();\n            // NOTE: send a signal to insertion points that we have distributed\n            // which informs effective children observers\n            notifyContentObservers(this.shadyRoot);\n          } else {\n            if (!this.shadyRoot._hasDistributed) {\n              TreeApi.Composed.clearChildNodes(this);\n              this.appendChild(this.shadyRoot);\n            } else {\n              // simplified non-tree walk composition\n              var children = this._composeNode(this);\n              this._updateChildNodes(this, children);\n            }\n          }\n          // NOTE: send a signal to any Polymer.dom node observers\n          // to report the initial set of childNodes\n          if (!this.shadyRoot._hasDistributed) {\n            notifyInitialDistribution(this);\n          }\n          this.shadyRoot._hasDistributed = true;\n        }\n      },\n\n      /**\n       * Polyfill for Element.prototype.matches, which is sometimes still\n       * prefixed.\n       *\n       * @method elementMatches\n       * @param {string} selector Selector to test.\n       * @param {Element=} node Element to test the selector against.\n       * @return {boolean} Whether the element matches the selector.\n       */\n      elementMatches: function(selector, node) {\n        // Alternatively we could just polyfill it somewhere.\n        // Note that the arguments are reversed from what you might expect.\n        node = node || this;\n        return DomApi.matchesSelector.call(node, selector);\n      },\n\n      // Many of the following methods are all conceptually static, but they are\n      // included here as \"protected\" methods to allow overriding.\n\n      _resetDistribution: function() {\n        // light children\n        var children = TreeApi.Logical.getChildNodes(this);\n        for (var i = 0; i < children.length; i++) {\n          var child = children[i];\n          if (child._destinationInsertionPoints) {\n            child._destinationInsertionPoints = undefined;\n          }\n          if (isInsertionPoint(child)) {\n            clearDistributedDestinationInsertionPoints(child);\n          }\n        }\n        // insertion points\n        var root = this.shadyRoot;\n        var p$ = root._insertionPoints;\n        for (var j = 0; j < p$.length; j++) {\n          p$[j]._distributedNodes = [];\n        }\n      },\n\n      // Gather the pool of nodes that should be distributed. We will combine\n      // these with the \"content root\" to arrive at the composed tree.\n      _collectPool: function() {\n        var pool = [];\n        var children = TreeApi.Logical.getChildNodes(this);\n        for (var i = 0; i < children.length; i++) {\n          var child = children[i];\n          if (isInsertionPoint(child)) {\n            pool.push.apply(pool, child._distributedNodes);\n          } else {\n            pool.push(child);\n          }\n        }\n        return pool;\n      },\n\n      // perform \"logical\" distribution; note, no actual dom is moved here,\n      // instead elements are distributed into a `content._distributedNodes`\n      // array where applicable.\n      _distributePool: function(node, pool) {\n        var p$ = node._insertionPoints;\n        for (var i=0, l=p$.length, p; (i<l) && (p=p$[i]); i++) {\n          this._distributeInsertionPoint(p, pool);\n          // provoke redistribution on insertion point parents\n          // must do this on all candidate hosts since distribution in this\n          // scope invalidates their distribution.\n          maybeRedistributeParent(p, this);\n        }\n      },\n\n      _distributeInsertionPoint: function(content, pool) {\n        // distribute nodes from the pool that this selector matches\n        var anyDistributed = false;\n        for (var i=0, l=pool.length, node; i < l; i++) {\n          node=pool[i];\n          // skip nodes that were already used\n          if (!node) {\n            continue;\n          }\n          // distribute this node if it matches\n          if (this._matchesContentSelect(node, content)) {\n            distributeNodeInto(node, content);\n            // remove this node from the pool\n            pool[i] = undefined;\n            // since at least one node matched, we won't need fallback content\n            anyDistributed = true;\n          }\n        }\n        // Fallback content if nothing was distributed here\n        if (!anyDistributed) {\n          var children = TreeApi.Logical.getChildNodes(content);\n          for (var j = 0; j < children.length; j++) {\n            distributeNodeInto(children[j], content);\n          }\n        }\n      },\n\n      // Reify dom such that it is at its correct rendering position\n      // based on logical distribution.\n      _composeTree: function() {\n        this._updateChildNodes(this, this._composeNode(this));\n        var p$ = this.shadyRoot._insertionPoints;\n        for (var i=0, l=p$.length, p, parent; (i<l) && (p=p$[i]); i++) {\n          parent = TreeApi.Logical.getParentNode(p);\n          if (!parent._useContent && (parent !== this) &&\n            (parent !== this.shadyRoot)) {\n            this._updateChildNodes(parent, this._composeNode(parent));\n          }\n        }\n      },\n\n      // Returns the list of nodes which should be rendered inside `node`.\n      _composeNode: function(node) {\n        var children = [];\n        var c$ = TreeApi.Logical.getChildNodes(node.shadyRoot || node);\n        for (var i = 0; i < c$.length; i++) {\n          var child = c$[i];\n          if (isInsertionPoint(child)) {\n            var distributedNodes = child._distributedNodes;\n            for (var j = 0; j < distributedNodes.length; j++) {\n              var distributedNode = distributedNodes[j];\n              if (isFinalDestination(child, distributedNode)) {\n                children.push(distributedNode);\n              }\n            }\n          } else {\n            children.push(child);\n          }\n        }\n        return children;\n      },\n\n      // Ensures that the rendered node list inside `container` is `children`.\n      _updateChildNodes: function(container, children) {\n        var composed = TreeApi.Composed.getChildNodes(container);\n        var splices =\n          Polymer.ArraySplice.calculateSplices(children, composed);\n        // process removals\n        for (var i=0, d=0, s; (i<splices.length) && (s=splices[i]); i++) {\n          for (var j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n            // check if the node is still where we expect it is before trying\n            // to remove it; this can happen if Polymer.dom moves a node and\n            // then schedules its previous host for distribution resulting in\n            // the node being removed here.\n            if (TreeApi.Composed.getParentNode(n) === container) {\n              TreeApi.Composed.removeChild(container, n);\n            }\n            composed.splice(s.index + d, 1);\n          }\n          d -= s.addedCount;\n        }\n        // process adds\n        for (var i=0, s, next; (i<splices.length) && (s=splices[i]); i++) { //eslint-disable-line no-redeclare\n          next = composed[s.index];\n          for (j=s.index, n; j < s.index + s.addedCount; j++) {\n            n = children[j];\n            TreeApi.Composed.insertBefore(container, n, next);\n            // TODO(sorvell): is this splice strictly needed?\n            composed.splice(j, 0, n);\n          }\n        }\n      },\n\n      _matchesContentSelect: function(node, contentElement) {\n        var select = contentElement.getAttribute('select');\n        // no selector matches all nodes (including text)\n        if (!select) {\n          return true;\n        }\n        select = select.trim();\n        // same thing if it had only whitespace\n        if (!select) {\n          return true;\n        }\n        // selectors can only match Elements\n        if (!(node instanceof Element)) {\n          return false;\n        }\n        // only valid selectors can match:\n        //   TypeSelector\n        //   *\n        //   ClassSelector\n        //   IDSelector\n        //   AttributeSelector\n        //   negation\n        var validSelectors = /^(:not\\()?[*.#[a-zA-Z_|]/;\n        if (!validSelectors.test(select)) {\n          return false;\n        }\n        return this.elementMatches(select, node);\n      },\n\n      // system override point\n      _elementAdd: function() {},\n\n      // system override point\n      _elementRemove: function() {}\n\n    });\n\n\n    var domHostDesc = {\n      get: function() {\n        var root = Polymer.dom(this).getOwnerRoot();\n        return root && root.host;\n      },\n      configurable: true\n    };\n    /**\n     * Return the element whose local dom within which this element\n     * is contained. This is a shorthand for\n     * `Polymer.dom(this).getOwnerRoot().host`.\n     */\n    Object.defineProperty(Polymer.Base, 'domHost', domHostDesc);\n    Polymer.BaseDescriptors.domHost = domHostDesc;\n\n    function distributeNodeInto(child, insertionPoint) {\n      insertionPoint._distributedNodes.push(child);\n      var points = child._destinationInsertionPoints;\n      if (!points) {\n        child._destinationInsertionPoints = [insertionPoint];\n      } else {\n        points.push(insertionPoint);\n      }\n    }\n\n    function clearDistributedDestinationInsertionPoints(content) {\n      var e$ = content._distributedNodes;\n      if (e$) {\n        for (var i=0; i < e$.length; i++) {\n          var d = e$[i]._destinationInsertionPoints;\n          if (d) {\n            // this is +1 because these insertion points are *not* in this scope\n            d.splice(d.indexOf(content)+1, d.length);\n          }\n        }\n      }\n    }\n\n    // dirty a shadyRoot if a change may trigger reprojection!\n    function maybeRedistributeParent(content, host) {\n      // only get logical parent.\n      var parent = TreeApi.Logical.getParentNode(content);\n      if (parent && parent.shadyRoot &&\n          DomApi.hasInsertionPoint(parent.shadyRoot) &&\n          parent.shadyRoot._distributionClean) {\n        parent.shadyRoot._distributionClean = false;\n        host.shadyRoot._dirtyRoots.push(parent);\n      }\n    }\n\n    function isFinalDestination(insertionPoint, node) {\n      var points = node._destinationInsertionPoints;\n      return points && points[points.length - 1] === insertionPoint;\n    }\n\n    function isInsertionPoint(node) {\n      // TODO(jmesserly): we could add back 'shadow' support here.\n      return node.localName == 'content';\n    }\n\n    // returns the host that's the top of this host's distribution tree\n    function getTopDistributingHost(host) {\n      while (host && hostNeedsRedistribution(host)) {\n        host = host.domHost;\n      }\n      return host;\n    }\n\n    // Return true if a host's children includes\n    // an insertion point that selects selectively\n    function hostNeedsRedistribution(host) {\n      var c$ = TreeApi.Logical.getChildNodes(host);\n      for (var i=0, c; i < c$.length; i++) {\n        c = c$[i];\n        if (c.localName && c.localName === 'content') {\n          return host.domHost;\n        }\n      }\n    }\n\n    function notifyContentObservers(root) {\n      for (var i=0, c; i < root._insertionPoints.length; i++) {\n        c = root._insertionPoints[i];\n        if (DomApi.hasApi(c)) {\n          Polymer.dom(c).notifyObserver();\n        }\n      }\n    }\n\n    function notifyInitialDistribution(host) {\n      if (DomApi.hasApi(host)) {\n        Polymer.dom(host).notifyObserver();\n      }\n    }\n\n    var needsUpgrade = window.CustomElements && !CustomElements.useNative;\n\n    function upgradeLogicalChildren(children) {\n      if (needsUpgrade && children) {\n        for (var i=0; i < children.length; i++) {\n          CustomElements.upgrade(children[i]);\n        }\n      }\n    }\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mini/shady.html\n// module id = 33\n// module chunks = 0","/*__wc__loader*/\n\n\nPolymer.ArraySplice = (function() {\n\n  function newSplice(index, removed, addedCount) {\n    return {\n      index: index,\n      removed: removed,\n      addedCount: addedCount\n    };\n  }\n\n  var EDIT_LEAVE = 0;\n  var EDIT_UPDATE = 1;\n  var EDIT_ADD = 2;\n  var EDIT_DELETE = 3;\n\n  function ArraySplice() {}\n\n  ArraySplice.prototype = {\n\n    // Note: This function is *based* on the computation of the Levenshtein\n    // \"edit\" distance. The one change is that \"updates\" are treated as two\n    // edits - not one. With Array splices, an update is really a delete\n    // followed by an add. By retaining this, we optimize for \"keeping\" the\n    // maximum array items in the original array. For example:\n    //\n    //   'xxxx123' -> '123yyyy'\n    //\n    // With 1-edit updates, the shortest path would be just to update all seven\n    // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This\n    // leaves the substring '123' intact.\n    calcEditDistances: function(current, currentStart, currentEnd,\n                                old, oldStart, oldEnd) {\n      // \"Deletion\" columns\n      var rowCount = oldEnd - oldStart + 1;\n      var columnCount = currentEnd - currentStart + 1;\n      var distances = new Array(rowCount);\n\n      // \"Addition\" rows. Initialize null column.\n      for (var i = 0; i < rowCount; i++) {\n        distances[i] = new Array(columnCount);\n        distances[i][0] = i;\n      }\n\n      // Initialize null row\n      for (var j = 0; j < columnCount; j++)\n        distances[0][j] = j;\n\n      for (i = 1; i < rowCount; i++) {\n        for (j = 1; j < columnCount; j++) {\n          if (this.equals(current[currentStart + j - 1], old[oldStart + i - 1]))\n            distances[i][j] = distances[i - 1][j - 1];\n          else {\n            var north = distances[i - 1][j] + 1;\n            var west = distances[i][j - 1] + 1;\n            distances[i][j] = north < west ? north : west;\n          }\n        }\n      }\n\n      return distances;\n    },\n\n    // This starts at the final weight, and walks \"backward\" by finding\n    // the minimum previous weight recursively until the origin of the weight\n    // matrix.\n    spliceOperationsFromEditDistances: function(distances) {\n      var i = distances.length - 1;\n      var j = distances[0].length - 1;\n      var current = distances[i][j];\n      var edits = [];\n      while (i > 0 || j > 0) {\n        if (i == 0) {\n          edits.push(EDIT_ADD);\n          j--;\n          continue;\n        }\n        if (j == 0) {\n          edits.push(EDIT_DELETE);\n          i--;\n          continue;\n        }\n        var northWest = distances[i - 1][j - 1];\n        var west = distances[i - 1][j];\n        var north = distances[i][j - 1];\n\n        var min;\n        if (west < north)\n          min = west < northWest ? west : northWest;\n        else\n          min = north < northWest ? north : northWest;\n\n        if (min == northWest) {\n          if (northWest == current) {\n            edits.push(EDIT_LEAVE);\n          } else {\n            edits.push(EDIT_UPDATE);\n            current = northWest;\n          }\n          i--;\n          j--;\n        } else if (min == west) {\n          edits.push(EDIT_DELETE);\n          i--;\n          current = west;\n        } else {\n          edits.push(EDIT_ADD);\n          j--;\n          current = north;\n        }\n      }\n\n      edits.reverse();\n      return edits;\n    },\n\n    /**\n     * Splice Projection functions:\n     *\n     * A splice map is a representation of how a previous array of items\n     * was transformed into a new array of items. Conceptually it is a list of\n     * tuples of\n     *\n     *   <index, removed, addedCount>\n     *\n     * which are kept in ascending index order of. The tuple represents that at\n     * the |index|, |removed| sequence of items were removed, and counting forward\n     * from |index|, |addedCount| items were added.\n     */\n\n    /**\n     * Lacking individual splice mutation information, the minimal set of\n     * splices can be synthesized given the previous state and final state of an\n     * array. The basic approach is to calculate the edit distance matrix and\n     * choose the shortest path through it.\n     *\n     * Complexity: O(l * p)\n     *   l: The length of the current array\n     *   p: The length of the old array\n     */\n    calcSplices: function(current, currentStart, currentEnd,\n                          old, oldStart, oldEnd) {\n      var prefixCount = 0;\n      var suffixCount = 0;\n\n      var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);\n      if (currentStart == 0 && oldStart == 0)\n        prefixCount = this.sharedPrefix(current, old, minLength);\n\n      if (currentEnd == current.length && oldEnd == old.length)\n        suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);\n\n      currentStart += prefixCount;\n      oldStart += prefixCount;\n      currentEnd -= suffixCount;\n      oldEnd -= suffixCount;\n\n      if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)\n        return [];\n\n      if (currentStart == currentEnd) {\n        var splice = newSplice(currentStart, [], 0);\n        while (oldStart < oldEnd)\n          splice.removed.push(old[oldStart++]);\n\n        return [ splice ];\n      } else if (oldStart == oldEnd)\n        return [ newSplice(currentStart, [], currentEnd - currentStart) ];\n\n      var ops = this.spliceOperationsFromEditDistances(\n          this.calcEditDistances(current, currentStart, currentEnd,\n                                 old, oldStart, oldEnd));\n\n      splice = undefined;\n      var splices = [];\n      var index = currentStart;\n      var oldIndex = oldStart;\n      for (var i = 0; i < ops.length; i++) {\n        switch(ops[i]) {\n          case EDIT_LEAVE:\n            if (splice) {\n              splices.push(splice);\n              splice = undefined;\n            }\n\n            index++;\n            oldIndex++;\n            break;\n          case EDIT_UPDATE:\n            if (!splice)\n              splice = newSplice(index, [], 0);\n\n            splice.addedCount++;\n            index++;\n\n            splice.removed.push(old[oldIndex]);\n            oldIndex++;\n            break;\n          case EDIT_ADD:\n            if (!splice)\n              splice = newSplice(index, [], 0);\n\n            splice.addedCount++;\n            index++;\n            break;\n          case EDIT_DELETE:\n            if (!splice)\n              splice = newSplice(index, [], 0);\n\n            splice.removed.push(old[oldIndex]);\n            oldIndex++;\n            break;\n        }\n      }\n\n      if (splice) {\n        splices.push(splice);\n      }\n      return splices;\n    },\n\n    sharedPrefix: function(current, old, searchLength) {\n      for (var i = 0; i < searchLength; i++)\n        if (!this.equals(current[i], old[i]))\n          return i;\n      return searchLength;\n    },\n\n    sharedSuffix: function(current, old, searchLength) {\n      var index1 = current.length;\n      var index2 = old.length;\n      var count = 0;\n      while (count < searchLength && this.equals(current[--index1], old[--index2]))\n        count++;\n\n      return count;\n    },\n\n    calculateSplices: function(current, previous) {\n      return this.calcSplices(current, 0, current.length, previous, 0,\n                              previous.length);\n    },\n\n    equals: function(currentValue, previousValue) {\n      return currentValue === previousValue;\n    }\n  };\n\n  return new ArraySplice();\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/array-splice.html\n// module id = 34\n// module chunks = 0","/*__wc__loader*/\nrequire('./settings.html');\n\nrequire('./dom-innerHTML.html');\n\n\n(function() {\n\n  'use strict';\n\n  // native add/remove\n  var nativeInsertBefore = Element.prototype.insertBefore;\n  var nativeAppendChild = Element.prototype.appendChild;\n  var nativeRemoveChild = Element.prototype.removeChild;\n\n  /**\n   * TreeApi is a dom manipulation library used by Shady/Polymer.dom to\n   * manipulate composed and logical trees.\n   */\n  Polymer.TreeApi = {\n\n    // sad but faster than slice...\n    arrayCopyChildNodes: function(parent) {\n      var copy=[], i=0;\n      for (var n=parent.firstChild; n; n=n.nextSibling) {\n        copy[i++] = n;\n      }\n      return copy;\n    },\n\n    arrayCopyChildren: function(parent) {\n      var copy=[], i=0;\n      for (var n=parent.firstElementChild; n; n=n.nextElementSibling) {\n        copy[i++] = n;\n      }\n      return copy;\n    },\n\n    arrayCopy: function(a$) {\n      var l = a$.length;\n      var copy = new Array(l);\n      for (var i=0; i < l; i++) {\n        copy[i] = a$[i];\n      }\n      return copy;\n    }\n\n  };\n\n  Polymer.TreeApi.Logical = {\n\n    hasParentNode: function(node) {\n      return Boolean(node.__dom && node.__dom.parentNode);\n    },\n\n    hasChildNodes: function(node) {\n      return Boolean(node.__dom && node.__dom.childNodes !== undefined);\n    },\n\n    getChildNodes: function(node) {\n      // note: we're distinguishing here between undefined and false-y:\n      // hasChildNodes uses undefined check to see if this element has logical\n      // children; the false-y check indicates whether or not we should rebuild\n      // the cached childNodes array.\n      return this.hasChildNodes(node) ? this._getChildNodes(node) :\n        node.childNodes;\n    },\n\n    _getChildNodes: function(node) {\n      if (!node.__dom.childNodes) {\n        node.__dom.childNodes = [];\n        for (var n=node.__dom.firstChild; n; n=n.__dom.nextSibling) {\n          node.__dom.childNodes.push(n);\n        }\n      }\n      return node.__dom.childNodes;\n    },\n\n    // NOTE: __dom can be created under 2 conditions: (1) an element has a\n    // logical tree, or (2) an element is in a logical tree. In case (1), the\n    // element will store firstChild/lastChild, and in case (2), the element\n    // will store parentNode, nextSibling, previousSibling. This means that\n    // the mere existence of __dom is not enough to know if the requested\n    // logical data is available and instead we do an explicit undefined check.\n    getParentNode: function(node) {\n      return node.__dom && node.__dom.parentNode !== undefined ?\n        node.__dom.parentNode : node.parentNode;\n    },\n\n    getFirstChild: function(node) {\n      return node.__dom && node.__dom.firstChild !== undefined ?\n        node.__dom.firstChild : node.firstChild;\n    },\n\n    getLastChild: function(node) {\n      return node.__dom && node.__dom.lastChild  !== undefined ?\n        node.__dom.lastChild : node.lastChild;\n    },\n\n    getNextSibling: function(node) {\n      return node.__dom && node.__dom.nextSibling  !== undefined ?\n        node.__dom.nextSibling : node.nextSibling;\n    },\n\n    getPreviousSibling: function(node) {\n      return node.__dom && node.__dom.previousSibling  !== undefined ?\n        node.__dom.previousSibling : node.previousSibling;\n    },\n\n    getFirstElementChild: function(node) {\n      return node.__dom && node.__dom.firstChild !== undefined ?\n        this._getFirstElementChild(node) : node.firstElementChild;\n    },\n\n    _getFirstElementChild: function(node) {\n      var n = node.__dom.firstChild;\n      while (n && n.nodeType !== Node.ELEMENT_NODE) {\n        n = n.__dom.nextSibling;\n      }\n      return n;\n    },\n\n    getLastElementChild: function(node) {\n      return node.__dom && node.__dom.lastChild !== undefined ?\n        this._getLastElementChild(node) : node.lastElementChild;\n    },\n\n    _getLastElementChild: function(node) {\n      var n = node.__dom.lastChild;\n      while (n && n.nodeType !== Node.ELEMENT_NODE) {\n        n = n.__dom.previousSibling;\n      }\n      return n;\n    },\n\n    getNextElementSibling: function(node) {\n      return node.__dom && node.__dom.nextSibling !== undefined ?\n        this._getNextElementSibling(node) : node.nextElementSibling;\n    },\n\n    _getNextElementSibling: function(node) {\n      var n = node.__dom.nextSibling;\n      while (n && n.nodeType !== Node.ELEMENT_NODE) {\n        n = n.__dom.nextSibling;\n      }\n      return n;\n    },\n\n    getPreviousElementSibling: function(node) {\n      return node.__dom && node.__dom.previousSibling !== undefined ?\n        this._getPreviousElementSibling(node) : node.previousElementSibling;\n    },\n\n    _getPreviousElementSibling: function(node) {\n      var n = node.__dom.previousSibling;\n      while (n && n.nodeType !== Node.ELEMENT_NODE) {\n        n = n.__dom.previousSibling;\n      }\n      return n;\n    },\n\n    // Capture the list of light children. It's important to do this before we\n    // start transforming the DOM into \"rendered\" state.\n    // Children may be added to this list dynamically. It will be treated as the\n    // source of truth for the light children of the element. This element's\n    // actual children will be treated as the rendered state once this function\n    // has been called.\n    saveChildNodes: function(node) {\n      if (!this.hasChildNodes(node)) {\n        node.__dom = node.__dom || {};\n        node.__dom.firstChild = node.firstChild;\n        node.__dom.lastChild = node.lastChild;\n        node.__dom.childNodes = [];\n        for (var n=node.firstChild; n; n=n.nextSibling) {\n          n.__dom = n.__dom || {};\n          n.__dom.parentNode = node;\n          node.__dom.childNodes.push(n);\n          n.__dom.nextSibling = n.nextSibling;\n          n.__dom.previousSibling = n.previousSibling;\n        }\n      }\n    },\n\n    recordInsertBefore: function(node, container, ref_node) {\n      container.__dom.childNodes = null;\n      // handle document fragments\n      if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n        // TODO(sorvell): remember this for patching:\n        // the act of setting this info can affect patched nodes\n        // getters; therefore capture childNodes before patching.\n        for (var n=node.firstChild; n; n=n.nextSibling) {\n          this._linkNode(n, container, ref_node);\n        }\n      } else {\n        this._linkNode(node, container, ref_node);\n      }\n    },\n\n    _linkNode: function(node, container, ref_node) {\n      node.__dom = node.__dom || {};\n      container.__dom = container.__dom || {};\n      if (ref_node) {\n        ref_node.__dom = ref_node.__dom || {};\n      }\n      // update ref_node.previousSibling <-> node\n      node.__dom.previousSibling = ref_node ? ref_node.__dom.previousSibling :\n        container.__dom.lastChild;\n      if (node.__dom.previousSibling) {\n        node.__dom.previousSibling.__dom.nextSibling = node;\n      }\n      // update node <-> ref_node\n      node.__dom.nextSibling = ref_node || null;\n      if (node.__dom.nextSibling) {\n        node.__dom.nextSibling.__dom.previousSibling = node;\n      }\n      // update node <-> container\n      node.__dom.parentNode = container;\n      if (ref_node) {\n        if (ref_node === container.__dom.firstChild) {\n          container.__dom.firstChild = node;\n        }\n      } else {\n        container.__dom.lastChild = node;\n        if (!container.__dom.firstChild) {\n          container.__dom.firstChild = node;\n        }\n      }\n      // remove caching of childNodes\n      container.__dom.childNodes = null;\n    },\n\n    recordRemoveChild: function(node, container) {\n      node.__dom = node.__dom || {};\n      container.__dom = container.__dom || {};\n      if (node === container.__dom.firstChild) {\n        container.__dom.firstChild = node.__dom.nextSibling;\n      }\n      if (node === container.__dom.lastChild) {\n        container.__dom.lastChild = node.__dom.previousSibling;\n      }\n      var p = node.__dom.previousSibling;\n      var n = node.__dom.nextSibling;\n      if (p) {\n        p.__dom.nextSibling = n;\n      }\n      if (n) {\n        n.__dom.previousSibling = p;\n      }\n      // When an element is removed, logical data is no longer tracked.\n      // Explicitly set `undefined` here to indicate this. This is disginguished\n      // from `null` which is set if info is null.\n      node.__dom.parentNode = node.__dom.previousSibling =\n        node.__dom.nextSibling = undefined;\n      // remove caching of childNodes\n      container.__dom.childNodes = null;\n    }\n\n  }\n\n  // TODO(sorvell): composed tree manipulation is made available\n  // (1) to maninpulate the composed tree, and (2) to track changes\n  // to the tree for optional patching pluggability.\n  Polymer.TreeApi.Composed = {\n\n    getChildNodes: function(node) {\n      return Polymer.TreeApi.arrayCopyChildNodes(node);\n    },\n\n    getParentNode: function(node) {\n      return node.parentNode;\n    },\n\n    // composed tracking needs to reset composed children here in case\n    // they may have already been set (this shouldn't happen but can\n    // if dependency ordering is incorrect and as a result upgrade order\n    // is unexpected)\n    clearChildNodes: function(node) {\n      node.textContent = '';\n    },\n\n    insertBefore: function(parentNode, newChild, refChild) {\n      return nativeInsertBefore.call(parentNode, newChild, refChild || null);\n    },\n\n    appendChild: function(parentNode, newChild) {\n      return nativeAppendChild.call(parentNode, newChild);\n    },\n\n    removeChild: function(parentNode, node) {\n      return nativeRemoveChild.call(parentNode, node);\n    }\n\n  };\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-tree-api.html\n// module id = 35\n// module chunks = 0","/*__wc__loader*/\nrequire('./settings.html');\n\nrequire('./dom-innerHTML.html');\n\n\n(function() {\n  'use strict';\n\n  var Settings = Polymer.Settings;\n  var DomApi = Polymer.DomApi;\n  var dom = DomApi.factory;\n  var TreeApi = Polymer.TreeApi;\n  var getInnerHTML = Polymer.domInnerHTML.getInnerHTML;\n  var CONTENT = DomApi.CONTENT;\n\n  // *************** Configure DomApi for Shady DOM!! ***************\n  if (Settings.useShadow) {\n    return;\n  }\n\n  var nativeCloneNode = Element.prototype.cloneNode;\n  var nativeImportNode = Document.prototype.importNode;\n\n  Polymer.Base.mixin(DomApi.prototype, {\n\n    _lazyDistribute: function(host) {\n      // note: only try to distribute if the root is not clean; this ensures\n      // we don't distribute before initial distribution\n      if (host.shadyRoot && host.shadyRoot._distributionClean) {\n        host.shadyRoot._distributionClean = false;\n        Polymer.dom.addDebouncer(host.debounce('_distribute',\n          host._distributeContent));\n      }\n    },\n\n    appendChild: function(node) {\n      return this.insertBefore(node);\n    },\n\n    // cases in which we may not be able to just do standard native call\n    // 1. container has a shadyRoot (needsDistribution if and only if the\n    // shadyRoot has an insertion point)\n    // 2. container is a shadyRoot (don't distribute, instead set\n    // container to container.host.\n    // 3. node is <content> (host of container needs distribution)\n    insertBefore: function(node, ref_node) {\n      if (ref_node && TreeApi.Logical.getParentNode(ref_node) !== this.node) {\n        throw Error('The ref_node to be inserted before is not a child ' +\n          'of this node');\n      }\n      // remove node from its current position if and only if it's in a tree.\n      if (node.nodeType !== Node.DOCUMENT_FRAGMENT_NODE) {\n        var parent = TreeApi.Logical.getParentNode(node);\n        // notify existing parent that this node is being removed.\n        if (parent) {\n          if (DomApi.hasApi(parent)) {\n            dom(parent).notifyObserver();\n          }\n          this._removeNode(node);\n        } else {\n          this._removeOwnerShadyRoot(node);\n        }\n      }\n      if (!this._addNode(node, ref_node)) {\n        if (ref_node) {\n          // if ref_node is <content> replace with first distributed node\n          ref_node = ref_node.localName === CONTENT ?\n            this._firstComposedNode(ref_node) : ref_node;\n        }\n        // if adding to a shadyRoot, add to host instead\n        var container = this.node._isShadyRoot ? this.node.host : this.node;\n        if (ref_node) {\n          TreeApi.Composed.insertBefore(container, node, ref_node);\n        } else {\n          TreeApi.Composed.appendChild(container, node);\n        }\n      }\n      this.notifyObserver();\n      return node;\n    },\n\n    // Try to add node. Record logical info, track insertion points, perform\n    // distribution if and only if needed. Return true if the add is handled.\n    _addNode: function(node, ref_node) {\n      var root = this.getOwnerRoot();\n      if (root) {\n        // note: we always need to see if an insertion point is added\n        // since this saves logical tree info; however, invalidation state\n        // needs\n        var ipAdded = this._maybeAddInsertionPoint(node, this.node);\n        // invalidate insertion points if and only if not already invalid!\n        if (!root._invalidInsertionPoints) {\n          root._invalidInsertionPoints = ipAdded;\n        }\n        this._addNodeToHost(root.host, node);\n      }\n      if (TreeApi.Logical.hasChildNodes(this.node)) {\n        TreeApi.Logical.recordInsertBefore(node, this.node, ref_node);\n      }\n      // if not distributing and not adding to host, do a fast path addition\n      var handled = this._maybeDistribute(node) ||\n        this.node.shadyRoot;\n      // if shady is handling this node,\n      // the actual dom may not be removed if the node or fragment contents\n      // remain undistributed so we ensure removal here.\n      // NOTE: we only remove from existing location if and only if shady dom is\n      // involved.\n      // This is because a node fragment is passed to the native add method\n      // which expects to see fragment children. Regular elements must also\n      // use this check because not doing so causes separation of\n      // attached/detached and breaks, for example,\n      // dom-if's attached/detached checks.\n      if (handled) {\n        if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {\n          while (node.firstChild) {\n            TreeApi.Composed.removeChild(node, node.firstChild);\n          }\n        } else {\n          var parent = TreeApi.Composed.getParentNode(node);\n          if (parent) {\n            TreeApi.Composed.removeChild(parent, node);\n          }\n        }\n      }\n      return handled;\n    },\n\n    /**\n      Removes the given `node` from the element's `lightChildren`.\n      This method also performs dom composition.\n    */\n    removeChild: function(node) {\n      if (TreeApi.Logical.getParentNode(node) !== this.node) {\n        throw Error('The node to be removed is not a child of this node: ' +\n          node);\n      }\n      if (!this._removeNode(node)) {\n        // if removing from a shadyRoot, remove form host instead\n        var container = this.node._isShadyRoot ? this.node.host : this.node;\n        // not guaranteed to physically be in container; e.g.\n        // undistributed nodes.\n        var parent = TreeApi.Composed.getParentNode(node);\n        if (container === parent) {\n          TreeApi.Composed.removeChild(container, node);\n        }\n      }\n      this.notifyObserver();\n      return node;\n    },\n\n    // Try to remove node: update logical info and perform distribution if and\n    // only if needed. Return true if the removal has been handled.\n    // note that it's possible for both the node's host and its parent\n    // to require distribution... both cases are handled here.\n    _removeNode: function(node) {\n      // important that we want to do this only if the node has a logical parent\n      var logicalParent = TreeApi.Logical.hasParentNode(node) &&\n        TreeApi.Logical.getParentNode(node);\n      var distributed;\n      var root = this._ownerShadyRootForNode(node);\n      if (logicalParent) {\n        // distribute node's parent if and only if needed\n        distributed = dom(node)._maybeDistributeParent();\n        TreeApi.Logical.recordRemoveChild(node, logicalParent);\n        // remove node from root and distribute it if and only if needed\n        if (root && this._removeDistributedChildren(root, node)) {\n          root._invalidInsertionPoints = true;\n          this._lazyDistribute(root.host);\n        }\n      }\n      this._removeOwnerShadyRoot(node);\n      if (root) {\n        this._removeNodeFromHost(root.host, node);\n      }\n      return distributed;\n    },\n\n    replaceChild: function(node, ref_node) {\n      this.insertBefore(node, ref_node);\n      this.removeChild(ref_node);\n      return node;\n    },\n\n    _hasCachedOwnerRoot: function(node) {\n      return Boolean(node._ownerShadyRoot !== undefined);\n    },\n\n    getOwnerRoot: function() {\n      return this._ownerShadyRootForNode(this.node);\n    },\n\n    _ownerShadyRootForNode: function(node) {\n      if (!node) {\n        return;\n      }\n      var root = node._ownerShadyRoot;\n      if (root === undefined) {\n        if (node._isShadyRoot) {\n          root = node;\n        } else {\n          var parent = TreeApi.Logical.getParentNode(node);\n          if (parent) {\n            root = parent._isShadyRoot ? parent :\n              this._ownerShadyRootForNode(parent);\n          } else {\n           root = null;\n          }\n        }\n        // memo-ize result for performance but only memo-ize a false-y\n        // result if node is in the document. This avoids a problem where a root\n        // can be cached while an element is inside a fragment.\n        // If this happens and we cache the result, the value can become stale\n        // because for perf we avoid processing the subtree of added fragments.\n        if (root || document.documentElement.contains(node)) {\n          node._ownerShadyRoot = root;\n        }\n      }\n      return root;\n    },\n\n    _maybeDistribute: function(node) {\n      // TODO(sorvell): technically we should check non-fragment nodes for\n      // <content> children but since this case is assumed to be exceedingly\n      // rare, we avoid the cost and will address with some specific api\n      // when the need arises.  For now, the user must call\n      // distributeContent(true), which updates insertion points manually\n      // and forces distribution.\n      var fragContent = (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) &&\n        !node.__noContent && dom(node).querySelector(CONTENT);\n      var wrappedContent = fragContent &&\n        (TreeApi.Logical.getParentNode(fragContent).nodeType !==\n        Node.DOCUMENT_FRAGMENT_NODE);\n      var hasContent = fragContent || (node.localName === CONTENT);\n      // There are 2 possible cases where a distribution may need to occur:\n      // 1. <content> being inserted (the host of the shady root where\n      //    content is inserted needs distribution)\n      // 2. children being inserted into parent with a shady root (parent\n      //    needs distribution)\n      if (hasContent) {\n        var root = this.getOwnerRoot();\n        if (root) {\n          // note, insertion point list update is handled after node\n          // mutations are complete\n          this._lazyDistribute(root.host);\n        }\n      }\n      var needsDist = this._nodeNeedsDistribution(this.node);\n      if (needsDist) {\n        this._lazyDistribute(this.node);\n      }\n      // Return true when distribution will fully handle the composition\n      // Note that if a content was being inserted that was wrapped by a node,\n      // and the parent does not need distribution, return false to allow\n      // the nodes to be added directly, after which children may be\n      // distributed and composed into the wrapping node(s)\n      return needsDist || (hasContent && !wrappedContent);\n    },\n\n    /* note: parent argument is required since node may have an out\n    of date parent at this point; returns true if a <content> is being added */\n    _maybeAddInsertionPoint: function(node, parent) {\n      var added;\n      if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE &&\n        !node.__noContent) {\n        var c$ = dom(node).querySelectorAll(CONTENT);\n        for (var i=0, n, np, na; (i<c$.length) && (n=c$[i]); i++) {\n          np = TreeApi.Logical.getParentNode(n);\n          // don't allow node's parent to be fragment itself\n          if (np === node) {\n            np = parent;\n          }\n          na = this._maybeAddInsertionPoint(n, np);\n          added = added || na;\n        }\n      } else if (node.localName === CONTENT) {\n        TreeApi.Logical.saveChildNodes(parent);\n        TreeApi.Logical.saveChildNodes(node);\n        added = true;\n      }\n      return added;\n    },\n\n    _updateInsertionPoints: function(host) {\n      var i$ = host.shadyRoot._insertionPoints =\n        dom(host.shadyRoot).querySelectorAll(CONTENT);\n      // ensure <content>'s and their parents have logical dom info.\n      for (var i=0, c; i < i$.length; i++) {\n        c = i$[i];\n        TreeApi.Logical.saveChildNodes(c);\n        TreeApi.Logical.saveChildNodes(TreeApi.Logical.getParentNode(c));\n      }\n    },\n\n    _nodeNeedsDistribution: function(node) {\n      return node && node.shadyRoot &&\n        DomApi.hasInsertionPoint(node.shadyRoot);\n    },\n\n    // a node being added is always in this same host as this.node.\n    _addNodeToHost: function(host, node) {\n      if (host._elementAdd) {\n        host._elementAdd(node);\n      }\n    },\n\n    _removeNodeFromHost: function(host, node) {\n      if (host._elementRemove) {\n        host._elementRemove(node);\n      }\n    },\n\n    _removeDistributedChildren: function(root, container) {\n      var hostNeedsDist;\n      var ip$ = root._insertionPoints;\n      for (var i=0; i<ip$.length; i++) {\n        var content = ip$[i];\n        if (this._contains(container, content)) {\n          var dc$ = dom(content).getDistributedNodes();\n          for (var j=0; j<dc$.length; j++) {\n            hostNeedsDist = true;\n            var node = dc$[j];\n            var parent = TreeApi.Composed.getParentNode(node);\n            if (parent) {\n              TreeApi.Composed.removeChild(parent, node);\n            }\n          }\n        }\n      }\n      return hostNeedsDist;\n    },\n\n    _contains: function(container, node) {\n      while (node) {\n        if (node == container) {\n          return true;\n        }\n        node = TreeApi.Logical.getParentNode(node);\n      }\n    },\n\n    _removeOwnerShadyRoot: function(node) {\n      // optimization: only reset the tree if node is actually in a root\n      if (this._hasCachedOwnerRoot(node)) {\n        var c$ = TreeApi.Logical.getChildNodes(node);\n        for (var i=0, l=c$.length, n; (i<l) && (n=c$[i]); i++) {\n          this._removeOwnerShadyRoot(n);\n        }\n      }\n      node._ownerShadyRoot = undefined;\n    },\n\n    // TODO(sorvell): This will fail if distribution that affects this\n    // question is pending; this is expected to be exceedingly rare, but if\n    // the issue comes up, we can force a flush in this case.\n    _firstComposedNode: function(content) {\n      var n$ = dom(content).getDistributedNodes();\n      for (var i=0, l=n$.length, n, p$; (i<l) && (n=n$[i]); i++) {\n        p$ = dom(n).getDestinationInsertionPoints();\n        // means that we're composed to this spot.\n        if (p$[p$.length-1] === content) {\n          return n;\n        }\n      }\n    },\n\n    // TODO(sorvell): consider doing native QSA and filtering results.\n    querySelector: function(selector) {\n      // match selector and halt on first result.\n      var result = this._query(function(n) {\n        return DomApi.matchesSelector.call(n, selector);\n      }, this.node, function(n) {\n        return Boolean(n);\n      })[0];\n      return result || null;\n    },\n\n    querySelectorAll: function(selector) {\n      return this._query(function(n) {\n        return DomApi.matchesSelector.call(n, selector);\n      }, this.node);\n    },\n\n    getDestinationInsertionPoints: function() {\n      return this.node._destinationInsertionPoints || [];\n    },\n\n    getDistributedNodes: function() {\n      return this.node._distributedNodes || [];\n    },\n\n    _clear: function() {\n      while (this.childNodes.length) {\n        this.removeChild(this.childNodes[0]);\n      }\n    },\n\n    setAttribute: function(name, value) {\n      this.node.setAttribute(name, value);\n      this._maybeDistributeParent();\n    },\n\n    removeAttribute: function(name) {\n      this.node.removeAttribute(name);\n      this._maybeDistributeParent();\n    },\n\n    _maybeDistributeParent: function() {\n      if (this._nodeNeedsDistribution(this.parentNode)) {\n        this._lazyDistribute(this.parentNode);\n        return true;\n      }\n    },\n\n    cloneNode: function(deep) {\n      var n = nativeCloneNode.call(this.node, false);\n      if (deep) {\n        var c$ = this.childNodes;\n        var d = dom(n);\n        for (var i=0, nc; i < c$.length; i++) {\n          nc = dom(c$[i]).cloneNode(true);\n          d.appendChild(nc);\n        }\n      }\n      return n;\n    },\n\n    importNode: function(externalNode, deep) {\n      // for convenience use this node's ownerDoc if the node isn't a document\n      var doc = this.node instanceof Document ? this.node :\n        this.node.ownerDocument;\n      var n = nativeImportNode.call(doc, externalNode, false);\n      if (deep) {\n        var c$ = TreeApi.Logical.getChildNodes(externalNode);\n        var d = dom(n);\n        for (var i=0, nc; i < c$.length; i++) {\n          nc = dom(doc).importNode(c$[i], true);\n          d.appendChild(nc);\n        }\n      }\n      return n;\n    },\n\n    _getComposedInnerHTML: function() {\n      return getInnerHTML(this.node, true);\n    }\n\n  });\n\n  Object.defineProperties(DomApi.prototype, {\n\n    activeElement: {\n      get: function() {\n        var active = document.activeElement;\n        if (!active) {\n          return null;\n        }\n        var isShadyRoot = !!this.node._isShadyRoot;\n        if (this.node !== document) {\n          // If this node isn't a document or shady root, then it doesn't have\n          // an active element.\n          if (!isShadyRoot) {\n            return null;\n          }\n          // If this shady root's host is the active element or the active\n          // element is not a descendant of the host (in the composed tree),\n          // then it doesn't have an active element.\n          if (this.node.host === active ||\n              !this.node.host.contains(active)) {\n            return null;\n          }\n        }\n        // This node is either the document or a shady root of which the active\n        // element is a (composed) descendant of its host; iterate upwards to\n        // find the active element's most shallow host within it.\n        var activeRoot = dom(active).getOwnerRoot();\n        while (activeRoot && activeRoot !== this.node) {\n          active = activeRoot.host;\n          activeRoot = dom(active).getOwnerRoot();\n        }\n        if (this.node === document) {\n          // This node is the document, so activeRoot should be null.\n          return activeRoot ? null : active;\n        } else {\n          // This node is a non-document shady root, and it should be\n          // activeRoot.\n          return activeRoot === this.node ? active : null;\n        }\n      },\n      configurable: true\n    },\n\n    childNodes: {\n      get: function() {\n        var c$ = TreeApi.Logical.getChildNodes(this.node);\n        return Array.isArray(c$) ? c$ : TreeApi.arrayCopyChildNodes(this.node);\n      },\n      configurable: true\n    },\n\n    children: {\n      get: function() {\n        if (TreeApi.Logical.hasChildNodes(this.node)) {\n          return Array.prototype.filter.call(this.childNodes, function(n) {\n            return (n.nodeType === Node.ELEMENT_NODE);\n          });\n        } else {\n          return TreeApi.arrayCopyChildren(this.node);\n        }\n      },\n      configurable: true\n    },\n\n    parentNode: {\n      get: function() {\n        return TreeApi.Logical.getParentNode(this.node);\n      },\n      configurable: true\n    },\n\n    firstChild: {\n      get: function() {\n        return TreeApi.Logical.getFirstChild(this.node);\n      },\n      configurable: true\n    },\n\n    lastChild: {\n      get: function() {\n        return TreeApi.Logical.getLastChild(this.node);\n      },\n      configurable: true\n    },\n\n    nextSibling: {\n      get: function() {\n        return TreeApi.Logical.getNextSibling(this.node);\n      },\n      configurable: true\n    },\n\n    previousSibling: {\n      get: function() {\n        return TreeApi.Logical.getPreviousSibling(this.node);\n      },\n      configurable: true\n    },\n\n    firstElementChild: {\n      get: function() {\n        return TreeApi.Logical.getFirstElementChild(this.node);\n      },\n      configurable: true\n    },\n\n    lastElementChild: {\n      get: function() {\n        return TreeApi.Logical.getLastElementChild(this.node);\n      },\n      configurable: true\n    },\n\n    nextElementSibling: {\n      get: function() {\n        return TreeApi.Logical.getNextElementSibling(this.node);\n      },\n      configurable: true\n    },\n\n    previousElementSibling: {\n      get: function() {\n        return TreeApi.Logical.getPreviousElementSibling(this.node);\n      },\n      configurable: true\n    },\n\n    // textContent / innerHTML\n    textContent: {\n      get: function() {\n        var nt = this.node.nodeType;\n        if (nt === Node.TEXT_NODE || nt === Node.COMMENT_NODE) {\n          return this.node.textContent;\n        } else {\n          var tc = [];\n          for (var i = 0, cn = this.childNodes, c; (c = cn[i]); i++) {\n            if (c.nodeType !== Node.COMMENT_NODE) {\n              tc.push(c.textContent);\n            }\n          }\n          return tc.join('');\n        }\n      },\n      set: function(text) {\n        var nt = this.node.nodeType;\n        if (nt === Node.TEXT_NODE || nt === Node.COMMENT_NODE) {\n          this.node.textContent = text;\n        } else {\n          this._clear();\n          if (text) {\n            this.appendChild(document.createTextNode(text));\n          }\n        }\n      },\n      configurable: true\n    },\n\n    innerHTML: {\n      get: function() {\n        var nt = this.node.nodeType;\n        if (nt === Node.TEXT_NODE || nt === Node.COMMENT_NODE) {\n          return null;\n        } else {\n          return getInnerHTML(this.node);\n        }\n      },\n      set: function(text) {\n        var nt = this.node.nodeType;\n        if (nt !== Node.TEXT_NODE || nt !== Node.COMMENT_NODE) {\n          this._clear();\n          var d = document.createElement('div');\n          d.innerHTML = text;\n          // here, appendChild may move nodes async so we cannot rely\n          // on node position when copying\n          var c$ = TreeApi.arrayCopyChildNodes(d);\n          for (var i=0; i < c$.length; i++) {\n            this.appendChild(c$[i]);\n          }\n        }\n      },\n      configurable: true\n    }\n\n  });\n\n  DomApi.hasInsertionPoint = function(root) {\n    return Boolean(root && root._insertionPoints.length);\n  };\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-api-shady.html\n// module id = 36\n// module chunks = 0","/*__wc__loader*/\n\n(function() {\n  'use strict';\n\n  var Settings = Polymer.Settings;\n  var TreeApi = Polymer.TreeApi;\n  var DomApi = Polymer.DomApi;\n\n  // *************** Configure DomApi for Shadow DOM!! ***************\n  if (!Settings.useShadow) {\n    return;\n  }\n\n  Polymer.Base.mixin(DomApi.prototype, {\n\n    querySelectorAll: function(selector) {\n      return TreeApi.arrayCopy(this.node.querySelectorAll(selector));\n    },\n\n    getOwnerRoot: function() {\n      var n = this.node;\n      while (n) {\n        if (n.nodeType === Node.DOCUMENT_FRAGMENT_NODE && n.host) {\n          return n;\n        }\n        n = n.parentNode;\n      }\n    },\n\n    importNode: function(externalNode, deep) {\n      var doc = this.node instanceof Document ? this.node :\n        this.node.ownerDocument;\n      return doc.importNode(externalNode, deep);\n    },\n\n    getDestinationInsertionPoints: function() {\n      var n$ = this.node.getDestinationInsertionPoints &&\n        this.node.getDestinationInsertionPoints();\n      return n$ ? TreeApi.arrayCopy(n$) : [];\n    },\n\n    getDistributedNodes: function() {\n      var n$ = this.node.getDistributedNodes &&\n        this.node.getDistributedNodes();\n      return n$ ? TreeApi.arrayCopy(n$) : [];\n    }\n\n  });\n\n  Object.defineProperties(DomApi.prototype, {\n\n    activeElement: {\n      get: function() {\n        var node = DomApi.wrap(this.node);\n        var activeElement = node.activeElement;\n        // Prevents `activeElement` from returning elements outside of the\n        // ShadowRoot, even if they would become descendants of the ShadowRoot\n        // in the composed tree. See w3c/webcomponents#358.\n        return node.contains(activeElement) ? activeElement : null;\n      },\n      configurable: true\n    },\n\n    childNodes: {\n      get: function() {\n        return TreeApi.arrayCopyChildNodes(this.node);\n      },\n      configurable: true\n    },\n\n    children: {\n      get: function() {\n        return TreeApi.arrayCopyChildren(this.node);\n      },\n      configurable: true\n    },\n\n    // textContent / innerHTML\n    textContent: {\n      get: function() {\n        return this.node.textContent;\n      },\n      set: function(value) {\n        return this.node.textContent = value;\n      },\n      configurable: true\n    },\n\n    innerHTML: {\n      get: function() {\n        return this.node.innerHTML;\n      },\n      set: function(value) {\n        return this.node.innerHTML = value;\n      },\n      configurable: true\n    }\n\n  });\n\n  var forwardMethods = function(m$) {\n    for (var i=0; i < m$.length; i++) {\n      forwardMethod(m$[i]);\n    }\n  };\n\n  var forwardMethod = function(method) {\n    DomApi.prototype[method] = function() {\n      return this.node[method].apply(this.node, arguments);\n    }\n  };\n\n  forwardMethods(['cloneNode', 'appendChild', 'insertBefore',\n    'removeChild', 'replaceChild', 'setAttribute', 'removeAttribute',\n    'querySelector']);\n\n  var forwardProperties = function(f$) {\n    for (var i=0; i < f$.length; i++) {\n      forwardProperty(f$[i]);\n    }\n  };\n\n  var forwardProperty = function(name) {\n    Object.defineProperty(DomApi.prototype, name, {\n      get: function() {\n        return this.node[name];\n      },\n      configurable: true\n    });\n  };\n\n  forwardProperties(['parentNode', 'firstChild', 'lastChild',\n    'nextSibling', 'previousSibling', 'firstElementChild',\n    'lastElementChild', 'nextElementSibling', 'previousElementSibling']);\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-api-shadow.html\n// module id = 37\n// module chunks = 0","/*__wc__loader*/\n\n\n  /**\n   * `Polymer.dom.flush()` causes any asynchronously queued actions to be\n   * flushed synchronously. It should be used sparingly as calling it frequently\n   * can negatively impact performance since work is often deferred for\n   * efficiency. Calling `Polymer.dom.flush()` is useful, for example, when\n   * an element has to measure itself and is unsure about the state of its\n   * internal or compoased DOM.\n   */\n  Polymer.Base.mixin(Polymer.dom, {\n\n    _flushGuard: 0,\n    _FLUSH_MAX: 100,\n    _needsTakeRecords: !Polymer.Settings.useNativeCustomElements,\n    _debouncers: [],\n    _staticFlushList: [],\n    _finishDebouncer: null,\n\n    // flush and debounce exposed as statics on Polymer.dom\n    flush: function() {\n      this._flushGuard = 0;\n      this._prepareFlush();\n      while (this._debouncers.length && this._flushGuard < this._FLUSH_MAX) {\n        // Avoid using an index in this loop to ensure flush is safe to be\n        // called reentrantly from a debouncer callback being flushed\n        while (this._debouncers.length) {\n          this._debouncers.shift().complete();\n        }\n        // clear the list of debouncers\n        if (this._finishDebouncer) {\n          this._finishDebouncer.complete();\n        }\n        this._prepareFlush();\n        this._flushGuard++;\n      }\n      if (this._flushGuard >= this._FLUSH_MAX) {\n        console.warn('Polymer.dom.flush aborted. Flush may not be complete.')\n      }\n    },\n\n    _prepareFlush: function() {\n      // TODO(sorvell): There is currently not a good way\n      // to process all custom elements mutations under SD polyfill because\n      // these mutations may be inside shadowRoots.\n      // again make any pending CE mutations that might trigger debouncer\n      // additions go...\n      if (this._needsTakeRecords) {\n        CustomElements.takeRecords();\n      }\n      for (var i=0; i < this._staticFlushList.length; i++) {\n        this._staticFlushList[i]();\n      }\n    },\n\n    // add to the static list of methods to call when flushing\n    addStaticFlush: function(fn) {\n      this._staticFlushList.push(fn);\n    },\n\n    // remove a function from the static list of methods to call when flushing\n    removeStaticFlush: function(fn) {\n      var i = this._staticFlushList.indexOf(fn);\n      if (i >= 0) {\n        this._staticFlushList.splice(i, 1);\n      }\n    },\n\n    addDebouncer: function(debouncer) {\n      this._debouncers.push(debouncer);\n      // ensure the list of active debouncers is cleared when done.\n      this._finishDebouncer = Polymer.Debounce(this._finishDebouncer,\n        this._finishFlush);\n    },\n\n    _finishFlush: function() {\n      Polymer.dom._debouncers = [];\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-api-flush.html\n// module id = 38\n// module chunks = 0","/*__wc__loader*/\nrequire('./settings.html');\n\n\nPolymer.EventApi = (function() {\n  'use strict';\n\n  var DomApi = Polymer.DomApi.ctor;\n  var Settings = Polymer.Settings;\n\n\n  /**\n   * DomApi.Event allows maniuplation of events compatible with\n   * the scoping concepts in Shadow DOM and compatible with both Shady DOM\n   * and Shadow DOM. The general usage is\n   * `Polymer.dom(event).property`. The `path` property returns `event.path`\n   * matching Shadow DOM. The `rootTarget` property returns the first node\n   * in the `path` and is the original event target. The `localTarget` property\n   * matches event.target under Shadow DOM and is the scoped event target.\n   */\n  DomApi.Event = function(event) {\n    this.event = event;\n  };\n\n  if (Settings.useShadow) {\n\n    DomApi.Event.prototype = {\n\n      get rootTarget() {\n        return this.event.path[0];\n      },\n\n      get localTarget() {\n        return this.event.target;\n      },\n\n      get path() {\n        var path = this.event.path;\n        if (!Array.isArray(path)) {\n          path = Array.prototype.slice.call(path);\n        }\n        return path;\n      }\n\n    };\n\n  } else {\n\n    DomApi.Event.prototype = {\n\n      get rootTarget() {\n        return this.event.target;\n      },\n\n      get localTarget() {\n        var current = this.event.currentTarget;\n        var currentRoot = current && Polymer.dom(current).getOwnerRoot();\n        var p$ = this.path;\n        for (var i=0; i < p$.length; i++) {\n          if (Polymer.dom(p$[i]).getOwnerRoot() === currentRoot) {\n            return p$[i];\n          }\n        }\n      },\n\n      // TODO(sorvell): simulate event.path. This probably incorrect for\n      // non-bubbling events.\n      get path() {\n        if (!this.event._path) {\n          var path = [];\n          var current = this.rootTarget;\n          while (current) {\n            path.push(current);\n            var insertionPoints = Polymer.dom(current).getDestinationInsertionPoints();\n            if (insertionPoints.length) {\n              for (var i = 0; i < insertionPoints.length - 1; i++) {\n                path.push(insertionPoints[i]);\n              }\n              current = insertionPoints[insertionPoints.length - 1];\n            } else {\n              current = Polymer.dom(current).parentNode || current.host;\n            }\n          }\n          // event path includes window in most recent native implementations\n          path.push(window);\n          this.event._path = path;\n        }\n        return this.event._path;\n      }\n\n    };\n\n  }\n\n  var factory = function(event) {\n    if (!event.__eventApi) {\n      event.__eventApi = new DomApi.Event(event);\n    }\n    return event.__eventApi;\n  };\n\n  return {\n    factory: factory\n  };\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-api-event.html\n// module id = 39\n// module chunks = 0","/*__wc__loader*/\n\n\n(function() {\n  'use strict';\n\n  var DomApi = Polymer.DomApi.ctor;\n\n  var useShadow = Polymer.Settings.useShadow;\n\n  /**\n   * DomApi.classList allows maniuplation of `classList` compatible with \n   * Polymer.dom. The general usage is \n   * `Polymer.dom(node).classList.method(arguments)` where methods and arguments\n   * match native DOM.\n   */\n  Object.defineProperty(DomApi.prototype, 'classList', {\n    get: function() {\n      if (!this._classList) {\n        this._classList = new DomApi.ClassList(this);\n      }\n      return this._classList;\n    },\n    configurable: true\n  });\n\n  DomApi.ClassList = function(host) {\n    this.domApi = host;\n    this.node = host.node;\n  }\n\n  DomApi.ClassList.prototype = {\n\n    add: function() {\n      this.node.classList.add.apply(this.node.classList, arguments);\n      this._distributeParent();\n    },\n\n    remove: function() {\n      this.node.classList.remove.apply(this.node.classList, arguments);\n      this._distributeParent();\n    },\n\n    toggle: function() {\n      this.node.classList.toggle.apply(this.node.classList, arguments);\n      this._distributeParent();\n    },\n\n    _distributeParent: function() {\n      if (!useShadow) {\n        this.domApi._maybeDistributeParent();\n      }\n    },\n\n    contains: function() {\n      return this.node.classList.contains.apply(this.node.classList,\n        arguments);\n    }\n  }\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-api-classlist.html\n// module id = 40\n// module chunks = 0","/*__wc__loader*/\nrequire('./settings.html');\n\n\n(function() {\n  'use strict';\n\n    var DomApi = Polymer.DomApi.ctor;\n    var Settings = Polymer.Settings;\n\n    /**\n     * DomApi.EffectiveNodesObserver tracks changes to an element's\n     * effective child nodes, the same list returned from\n     * `Polymer.dom(node).getEffectiveChildNodes()`.\n     * It is not meant to be used directly; it is used by\n     * `Polymer.dom(node).observeNodes(callback)` to observe changes.\n     */\n    DomApi.EffectiveNodesObserver = function(domApi) {\n      this.domApi = domApi;\n      this.node = this.domApi.node;\n      this._listeners = [];\n    };\n\n    DomApi.EffectiveNodesObserver.prototype = {\n\n      addListener: function(callback) {\n        if (!this._isSetup) {\n          this._setup();\n          this._isSetup = true;\n        }\n        var listener = {fn: callback, _nodes: []};\n        this._listeners.push(listener);\n        this._scheduleNotify();\n        return listener;\n      },\n\n      removeListener: function(handle) {\n        var i = this._listeners.indexOf(handle);\n        if (i >= 0) {\n          this._listeners.splice(i, 1);\n          handle._nodes = [];\n        }\n        if (!this._hasListeners()) {\n          this._cleanup();\n          this._isSetup = false;\n        }\n      },\n\n      _setup: function() {\n        this._observeContentElements(this.domApi.childNodes);\n      },\n\n      _cleanup: function() {\n        this._unobserveContentElements(this.domApi.childNodes);\n      },\n\n      _hasListeners: function() {\n        return Boolean(this._listeners.length);\n      },\n\n      _scheduleNotify: function() {\n        if (this._debouncer) {\n          this._debouncer.stop();\n        }\n        this._debouncer = Polymer.Debounce(this._debouncer,\n          this._notify);\n        this._debouncer.context = this;\n        Polymer.dom.addDebouncer(this._debouncer);\n      },\n\n      notify: function() {\n        if (this._hasListeners()) {\n          this._scheduleNotify();\n        }\n      },\n\n      _notify: function() {\n        this._beforeCallListeners();\n        this._callListeners();\n      },\n\n      _beforeCallListeners: function() {\n        this._updateContentElements();\n      },\n\n      _updateContentElements: function() {\n        this._observeContentElements(this.domApi.childNodes);\n      },\n\n      _observeContentElements: function(elements) {\n        for (var i=0, n; (i < elements.length) && (n=elements[i]); i++) {\n          if (this._isContent(n)) {\n            n.__observeNodesMap = n.__observeNodesMap || new WeakMap();\n            if (!n.__observeNodesMap.has(this)) {\n              n.__observeNodesMap.set(this, this._observeContent(n));\n            }\n          }\n        }\n      },\n\n      _observeContent: function(content) {\n        var self = this;\n        var h = Polymer.dom(content).observeNodes(function() {\n          self._scheduleNotify();\n        });\n        h._avoidChangeCalculation = true;\n        return h;\n      },\n\n      _unobserveContentElements: function(elements) {\n        for (var i=0, n, h; (i < elements.length) && (n=elements[i]); i++) {\n          if (this._isContent(n)) {\n            h = n.__observeNodesMap.get(this);\n            if (h) {\n              Polymer.dom(n).unobserveNodes(h);\n              n.__observeNodesMap.delete(this);\n            }\n          }\n        }\n      },\n\n      _isContent: function(node) {\n        return (node.localName === 'content');\n      },\n\n      _callListeners: function() {\n        var o$ = this._listeners;\n        var nodes = this._getEffectiveNodes();\n        for (var i=0, o; (i < o$.length) && (o=o$[i]); i++) {\n          var info = this._generateListenerInfo(o, nodes);\n          if (info || o._alwaysNotify) {\n            this._callListener(o, info);\n          }\n        }\n      },\n\n      _getEffectiveNodes: function() {\n        return this.domApi.getEffectiveChildNodes()\n      },\n\n      _generateListenerInfo: function(listener, newNodes) {\n        if (listener._avoidChangeCalculation) {\n          return true;\n        }\n        var oldNodes = listener._nodes;\n        var info = {\n          target: this.node,\n          addedNodes: [],\n          removedNodes: []\n        };\n        var splices = Polymer.ArraySplice.calculateSplices(newNodes, oldNodes);\n        // process removals\n        for (var i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n          for (var j=0, n; (j < s.removed.length) && (n=s.removed[j]); j++) {\n            info.removedNodes.push(n);\n          }\n        }\n        // process adds\n        for (i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n          for (j=s.index; j < s.index + s.addedCount; j++) {\n            info.addedNodes.push(newNodes[j]);\n          }\n        }\n        // update cache\n        listener._nodes = newNodes;\n        if (info.addedNodes.length || info.removedNodes.length) {\n          return info;\n        }\n      },\n\n      _callListener: function(listener, info) {\n        return listener.fn.call(this.node, info);\n      },\n\n      enableShadowAttributeTracking: function() {}\n\n    };\n\n    if (Settings.useShadow) {\n\n      var baseSetup = DomApi.EffectiveNodesObserver.prototype._setup;\n      var baseCleanup = DomApi.EffectiveNodesObserver.prototype._cleanup;\n\n      Polymer.Base.mixin(DomApi.EffectiveNodesObserver.prototype, {\n\n        _setup: function() {\n          if (!this._observer) {\n            var self = this;\n            this._mutationHandler = function(mxns) {\n              if (mxns && mxns.length) {\n                self._scheduleNotify();\n              }\n            };\n            this._observer = new MutationObserver(this._mutationHandler);\n            this._boundFlush = function() {\n              self._flush();\n            }\n            Polymer.dom.addStaticFlush(this._boundFlush);\n            // NOTE: subtree true is way too aggressive, but it easily catches\n            // attribute changes on children. These changes otherwise require\n            // attribute observers on every child. Testing has shown this\n            // approach to be more efficient.\n            // TODO(sorvell): do we still need to include an option to defeat\n            // attribute tracking?\n            this._observer.observe(this.node, { childList: true });\n          }\n          baseSetup.call(this);\n        },\n\n        _cleanup: function() {\n          this._observer.disconnect();\n          this._observer = null;\n          this._mutationHandler = null;\n          Polymer.dom.removeStaticFlush(this._boundFlush);\n          baseCleanup.call(this);\n        },\n\n        _flush: function() {\n          if (this._observer) {\n            this._mutationHandler(this._observer.takeRecords());\n          }\n        },\n\n        enableShadowAttributeTracking: function() {\n          if (this._observer) {\n            // provoke all listeners needed for <content> observation\n            // to always call listeners when no-op changes occur (which may\n            // affect lower distributions.\n            this._makeContentListenersAlwaysNotify();\n            this._observer.disconnect();\n            this._observer.observe(this.node, {\n              childList: true,\n              attributes: true,\n              subtree: true\n            });\n            var root = this.domApi.getOwnerRoot();\n            var host = root && root.host;\n            if (host && Polymer.dom(host).observer) {\n              Polymer.dom(host).observer.enableShadowAttributeTracking();\n            }\n          }\n        },\n\n        _makeContentListenersAlwaysNotify: function() {\n          for (var i=0, h; i < this._listeners.length ; i++) {\n            h = this._listeners[i];\n            h._alwaysNotify = h._isContentListener;\n          }\n        }\n\n      });\n\n    }\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-api-effective-nodes-observer.html\n// module id = 41\n// module chunks = 0","/*__wc__loader*/\nrequire('./settings.html');\n\n\n(function() {\n  'use strict';\n\n    var DomApi = Polymer.DomApi.ctor;\n    var Settings = Polymer.Settings;\n\n    /**\n     * DomApi.DistributedNodesObserver notifies when the list returned by\n     * a <content> element's `getDistributedNodes()` may have changed.\n     * It is not meant to be used directly; it is used by\n     * `Polymer.dom(node).observeNodes(callback)` to observe changes to\n     * `<content>.getDistributedNodes()`.\n     */\n    DomApi.DistributedNodesObserver = function(domApi) {\n      DomApi.EffectiveNodesObserver.call(this, domApi);\n    };\n\n    DomApi.DistributedNodesObserver.prototype =\n      Object.create(DomApi.EffectiveNodesObserver.prototype);\n\n    Polymer.Base.mixin(DomApi.DistributedNodesObserver.prototype, {\n\n      // NOTE: ShadyDOM distribute provokes notification of these observers\n      // so no setup is required.\n      _setup: function() {},\n\n      _cleanup: function() {},\n\n      // no need to update sub-elements since <content> does not nest\n      // (but note that <slot> will)\n      _beforeCallListeners: function() {},\n\n      _getEffectiveNodes: function() {\n        return this.domApi.getDistributedNodes();\n      }\n\n    });\n\n    if (Settings.useShadow) {\n\n      Polymer.Base.mixin(DomApi.DistributedNodesObserver.prototype, {\n\n        // NOTE: Under ShadowDOM we must observe the host element for\n        // changes.\n        _setup: function() {\n          if (!this._observer) {\n            var root = this.domApi.getOwnerRoot();\n            var host = root && root.host;\n            if (host) {\n              var self = this;\n              this._observer = Polymer.dom(host).observeNodes(function() {\n                self._scheduleNotify();\n              });\n              // NOTE: we identify this listener as needed for <content>\n              // notification so that enableShadowAttributeTracking\n              // can find these observers an ensure that we pass always\n              // pass notifications down.\n              this._observer._isContentListener = true;\n              if (this._hasAttrSelect()) {\n                Polymer.dom(host).observer.enableShadowAttributeTracking();\n              }\n            }\n          }\n        },\n\n        _hasAttrSelect: function() {\n          var select = this.node.getAttribute('select');\n          return select && select.match(/[[.]+/);\n        },\n\n        _cleanup: function() {\n          var root = this.domApi.getOwnerRoot();\n          var host = root && root.host;\n          if (host) {\n            Polymer.dom(host).unobserveNodes(this._observer);\n          }\n          this._observer = null;\n        }\n\n      });\n\n    }\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/dom-api-distributed-nodes-observer.html\n// module id = 42\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/settings.html');\n\n\n  \n  /**\n    Implements `shadyRoot` compatible dom scoping using native ShadowDOM.\n  */\n\n  // Transform styles if not using ShadowDOM or if flag is set.\n\n  if (Polymer.Settings.useShadow) {\n\n    Polymer.Base._addFeature({\n\n      // no-op's when ShadowDOM is in use\n      _poolContent: function() {},\n      _beginDistribute: function() {},\n      distributeContent: function() {},\n      _distributeContent: function() {},\n      _finishDistribute: function() {},\n      \n      // create a shadowRoot\n      _createLocalRoot: function() {\n        this.createShadowRoot();\n        this.shadowRoot.appendChild(this.root);\n        this.root = this.shadowRoot;\n      }\n\n    });\n\n  }\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mini/shadow.html\n// module id = 43\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/async.html');\n\nrequire('../lib/debounce.html');\n\n\n\n  Polymer.Base._addFeature({\n\n    _setupDebouncers: function() {\n      this._debouncers = {};\n    },\n\n    /**\n     * Call `debounce` to collapse multiple requests for a named task into\n     * one invocation which is made after the wait time has elapsed with\n     * no new request.  If no wait time is given, the callback will be called\n     * at microtask timing (guaranteed before paint).\n     *\n     *     debouncedClickAction: function(e) {\n     *       // will not call `processClick` more than once per 100ms\n     *       this.debounce('click', function() {\n     *        this.processClick();\n     *       }, 100);\n     *     }\n     *\n     * @method debounce\n     * @param {String} jobName String to indentify the debounce job.\n     * @param {Function} callback Function that is called (with `this`\n     *   context) when the wait time elapses.\n     * @param {number} wait Optional wait time in milliseconds (ms) after the\n     *   last signal that must elapse before invoking `callback`\n     */\n    debounce: function(jobName, callback, wait) {\n      return this._debouncers[jobName] = Polymer.Debounce.call(this,\n        this._debouncers[jobName], callback, wait);\n    },\n\n    /**\n     * Returns whether a named debouncer is active.\n     *\n     * @method isDebouncerActive\n     * @param {String} jobName The name of the debouncer started with `debounce`\n     * @return {boolean} Whether the debouncer is active (has not yet fired).\n     */\n    isDebouncerActive: function(jobName) {\n      var debouncer = this._debouncers[jobName];\n      return !!(debouncer && debouncer.finish);\n    },\n\n    /**\n     * Immediately calls the debouncer `callback` and inactivates it.\n     *\n     * @method flushDebouncer\n     * @param {String} jobName The name of the debouncer started with `debounce`\n     */\n    flushDebouncer: function(jobName) {\n      var debouncer = this._debouncers[jobName];\n      if (debouncer) {\n        debouncer.complete();\n      }\n    },\n\n    /**\n     * Cancels an active debouncer.  The `callback` will not be called.\n     *\n     * @method cancelDebouncer\n     * @param {String} jobName The name of the debouncer started with `debounce`\n     */\n    cancelDebouncer: function(jobName) {\n      var debouncer = this._debouncers[jobName];\n      if (debouncer) {\n        debouncer.stop();\n      }\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/mini/debouncer.html\n// module id = 44\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/annotations/annotations.html');\n\nrequire('../lib/resolve-url.html');\n\nrequire('../lib/path.html');\n\n\n\n/**\n * Scans a template to produce an annotation object that stores expression\n * metadata along with information to associate the metadata with nodes in an\n * instance.\n *\n * Elements with `id` in the template are noted and marshaled into an\n * the `$` hash in an instance.\n *\n * Example\n *\n *     &lt;template>\n *       &lt;div id=\"foo\">&lt;/div>\n *     &lt;/template>\n *     &lt;script>\n *      Polymer({\n *        task: function() {\n *          this.$.foo.style.color = 'red';\n *        }\n *      });\n *     &lt;/script>\n *\n * Other expressions that are noted include:\n *\n * Double-mustache annotations in text content. The annotation must be the only\n * content in the tag, compound expressions are not (currently) supported.\n *\n *     <[tag]>{{path.to.host.property}}<[tag]>\n *\n * Double-mustache annotations in an attribute.\n *\n *     <[tag] someAttribute=\"{{path.to.host.property}}\"><[tag]>\n *\n * Only immediate host properties can automatically trigger side-effects.\n * Setting `host.path` in the example above triggers the binding, setting\n * `host.path.to.host.property` does not.\n *\n * `on-` style event declarations.\n *\n *     <[tag] on-<event-name>=\"{{hostMethodName}}\"><[tag]>\n *\n * Note: **the `annotations` feature does not actually implement the behaviors\n * associated with these expressions, it only captures the data**.\n *\n * Other optional features contain actual data implementations.\n *\n * @class standard feature: annotations\n */\n\n/*\n\nScans a template to produce an annotation map that stores expression metadata\nand information that associates the metadata to nodes in a template instance.\n\nSupported annotations are:\n\n  * id attributes\n  * binding annotations in text nodes\n    * double-mustache expressions: {{expression}}\n    * double-bracket expressions: [[expression]]\n  * binding annotations in attributes\n    * attribute-bind expressions: name=\"{{expression}} || [[expression]]\"\n    * property-bind expressions: name*=\"{{expression}} || [[expression]]\"\n    * property-bind expressions: name:=\"expression\"\n  * event annotations\n    * event delegation directives: on-<eventName>=\"expression\"\n\nGenerated data-structure:\n\n  [\n    {\n      id: '<id>',\n      events: [\n        {\n          mode: ['auto'|''],\n          name: '<name>'\n          value: '<expression>'\n        }, ...\n      ],\n      bindings: [\n        {\n          kind: ['text'|'attribute'|'property'],\n          mode: ['auto'|''],\n          name: '<name>'\n          value: '<expression>'\n        }, ...\n      ],\n      // TODO(sjmiles): confusingly, this is annotation-parent, not node-parent\n      parent: <reference to parent annotation>,\n      index: <integer index in parent's childNodes collection>\n    },\n    ...\n  ]\n\nTODO(sjmiles): this module should produce either syntactic metadata\n(e.g. double-mustache, double-bracket, star-attr), or semantic metadata\n(e.g. manual-bind, auto-bind, property-bind). Right now it's half and half.\n\n*/\n\n  Polymer.Base._addFeature({\n\n    // registration-time\n\n    _prepAnnotations: function() {\n      if (!this._template) {\n        this._notes = [];\n      } else {\n        // TODO(sorvell): ad hoc method of plugging behavior into Annotations\n        var self = this;\n        Polymer.Annotations.prepElement = function(element) {\n          self._prepElement(element);\n        }\n        if (this._template._content && this._template._content._notes) {\n          this._notes = this._template._content._notes;\n        }  else {\n          this._notes = Polymer.Annotations.parseAnnotations(this._template);\n          this._processAnnotations(this._notes);\n        }\n        Polymer.Annotations.prepElement = null;\n      }\n    },\n\n    _processAnnotations: function(notes) {\n      for (var i=0; i<notes.length; i++) {\n        var note = notes[i];\n        // Parse bindings for methods & path roots (models)\n        for (var j=0; j<note.bindings.length; j++) {\n          var b = note.bindings[j];\n          for (var k=0; k<b.parts.length; k++) {\n            var p = b.parts[k];\n            if (!p.literal) {\n              var signature = this._parseMethod(p.value);\n              if (signature) {\n                p.signature = signature;\n              } else {\n                p.model = Polymer.Path.root(p.value);\n              }\n            }\n          }\n        }\n        // Recurse into nested templates & bind parent props\n        if (note.templateContent) {\n          this._processAnnotations(note.templateContent._notes);\n          var pp = note.templateContent._parentProps =\n            this._discoverTemplateParentProps(note.templateContent._notes);\n          var bindings = [];\n          for (var prop in pp) {\n            var name = '_parent_' + prop;\n            bindings.push({\n              index: note.index,\n              kind: 'property',\n              name: name,\n              propertyName: name,\n              parts: [{\n                mode: '{',\n                model: prop,\n                value: prop\n              }]\n            });\n          }\n          note.bindings = note.bindings.concat(bindings);\n        }\n      }\n    },\n\n    // Finds all bindings in template content and stores the path roots in\n    // the path members in content._parentProps. Each outer template merges\n    // inner _parentProps to propagate inner parent property needs to outer\n    // templates.\n    _discoverTemplateParentProps: function(notes) {\n      var pp = {};\n      for (var i=0, n; (i<notes.length) && (n=notes[i]); i++) {\n        // Find all bindings to parent.* and spread them into _parentPropChain\n        for (var j=0, b$=n.bindings, b; (j<b$.length) && (b=b$[j]); j++) {\n          for (var k=0, p$=b.parts, p; (k<p$.length) && (p=p$[k]); k++) {\n            if (p.signature) {\n              var args = p.signature.args;\n              for (var kk=0; kk<args.length; kk++) {\n                var model = args[kk].model;\n                if (model) {\n                  pp[model] = true;\n                }\n              }\n              if (p.signature.dynamicFn) {\n                pp[p.signature.method] = true;\n              }\n            } else {\n              if (p.model) {\n                pp[p.model] = true;\n              }\n            }\n          }\n        }\n        // Merge child _parentProps into this _parentProps\n        if (n.templateContent) {\n          var tpp = n.templateContent._parentProps;\n          Polymer.Base.mixin(pp, tpp);\n        }\n      }\n      return pp;\n    },\n\n    _prepElement: function(element) {\n      Polymer.ResolveUrl.resolveAttrs(element, this._template.ownerDocument);\n    },\n\n    // instance-time\n\n    _findAnnotatedNode: Polymer.Annotations.findAnnotatedNode,\n\n    // marshal all teh things\n    _marshalAnnotationReferences: function() {\n      if (this._template) {\n        this._marshalIdNodes();\n        this._marshalAnnotatedNodes();\n        this._marshalAnnotatedListeners();\n      }\n    },\n\n    // push configuration references at configure time\n    _configureAnnotationReferences: function() {\n      var notes = this._notes;\n      var nodes = this._nodes;\n      for (var i=0; i<notes.length; i++) {\n        var note = notes[i];\n        var node = nodes[i];\n        this._configureTemplateContent(note, node);\n        this._configureCompoundBindings(note, node);\n      }\n    },\n\n    // nested template contents have been stored prototypically to avoid\n    // unnecessary duplication, here we put references to the\n    // indirected contents onto the nested template instances\n    _configureTemplateContent: function(note, node) {\n      if (note.templateContent) {\n        // note: we can rely on _nodes being set here and having the same\n        // index as _notes\n        node._content = note.templateContent;\n      }\n    },\n\n    // Compound bindings utilize private storage on the node to store\n    // the current state of each value that will be concatenated to generate\n    // the final property/attribute/text value\n    // Here we initialize the private storage array on the node with any\n    // literal parts that won't change (could get fancy and use WeakMap),\n    // and configure property bindings to children with the literal parts\n    // (textContent and annotations were already initialized in the template)\n    _configureCompoundBindings: function(note, node) {\n      var bindings = note.bindings;\n      for (var i=0; i<bindings.length; i++) {\n        var binding = bindings[i];\n        if (binding.isCompound) {\n          // Create compound storage map\n          var storage = node.__compoundStorage__ ||\n            (node.__compoundStorage__ = {});\n          var parts = binding.parts;\n          // Copy literals from parts into storage for this binding\n          var literals = new Array(parts.length);\n          for (var j=0; j<parts.length; j++) {\n            literals[j] = parts[j].literal;\n          }\n          var name = binding.name;\n          storage[name] = literals;\n          // Configure properties with their literal parts\n          if (binding.literal && binding.kind == 'property') {\n            if (node._configValue) {\n              node._configValue(name, binding.literal);\n            } else {\n              node[name] = binding.literal;\n            }\n          }\n        }\n      }\n    },\n\n    // construct `$` map (from id annotations)\n    _marshalIdNodes: function() {\n      this.$ = {};\n      for (var i=0, l=this._notes.length, a; (i<l) && (a=this._notes[i]); i++) {\n        if (a.id) {\n          this.$[a.id] = this._findAnnotatedNode(this.root, a);\n        }\n      }\n    },\n\n    // concretize `_nodes` map (from anonymous annotations)\n    _marshalAnnotatedNodes: function() {\n      if (this._notes && this._notes.length) {\n        var r = new Array(this._notes.length);\n        for (var i=0; i < this._notes.length; i++) {\n          r[i] = this._findAnnotatedNode(this.root, this._notes[i]);\n        }\n        this._nodes = r;\n      }\n    },\n\n    // install event listeners (from event annotations)\n    _marshalAnnotatedListeners: function() {\n      for (var i=0, l=this._notes.length, a; (i<l) && (a=this._notes[i]); i++) {\n        if (a.events && a.events.length) {\n          var node = this._findAnnotatedNode(this.root, a);\n          for (var j=0, e$=a.events, e; (j<e$.length) && (e=e$[j]); j++) {\n            this.listen(node, e.name, e.value);\n          }\n        }\n      }\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard/annotations.html\n// module id = 45\n// module chunks = 0","/*__wc__loader*/\nrequire('../case-map.html');\n\n\n(function() {\n/**\n * Scans a template to produce an annotation list that that associates\n * metadata culled from markup with tree locations\n * metadata and information to associate the metadata with nodes in an instance.\n *\n * Supported expressions include:\n *\n * Double-mustache annotations in text content. The annotation must be the only\n * content in the tag, compound expressions are not supported.\n *\n *     <[tag]>{{annotation}}<[tag]>\n *\n * Double-escaped annotations in an attribute, either {{}} or [[]].\n *\n *     <[tag] someAttribute=\"{{annotation}}\" another=\"[[annotation]]\"><[tag]>\n *\n * `on-` style event declarations.\n *\n *     <[tag] on-<event-name>=\"annotation\"><[tag]>\n *\n * Note that the `annotations` feature does not implement any behaviors\n * associated with these expressions, it only captures the data.\n *\n * Generated data-structure:\n *\n *     [\n *       {\n *         id: '<id>',\n *         events: [\n *           {\n *             name: '<name>'\n *             value: '<annotation>'\n *           }, ...\n *         ],\n *         bindings: [\n *           {\n *             kind: ['text'|'attribute'],\n *             mode: ['{'|'['],\n *             name: '<name>'\n *             value: '<annotation>'\n *           }, ...\n *         ],\n *         // TODO(sjmiles): this is annotation-parent, not node-parent\n *         parent: <reference to parent annotation object>,\n *         index: <integer index in parent's childNodes collection>\n *       },\n *       ...\n *     ]\n *\n * @class Template feature\n */\n\n  // null-array (shared empty array to avoid null-checks)\n  Polymer.nar = [];\n\n  var disableUpgradeEnabled = Polymer.Settings.disableUpgradeEnabled;\n\n  Polymer.Annotations = {\n\n    // preprocess-time\n\n    // construct and return a list of annotation records\n    // by scanning `template`'s content\n    //\n    parseAnnotations: function(template, stripWhiteSpace) {\n      var list = [];\n      var content = template._content || template.content;\n      this._parseNodeAnnotations(content, list,\n        stripWhiteSpace || template.hasAttribute('strip-whitespace'));\n      return list;\n    },\n\n    // add annotations gleaned from subtree at `node` to `list`\n    _parseNodeAnnotations: function(node, list, stripWhiteSpace) {\n      return node.nodeType === Node.TEXT_NODE ?\n        this._parseTextNodeAnnotation(node, list) :\n          // TODO(sjmiles): are there other nodes we may encounter\n          // that are not TEXT_NODE but also not ELEMENT?\n          this._parseElementAnnotations(node, list, stripWhiteSpace);\n    },\n\n    _bindingRegex: (function() {\n      var IDENT  = '(?:' + '[a-zA-Z_$][\\\\w.:$\\\\-*]*' + ')';\n      var NUMBER = '(?:' + '[-+]?[0-9]*\\\\.?[0-9]+(?:[eE][-+]?[0-9]+)?' + ')';\n      var SQUOTE_STRING = '(?:' + '\\'(?:[^\\'\\\\\\\\]|\\\\\\\\.)*\\'' + ')';\n      var DQUOTE_STRING = '(?:' + '\"(?:[^\"\\\\\\\\]|\\\\\\\\.)*\"' + ')';\n      var STRING = '(?:' + SQUOTE_STRING + '|' + DQUOTE_STRING + ')';\n      var ARGUMENT = '(?:' + IDENT + '|' + NUMBER + '|' +  STRING + '\\\\s*' + ')';\n      var ARGUMENTS = '(?:' + ARGUMENT + '(?:,\\\\s*' + ARGUMENT + ')*' + ')';\n      var ARGUMENT_LIST = '(?:' + '\\\\(\\\\s*' +\n                                    '(?:' + ARGUMENTS + '?' + ')' +\n                                  '\\\\)\\\\s*' + ')';\n      var BINDING = '(' + IDENT + '\\\\s*' + ARGUMENT_LIST + '?' + ')'; // Group 3\n      var OPEN_BRACKET = '(\\\\[\\\\[|{{)' + '\\\\s*';\n      var CLOSE_BRACKET = '(?:]]|}})';\n      var NEGATE = '(?:(!)\\\\s*)?'; // Group 2\n      var EXPRESSION = OPEN_BRACKET + NEGATE + BINDING + CLOSE_BRACKET;\n      return new RegExp(EXPRESSION, \"g\");\n    })(),\n\n    // TODO(kschaaf): We could modify this to allow an escape mechanism by\n    // looking for the escape sequence in each of the matches and converting\n    // the part back to a literal type, and then bailing if only literals\n    // were found\n    _parseBindings: function(text) {\n      var re = this._bindingRegex;\n      var parts = [];\n      var lastIndex = 0;\n      var m;\n      // Example: \"literal1{{prop}}literal2[[!compute(foo,bar)]]final\"\n      // Regex matches:\n      //        Iteration 1:  Iteration 2:\n      // m[1]: '{{'          '[['\n      // m[2]: ''            '!'\n      // m[3]: 'prop'        'compute(foo,bar)'\n      while ((m = re.exec(text)) !== null) {\n        // Add literal part\n        if (m.index > lastIndex) {\n          parts.push({literal: text.slice(lastIndex, m.index)});\n        }\n        // Add binding part\n        // Mode (one-way or two)\n        var mode = m[1][0];\n        var negate = Boolean(m[2]);\n        var value = m[3].trim();\n        var customEvent, notifyEvent, colon;\n        if (mode == '{' && (colon = value.indexOf('::')) > 0) {\n          notifyEvent = value.substring(colon + 2);\n          value = value.substring(0, colon);\n          customEvent = true;\n        }\n        parts.push({\n          compoundIndex: parts.length,\n          value: value,\n          mode: mode,\n          negate: negate,\n          event: notifyEvent,\n          customEvent: customEvent\n        });\n        lastIndex = re.lastIndex;\n      }\n      // Add a final literal part\n      if (lastIndex && lastIndex < text.length) {\n        var literal = text.substring(lastIndex);\n        if (literal) {\n          parts.push({\n            literal: literal\n          });\n        }\n      }\n      if (parts.length) {\n        return parts;\n      }\n    },\n\n    _literalFromParts: function(parts) {\n      var s = '';\n      for (var i=0; i<parts.length; i++) {\n        var literal = parts[i].literal;\n        s += literal || '';\n      }\n      return s;\n    },\n\n    // add annotations gleaned from TextNode `node` to `list`\n    _parseTextNodeAnnotation: function(node, list) {\n      var parts = this._parseBindings(node.textContent);\n      if (parts) {\n        // Initialize the textContent with any literal parts\n        // NOTE: default to a space here so the textNode remains; some browsers\n        // (IE) evacipate an empty textNode following cloneNode/importNode.\n        node.textContent = this._literalFromParts(parts) || ' ';\n        var annote = {\n          bindings: [{\n            kind: 'text',\n            name: 'textContent',\n            parts: parts,\n            isCompound: parts.length !== 1\n          }]\n        };\n        list.push(annote);\n        return annote;\n      }\n    },\n\n    // add annotations gleaned from Element `node` to `list`\n    _parseElementAnnotations: function(element, list, stripWhiteSpace) {\n      var annote = {\n        bindings: [],\n        events: []\n      };\n      if (element.localName === 'content') {\n        list._hasContent = true;\n      }\n      this._parseChildNodesAnnotations(element, annote, list, stripWhiteSpace);\n      // TODO(sjmiles): is this for non-ELEMENT nodes? If so, we should\n      // change the contract of this method, or filter these out above.\n      if (element.attributes) {\n        this._parseNodeAttributeAnnotations(element, annote, list);\n        // TODO(sorvell): ad hoc callback for doing work on elements while\n        // leveraging annotator's tree walk.\n        // Consider adding an node callback registry and moving specific\n        // processing out of this module.\n        if (this.prepElement) {\n          this.prepElement(element);\n        }\n      }\n      if (annote.bindings.length || annote.events.length || annote.id) {\n        list.push(annote);\n      }\n      return annote;\n    },\n\n    // add annotations gleaned from children of `root` to `list`, `root`'s\n    // `annote` is supplied as it is the annote.parent of added annotations\n    _parseChildNodesAnnotations: function(root, annote, list, stripWhiteSpace) {\n      if (root.firstChild) {\n        var node = root.firstChild;\n        var i = 0;\n        while (node) {\n          var next = node.nextSibling;\n          if (node.localName === 'template' &&\n            !node.hasAttribute('preserve-content')) {\n            this._parseTemplate(node, i, list, annote, stripWhiteSpace);\n          }\n          if (node.localName == 'slot') {\n            node = this._replaceSlotWithContent(node);\n          }\n          // collapse adjacent textNodes: fixes an IE issue that can cause\n          // text nodes to be inexplicably split =(\n          // note that root.normalize() should work but does not so we do this\n          // manually.\n          if (node.nodeType === Node.TEXT_NODE) {\n            var n = next;\n            while (n && (n.nodeType === Node.TEXT_NODE)) {\n              node.textContent += n.textContent;\n              next = n.nextSibling;\n              root.removeChild(n);\n              n = next;\n            }\n            // optionally strip whitespace\n            if (stripWhiteSpace && !node.textContent.trim()) {\n              root.removeChild(node);\n              // decrement index since node is removed\n              i--;\n            }\n          }\n          // if this node didn't get evacipated, parse it.\n          if (node.parentNode) {\n            var childAnnotation = this._parseNodeAnnotations(node, list,\n              stripWhiteSpace);\n            if (childAnnotation) {\n              childAnnotation.parent = annote;\n              childAnnotation.index = i;\n            }\n          }\n          node = next;\n          i++;\n        }\n      }\n    },\n\n    _replaceSlotWithContent: function(slot) {\n      var content = slot.ownerDocument.createElement('content');\n      while (slot.firstChild) {\n        content.appendChild(slot.firstChild);\n      }\n      var attrs = slot.attributes;\n      for (var i=0; i<attrs.length; i++) {\n        var attr = attrs[i];\n        content.setAttribute(attr.name, attr.value);\n      }\n      var name = slot.getAttribute('name');\n      if (name) {\n        content.setAttribute('select', '[slot=\\'' + name + '\\']');\n      }\n      slot.parentNode.replaceChild(content, slot);\n      return content;\n    },\n\n    // 1. Parse annotations from the template and memoize them on\n    //    content._notes (recurses into nested templates)\n    // 2. Remove template.content and store it in annotation list, where it\n    //    will be the responsibility of the host to set it back to the template\n    //    (this is both an optimization to avoid re-stamping nested template\n    //    children and avoids a bug in Chrome where nested template children\n    //    upgrade)\n    _parseTemplate: function(node, index, list, parent, stripWhiteSpace) {\n      // TODO(sjmiles): simply altering the .content reference didn't\n      // work (there was some confusion, might need verification)\n      var content = document.createDocumentFragment();\n      content._notes = this.parseAnnotations(node, stripWhiteSpace);\n      content.appendChild(node.content);\n      // TODO(sjmiles): using `nar` to avoid unnecessary allocation;\n      // in general the handling of these arrays needs some cleanup\n      // in this module\n      list.push({\n        bindings: Polymer.nar,\n        events: Polymer.nar,\n        templateContent: content,\n        parent: parent,\n        index: index\n      });\n    },\n\n    // add annotation data from attributes to the `annotation` for node `node`\n    // TODO(sjmiles): the distinction between an `annotation` and\n    // `annotation data` is not as clear as it could be\n    _parseNodeAttributeAnnotations: function(node, annotation) {\n      // Make copy of original attribute list, since the order may change\n      // as attributes are added and removed\n      var attrs = Array.prototype.slice.call(node.attributes);\n      for (var i=attrs.length-1, a; (a=attrs[i]); i--) {\n        var n = a.name;\n        var v = a.value;\n        var b;\n        // events (on-*)\n        if (n.slice(0, 3) === 'on-') {\n          node.removeAttribute(n);\n          annotation.events.push({\n            name: n.slice(3),\n            value: v\n          });\n        }\n        // bindings (other attributes)\n        else if ((b = this._parseNodeAttributeAnnotation(node, n, v))) {\n          annotation.bindings.push(b);\n        }\n        // static id\n        else if (n === 'id') {\n          annotation.id = v;\n        }\n      }\n    },\n\n    // construct annotation data from a generic attribute, or undefined\n    _parseNodeAttributeAnnotation: function(node, name, value) {\n      var parts = this._parseBindings(value);\n      if (parts) {\n        // Attribute or property\n        var origName = name;\n        var kind = 'property';\n        if (name[name.length-1] == '$') {\n          name = name.slice(0, -1);\n          kind = 'attribute';\n        }\n        // Initialize attribute bindings with any literal parts\n        var literal = this._literalFromParts(parts);\n        if (literal && kind == 'attribute') {\n          node.setAttribute(name, literal);\n        }\n        // Clear attribute before removing, since IE won't allow removing\n        // `value` attribute if it previously had a value (can't\n        // unconditionally set '' before removing since attributes with `$`\n        // can't be set using setAttribute)\n        if (node.localName === 'input' && origName === 'value') {\n          node.setAttribute(origName, '');\n        }\n        // Support `disable-upgrade` feature by maintaining this\n        // attribute so that it can be found on an element at\n        // `createdCallback` time.\n        if (disableUpgradeEnabled && origName === 'disable-upgrade$') {\n          node.setAttribute(name, '');\n        }\n        // Remove annotation\n        node.removeAttribute(origName);\n        // Case hackery: attributes are lower-case, but bind targets\n        // (properties) are case sensitive. Gambit is to map dash-case to\n        // camel-case: `foo-bar` becomes `fooBar`.\n        // Attribute bindings are excepted.\n        var propertyName = Polymer.CaseMap.dashToCamelCase(name);\n        if (kind === 'property') {\n          name = propertyName;\n        }\n        return {\n          kind: kind,\n          name: name,\n          propertyName: propertyName,\n          parts: parts,\n          literal: literal,\n          isCompound: parts.length !== 1\n        };\n      }\n    },\n\n    // instance-time\n\n    findAnnotatedNode: function(root, annote) {\n      // recursively ascend tree until we hit root\n      var parent = annote.parent &&\n        Polymer.Annotations.findAnnotatedNode(root, annote.parent);\n      // unwind the stack, returning the indexed node at each level\n      if (parent) {\n        // note: marginally faster than indexing via childNodes\n        // (http://jsperf.com/childnodes-lookup)\n        for (var n=parent.firstChild, i=0; n; n=n.nextSibling) {\n          if (annote.index === i++) {\n            return n;\n          }\n        }\n      } else {\n        return root;\n      }\n    }\n\n  };\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/annotations/annotations.html\n// module id = 46\n// module chunks = 0","/*__wc__loader*/\n\n\n  /**\n   * Supports `listeners` object.\n   *\n   * Example:\n   *\n   *\n   *     Polymer({\n   *\n   *       listeners: {\n   *         // `click` events on the host are delegated to `clickHandler`\n   *         'click': 'clickHandler'\n   *       },\n   *\n   *       ...\n   *\n   *     });\n   *\n   *\n   * @class standard feature: events\n   *\n   */\n\n  Polymer.Base._addFeature({\n\n    /**\n     * Object containing entries specifying event listeners to create on each\n     * instance of this element, where keys specify the event name and values\n     * specify the name of the handler method to call on this prototype.\n     *\n     * Example:\n     *\n     *\n     *     Polymer({\n     *\n     *       listeners: {\n     *         // `click` events on the host are delegated to `clickHandler`\n     *         'tap': 'tapHandler'\n     *       },\n     *\n     *       ...\n     *\n     *     });\n     */\n    listeners: {},\n\n    // TODO(sorvell): need to deprecate listening for a.b.\n    // In the interim, we need to keep a map of listeners by node name\n    // to avoid these string searches at instance time.\n    _listenListeners: function(listeners) {\n      var node, name, eventName;\n      for (eventName in listeners) {\n        if (eventName.indexOf('.') < 0) {\n          node = this;\n          name = eventName;\n        } else {\n          name = eventName.split('.');\n          node = this.$[name[0]];\n          name = name[1];\n        }\n        this.listen(node, name, listeners[eventName]);\n      }\n    },\n\n    /**\n     * Convenience method to add an event listener on a given element,\n     * late bound to a named method on this element.\n     *\n     * @method listen\n     * @param {Element} node Element to add event listener to.\n     * @param {string} eventName Name of event to listen for.\n     * @param {string} methodName Name of handler method on `this` to call.\n     */\n    listen: function(node, eventName, methodName) {\n      var handler = this._recallEventHandler(this, eventName, node, methodName);\n      // reuse cache'd handler\n      if (!handler) {\n        handler = this._createEventHandler(node, eventName, methodName);\n      }\n      // don't call _listen if we are already listening\n      if (handler._listening) {\n        return;\n      }\n      this._listen(node, eventName, handler);\n      handler._listening = true;\n    },\n\n    _boundListenerKey: function(eventName, methodName) {\n      return (eventName + ':' + methodName);\n    },\n\n    _recordEventHandler: function(host, eventName, target, methodName, handler) {\n      var hbl = host.__boundListeners;\n      if (!hbl) {\n        hbl = host.__boundListeners = new WeakMap();\n      }\n      var bl = hbl.get(target);\n      if (!bl) {\n        bl = {};\n        if( !Polymer.Settings.isIE || target != window ) {\n          hbl.set(target, bl);\n        }\n      }\n      var key = this._boundListenerKey(eventName, methodName);\n      bl[key] = handler;\n    },\n\n    _recallEventHandler: function(host, eventName, target, methodName) {\n      var hbl = host.__boundListeners;\n      if (!hbl) {\n        return;\n      }\n      var bl = hbl.get(target);\n      if (!bl) {\n        return;\n      }\n      var key = this._boundListenerKey(eventName, methodName);\n      return bl[key];\n    },\n\n    _createEventHandler: function(node, eventName, methodName) {\n      var host = this;\n      var handler = function(e) {\n        if (host[methodName]) {\n          host[methodName](e, e.detail);\n        } else {\n          host._warn(host._logf('_createEventHandler', 'listener method `' +\n            methodName + '` not defined'));\n        }\n      };\n      handler._listening = false;\n      this._recordEventHandler(host, eventName, node, methodName, handler);\n      return handler;\n    },\n\n    /**\n     * Convenience method to remove an event listener from a given element,\n     * late bound to a named method on this element.\n     *\n     * @method unlisten\n     * @param {Element} node Element to remove event listener from.\n     * @param {string} eventName Name of event to stop listening to.\n     * @param {string} methodName Name of handler method on `this` to not call\n     anymore.\n     */\n    unlisten: function(node, eventName, methodName) {\n      // leave handler in map for cache purposes\n      var handler = this._recallEventHandler(this, eventName, node, methodName);\n      if (handler) {\n        this._unlisten(node, eventName, handler);\n        handler._listening = false;\n      }\n    },\n\n    _listen: function(node, eventName, handler) {\n      node.addEventListener(eventName, handler);\n    },\n\n    _unlisten: function(node, eventName, handler) {\n      node.removeEventListener(eventName, handler);\n    }\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard/events.html\n// module id = 47\n// module chunks = 0","/*__wc__loader*/\n\n(function() {\n\n  'use strict';\n\n  var wrap = Polymer.DomApi.wrap;\n\n  // detect native touch action support\n  var HAS_NATIVE_TA = typeof document.head.style.touchAction === 'string';\n  var GESTURE_KEY = '__polymerGestures';\n  var HANDLED_OBJ = '__polymerGesturesHandled';\n  var TOUCH_ACTION = '__polymerGesturesTouchAction';\n  // radius for tap and track\n  var TAP_DISTANCE = 25;\n  var TRACK_DISTANCE = 5;\n  // number of last N track positions to keep\n  var TRACK_LENGTH = 2;\n\n  // Disabling \"mouse\" handlers for 2500ms is enough\n  var MOUSE_TIMEOUT = 2500;\n  var MOUSE_EVENTS = ['mousedown', 'mousemove', 'mouseup', 'click'];\n  // an array of bitmask values for mapping MouseEvent.which to MouseEvent.buttons\n  var MOUSE_WHICH_TO_BUTTONS = [0, 1, 4, 2];\n  var MOUSE_HAS_BUTTONS = (function() {\n    try {\n      return new MouseEvent('test', {buttons: 1}).buttons === 1;\n    } catch (e) {\n      return false;\n    }\n  })();\n\n  /* eslint no-empty: [\"error\", { \"allowEmptyCatch\": true }] */\n  // check for passive event listeners\n  var SUPPORTS_PASSIVE = false;\n  (function() {\n    try {\n      var opts = Object.defineProperty({}, 'passive', {get: function() {SUPPORTS_PASSIVE = true;}})\n      window.addEventListener('test', null, opts);\n      window.removeEventListener('test', null, opts);\n    } catch(e) {}\n  })();\n\n  // Check for touch-only devices\n  var IS_TOUCH_ONLY = navigator.userAgent.match(/iP(?:[oa]d|hone)|Android/);\n\n  // touch will make synthetic mouse events\n  // `preventDefault` on touchend will cancel them,\n  // but this breaks `<input>` focus and link clicks\n  // disable mouse handlers for MOUSE_TIMEOUT ms after\n  // a touchend to ignore synthetic mouse events\n  var mouseCanceller = function(mouseEvent) {\n    // Check for sourceCapabilities, used to distinguish synthetic events\n    // if mouseEvent did not come from a device that fires touch events,\n    // it was made by a real mouse and should be counted\n    // http://wicg.github.io/InputDeviceCapabilities/#dom-inputdevicecapabilities-firestouchevents\n    var sc = mouseEvent.sourceCapabilities;\n    if (sc && !sc.firesTouchEvents) {\n      return;\n    }\n    // skip synthetic mouse events\n    mouseEvent[HANDLED_OBJ] = {skip: true};\n    // disable \"ghost clicks\"\n    if (mouseEvent.type === 'click') {\n      var path = Polymer.dom(mouseEvent).path;\n      for (var i = 0; i < path.length; i++) {\n        if (path[i] === POINTERSTATE.mouse.target) {\n          return;\n        }\n      }\n      mouseEvent.preventDefault();\n      mouseEvent.stopPropagation();\n    }\n  };\n\n  function setupTeardownMouseCanceller(setup) {\n    var events = IS_TOUCH_ONLY ? ['click'] : MOUSE_EVENTS;\n    for (var i = 0, en; i < events.length; i++) {\n      en = events[i];\n      if (setup) {\n        document.addEventListener(en, mouseCanceller, true);\n      } else {\n        document.removeEventListener(en, mouseCanceller, true);\n      }\n    }\n  }\n\n  function ignoreMouse(ev) {\n    if (!POINTERSTATE.mouse.mouseIgnoreJob) {\n      setupTeardownMouseCanceller(true);\n    }\n    var unset = function() {\n      setupTeardownMouseCanceller();\n      POINTERSTATE.mouse.target = null;\n      POINTERSTATE.mouse.mouseIgnoreJob = null;\n    };\n    POINTERSTATE.mouse.target = Polymer.dom(ev).rootTarget;\n    POINTERSTATE.mouse.mouseIgnoreJob =\n      Polymer.Debounce(POINTERSTATE.mouse.mouseIgnoreJob, unset, MOUSE_TIMEOUT);\n  }\n\n  function hasLeftMouseButton(ev) {\n    var type = ev.type;\n    // exit early if the event is not a mouse event\n    if (MOUSE_EVENTS.indexOf(type) === -1) {\n      return false;\n    }\n    // ev.button is not reliable for mousemove (0 is overloaded as both left button and no buttons)\n    // instead we use ev.buttons (bitmask of buttons) or fall back to ev.which (deprecated, 0 for no buttons, 1 for left button)\n    if (type === 'mousemove') {\n      // allow undefined for testing events\n      var buttons = ev.buttons === undefined ? 1 : ev.buttons;\n      if ((ev instanceof window.MouseEvent) && !MOUSE_HAS_BUTTONS) {\n        buttons = MOUSE_WHICH_TO_BUTTONS[ev.which] || 0;\n      }\n      // buttons is a bitmask, check that the left button bit is set (1)\n      return Boolean(buttons & 1);\n    } else {\n      // allow undefined for testing events\n      var button = ev.button === undefined ? 0 : ev.button;\n      // ev.button is 0 in mousedown/mouseup/click for left button activation\n      return button === 0;\n    }\n  }\n\n  function isSyntheticClick(ev) {\n    if (ev.type === 'click') {\n      // ev.detail is 0 for HTMLElement.click in most browsers\n      if (ev.detail === 0) {\n        return true;\n      }\n      // in the worst case, check that the x/y position of the click is within\n      // the bounding box of the target of the event\n      // Thanks IE 10 >:(\n      var t = Gestures.findOriginalTarget(ev);\n      var bcr = t.getBoundingClientRect();\n      // use page x/y to account for scrolling\n      var x = ev.pageX, y = ev.pageY;\n      // ev is a synthetic click if the position is outside the bounding box of the target\n      return !((x >= bcr.left && x <= bcr.right) && (y >= bcr.top && y <= bcr.bottom));\n    }\n    return false;\n  }\n\n  var POINTERSTATE = {\n    mouse: {\n      target: null,\n      mouseIgnoreJob: null\n    },\n    touch: {\n      x: 0,\n      y: 0,\n      id: -1,\n      scrollDecided: false\n    }\n  };\n\n  function firstTouchAction(ev) {\n    var path = Polymer.dom(ev).path;\n    var ta = 'auto';\n    for (var i = 0, n; i < path.length; i++) {\n      n = path[i];\n      if (n[TOUCH_ACTION]) {\n        ta = n[TOUCH_ACTION];\n        break;\n      }\n    }\n    return ta;\n  }\n\n  function trackDocument(stateObj, movefn, upfn) {\n    stateObj.movefn = movefn;\n    stateObj.upfn = upfn;\n    document.addEventListener('mousemove', movefn);\n    document.addEventListener('mouseup', upfn);\n  }\n\n  function untrackDocument(stateObj) {\n    document.removeEventListener('mousemove', stateObj.movefn);\n    document.removeEventListener('mouseup', stateObj.upfn);\n    stateObj.movefn = null;\n    stateObj.upfn = null;\n  }\n\n  // use a document-wide touchend listener to start the ghost-click prevention mechanism\n  // Use passive event listeners, if supported, to not affect scrolling performance\n  document.addEventListener('touchend', ignoreMouse, SUPPORTS_PASSIVE ? {passive: true} : false);\n\n  var Gestures = {\n    gestures: {},\n    recognizers: [],\n\n    deepTargetFind: function(x, y) {\n      var node = document.elementFromPoint(x, y);\n      var next = node;\n      // this code path is only taken when native ShadowDOM is used\n      // if there is a shadowroot, it may have a node at x/y\n      // if there is not a shadowroot, exit the loop\n      while (next && next.shadowRoot) {\n        // if there is a node at x/y in the shadowroot, look deeper\n        next = next.shadowRoot.elementFromPoint(x, y);\n        if (next) {\n          node = next;\n        }\n      }\n      return node;\n    },\n    // a cheaper check than Polymer.dom(ev).path[0];\n    findOriginalTarget: function(ev) {\n      // shadowdom\n      if (ev.path) {\n        return ev.path[0];\n      }\n      // shadydom\n      return ev.target;\n    },\n    handleNative: function(ev) {\n      var handled;\n      var type = ev.type;\n      var node = wrap(ev.currentTarget);\n      var gobj = node[GESTURE_KEY];\n      if (!gobj) {\n        return;\n      }\n      var gs = gobj[type];\n      if (!gs) {\n        return;\n      }\n      if (!ev[HANDLED_OBJ]) {\n        ev[HANDLED_OBJ] = {};\n        if (type.slice(0, 5) === 'touch') {\n          var t = ev.changedTouches[0];\n          if (type === 'touchstart') {\n            // only handle the first finger\n            if (ev.touches.length === 1) {\n              POINTERSTATE.touch.id = t.identifier;\n            }\n          }\n          if (POINTERSTATE.touch.id !== t.identifier) {\n            return;\n          }\n          if (!HAS_NATIVE_TA) {\n            if (type === 'touchstart' || type === 'touchmove') {\n              Gestures.handleTouchAction(ev);\n            }\n          }\n        }\n      }\n      handled = ev[HANDLED_OBJ];\n      // used to ignore synthetic mouse events\n      if (handled.skip) {\n        return;\n      }\n      var recognizers = Gestures.recognizers;\n      // reset recognizer state\n      for (var i = 0, r; i < recognizers.length; i++) {\n        r = recognizers[i];\n        if (gs[r.name] && !handled[r.name]) {\n          if (r.flow && r.flow.start.indexOf(ev.type) > -1 && r.reset) {\n            r.reset();\n          }\n        }\n      }\n      // enforce gesture recognizer order\n      for (i = 0, r; i < recognizers.length; i++) {\n        r = recognizers[i];\n        if (gs[r.name] && !handled[r.name]) {\n          handled[r.name] = true;\n          r[type](ev);\n        }\n      }\n    },\n\n    handleTouchAction: function(ev) {\n      var t = ev.changedTouches[0];\n      var type = ev.type;\n      if (type === 'touchstart') {\n        POINTERSTATE.touch.x = t.clientX;\n        POINTERSTATE.touch.y = t.clientY;\n        POINTERSTATE.touch.scrollDecided = false;\n      } else if (type === 'touchmove') {\n        if (POINTERSTATE.touch.scrollDecided) {\n          return;\n        }\n        POINTERSTATE.touch.scrollDecided = true;\n        var ta = firstTouchAction(ev);\n        var prevent = false;\n        var dx = Math.abs(POINTERSTATE.touch.x - t.clientX);\n        var dy = Math.abs(POINTERSTATE.touch.y - t.clientY);\n        if (!ev.cancelable) {\n          // scrolling is happening\n        } else if (ta === 'none') {\n          prevent = true;\n        } else if (ta === 'pan-x') {\n          prevent = dy > dx;\n        } else if (ta === 'pan-y') {\n          prevent = dx > dy;\n        }\n        if (prevent) {\n          ev.preventDefault();\n        } else {\n          Gestures.prevent('track');\n        }\n      }\n    },\n\n    // automate the event listeners for the native events\n    add: function(node, evType, handler) {\n      // SD polyfill: handle case where `node` is unwrapped, like `document`\n      node = wrap(node);\n      var recognizer = this.gestures[evType];\n      var deps = recognizer.deps;\n      var name = recognizer.name;\n      var gobj = node[GESTURE_KEY];\n      if (!gobj) {\n        node[GESTURE_KEY] = gobj = {};\n      }\n      for (var i = 0, dep, gd; i < deps.length; i++) {\n        dep = deps[i];\n        // don't add mouse handlers on iOS because they cause gray selection overlays\n        if (IS_TOUCH_ONLY && MOUSE_EVENTS.indexOf(dep) > -1 && dep !== 'click') {\n          continue;\n        }\n        gd = gobj[dep];\n        if (!gd) {\n          gobj[dep] = gd = {_count: 0};\n        }\n        if (gd._count === 0) {\n          node.addEventListener(dep, this.handleNative);\n        }\n        gd[name] = (gd[name] || 0) + 1;\n        gd._count = (gd._count || 0) + 1;\n      }\n      node.addEventListener(evType, handler);\n      if (recognizer.touchAction) {\n        this.setTouchAction(node, recognizer.touchAction);\n      }\n    },\n\n    // automate event listener removal for native events\n    remove: function(node, evType, handler) {\n      // SD polyfill: handle case where `node` is unwrapped, like `document`\n      node = wrap(node);\n      var recognizer = this.gestures[evType];\n      var deps = recognizer.deps;\n      var name = recognizer.name;\n      var gobj = node[GESTURE_KEY];\n      if (gobj) {\n        for (var i = 0, dep, gd; i < deps.length; i++) {\n          dep = deps[i];\n          gd = gobj[dep];\n          if (gd && gd[name]) {\n            gd[name] = (gd[name] || 1) - 1;\n            gd._count = (gd._count || 1) - 1;\n            if (gd._count === 0) {\n              node.removeEventListener(dep, this.handleNative);\n            }\n          }\n        }\n      }\n      node.removeEventListener(evType, handler);\n    },\n\n    register: function(recog) {\n      this.recognizers.push(recog);\n      for (var i = 0; i < recog.emits.length; i++) {\n        this.gestures[recog.emits[i]] = recog;\n      }\n    },\n\n    findRecognizerByEvent: function(evName) {\n      for (var i = 0, r; i < this.recognizers.length; i++) {\n        r = this.recognizers[i];\n        for (var j = 0, n; j < r.emits.length; j++) {\n          n = r.emits[j];\n          if (n === evName) {\n            return r;\n          }\n        }\n      }\n      return null;\n    },\n\n    // set scrolling direction on node to check later on first move\n    // must call this before adding event listeners!\n    setTouchAction: function(node, value) {\n      if (HAS_NATIVE_TA) {\n        node.style.touchAction = value;\n      }\n      node[TOUCH_ACTION] = value;\n    },\n\n    fire: function(target, type, detail) {\n      var ev = Polymer.Base.fire(type, detail, {\n        node: target,\n        bubbles: true,\n        cancelable: true\n      });\n\n      // forward `preventDefault` in a clean way\n      if (ev.defaultPrevented) {\n        var preventer = detail.preventer || detail.sourceEvent;\n        if (preventer && preventer.preventDefault) {\n          preventer.preventDefault();\n        }\n      }\n    },\n\n    prevent: function(evName) {\n      var recognizer = this.findRecognizerByEvent(evName);\n      if (recognizer.info) {\n        recognizer.info.prevent = true;\n      }\n    },\n    /**\n     * Reset the 2500ms timeout on processing mouse input after detecting touch input.\n     *\n     * Touch inputs create synthesized mouse inputs anywhere from 0 to 2000ms after the touch.\n     * This method should only be called during testing with simulated touch inputs.\n     * Calling this method in production may cause duplicate taps or other gestures.\n     *\n     * @method resetMouseCanceller\n     */\n    resetMouseCanceller: function() {\n      if (POINTERSTATE.mouse.mouseIgnoreJob) {\n        POINTERSTATE.mouse.mouseIgnoreJob.complete();\n      }\n    }\n  };\n\n  Gestures.register({\n    name: 'downup',\n    deps: ['mousedown', 'touchstart', 'touchend'],\n    flow: {\n      start: ['mousedown', 'touchstart'],\n      end: ['mouseup', 'touchend']\n    },\n    emits: ['down', 'up'],\n\n    info: {\n      movefn: null,\n      upfn: null\n    },\n\n    reset: function() {\n      untrackDocument(this.info);\n    },\n\n    mousedown: function(e) {\n      if (!hasLeftMouseButton(e)) {\n        return;\n      }\n      var t = Gestures.findOriginalTarget(e);\n      var self = this;\n      var movefn = function movefn(e) {\n        if (!hasLeftMouseButton(e)) {\n          self.fire('up', t, e);\n          untrackDocument(self.info);\n        }\n      };\n      var upfn = function upfn(e) {\n        if (hasLeftMouseButton(e)) {\n          self.fire('up', t, e);\n        }\n        untrackDocument(self.info);\n      };\n      trackDocument(this.info, movefn, upfn);\n      this.fire('down', t, e);\n    },\n    touchstart: function(e) {\n      this.fire('down', Gestures.findOriginalTarget(e), e.changedTouches[0], e);\n    },\n    touchend: function(e) {\n      this.fire('up', Gestures.findOriginalTarget(e), e.changedTouches[0], e);\n    },\n    fire: function(type, target, event, preventer) {\n      Gestures.fire(target, type, {\n        x: event.clientX,\n        y: event.clientY,\n        sourceEvent: event,\n        preventer: preventer,\n        prevent: function(e) {\n          return Gestures.prevent(e);\n        }\n      });\n    }\n  });\n\n  Gestures.register({\n    name: 'track',\n    touchAction: 'none',\n    deps: ['mousedown', 'touchstart', 'touchmove', 'touchend'],\n    flow: {\n      start: ['mousedown', 'touchstart'],\n      end: ['mouseup', 'touchend']\n    },\n    emits: ['track'],\n\n    info: {\n      x: 0,\n      y: 0,\n      state: 'start',\n      started: false,\n      moves: [],\n      addMove: function(move) {\n        if (this.moves.length > TRACK_LENGTH) {\n          this.moves.shift();\n        }\n        this.moves.push(move);\n      },\n      movefn: null,\n      upfn: null,\n      prevent: false\n    },\n\n    reset: function() {\n      this.info.state = 'start';\n      this.info.started = false;\n      this.info.moves = [];\n      this.info.x = 0;\n      this.info.y = 0;\n      this.info.prevent = false;\n      untrackDocument(this.info);\n    },\n\n    hasMovedEnough: function(x, y) {\n      if (this.info.prevent) {\n        return false;\n      }\n      if (this.info.started) {\n        return true;\n      }\n      var dx = Math.abs(this.info.x - x);\n      var dy = Math.abs(this.info.y - y);\n      return (dx >= TRACK_DISTANCE || dy >= TRACK_DISTANCE);\n    },\n\n    mousedown: function(e) {\n      if (!hasLeftMouseButton(e)) {\n        return;\n      }\n      var t = Gestures.findOriginalTarget(e);\n      var self = this;\n      var movefn = function movefn(e) {\n        var x = e.clientX, y = e.clientY;\n        if (self.hasMovedEnough(x, y)) {\n          // first move is 'start', subsequent moves are 'move', mouseup is 'end'\n          self.info.state = self.info.started ? (e.type === 'mouseup' ? 'end' : 'track') : 'start';\n          if (self.info.state === 'start') {\n            // if and only if tracking, always prevent tap\n            Gestures.prevent('tap');\n          }\n          self.info.addMove({x: x, y: y});\n          if (!hasLeftMouseButton(e)) {\n            // always fire \"end\"\n            self.info.state = 'end';\n            untrackDocument(self.info);\n          }\n          self.fire(t, e);\n          self.info.started = true;\n        }\n      };\n      var upfn = function upfn(e) {\n        if (self.info.started) {\n          movefn(e);\n        }\n\n        // remove the temporary listeners\n        untrackDocument(self.info);\n      };\n      // add temporary document listeners as mouse retargets\n      trackDocument(this.info, movefn, upfn);\n      this.info.x = e.clientX;\n      this.info.y = e.clientY;\n    },\n\n    touchstart: function(e) {\n      var ct = e.changedTouches[0];\n      this.info.x = ct.clientX;\n      this.info.y = ct.clientY;\n    },\n\n    touchmove: function(e) {\n      var t = Gestures.findOriginalTarget(e);\n      var ct = e.changedTouches[0];\n      var x = ct.clientX, y = ct.clientY;\n      if (this.hasMovedEnough(x, y)) {\n        if (this.info.state === 'start') {\n          // if and only if tracking, always prevent tap\n          Gestures.prevent('tap');\n        }\n        this.info.addMove({x: x, y: y});\n        this.fire(t, ct);\n        this.info.state = 'track';\n        this.info.started = true;\n      }\n    },\n\n    touchend: function(e) {\n      var t = Gestures.findOriginalTarget(e);\n      var ct = e.changedTouches[0];\n      // only trackend if track was started and not aborted\n      if (this.info.started) {\n        // reset started state on up\n        this.info.state = 'end';\n        this.info.addMove({x: ct.clientX, y: ct.clientY});\n        this.fire(t, ct, e);\n      }\n    },\n\n    fire: function(target, touch, preventer) {\n      var secondlast = this.info.moves[this.info.moves.length - 2];\n      var lastmove = this.info.moves[this.info.moves.length - 1];\n      var dx = lastmove.x - this.info.x;\n      var dy = lastmove.y - this.info.y;\n      var ddx, ddy = 0;\n      if (secondlast) {\n        ddx = lastmove.x - secondlast.x;\n        ddy = lastmove.y - secondlast.y;\n      }\n      return Gestures.fire(target, 'track', {\n        state: this.info.state,\n        x: touch.clientX,\n        y: touch.clientY,\n        dx: dx,\n        dy: dy,\n        ddx: ddx,\n        ddy: ddy,\n        sourceEvent: touch,\n        preventer: preventer,\n        hover: function() {\n          return Gestures.deepTargetFind(touch.clientX, touch.clientY);\n        }\n      });\n    }\n\n  });\n\n  Gestures.register({\n    name: 'tap',\n    deps: ['mousedown', 'click', 'touchstart', 'touchend'],\n    flow: {\n      start: ['mousedown', 'touchstart'],\n      end: ['click', 'touchend']\n    },\n    emits: ['tap'],\n    info: {\n      x: NaN,\n      y: NaN,\n      prevent: false\n    },\n    reset: function() {\n      this.info.x = NaN;\n      this.info.y = NaN;\n      this.info.prevent = false;\n    },\n    save: function(e) {\n      this.info.x = e.clientX;\n      this.info.y = e.clientY;\n    },\n\n    mousedown: function(e) {\n      if (hasLeftMouseButton(e)) {\n        this.save(e);\n      }\n    },\n    click: function(e) {\n      if (hasLeftMouseButton(e)) {\n        this.forward(e);\n      }\n    },\n\n    touchstart: function(e) {\n      this.save(e.changedTouches[0], e);\n    },\n    touchend: function(e) {\n      this.forward(e.changedTouches[0], e);\n    },\n\n    forward: function(e, preventer) {\n      var dx = Math.abs(e.clientX - this.info.x);\n      var dy = Math.abs(e.clientY - this.info.y);\n      var t = Gestures.findOriginalTarget(e);\n      // dx,dy can be NaN if `click` has been simulated and there was no `down` for `start`\n      if (isNaN(dx) || isNaN(dy) || (dx <= TAP_DISTANCE && dy <= TAP_DISTANCE) || isSyntheticClick(e)) {\n        // prevent taps from being generated if an event has canceled them\n        if (!this.info.prevent) {\n          Gestures.fire(t, 'tap', {\n            x: e.clientX,\n            y: e.clientY,\n            sourceEvent: e,\n            preventer: preventer\n          });\n        }\n      }\n    }\n  });\n\n  var DIRECTION_MAP = {\n    x: 'pan-x',\n    y: 'pan-y',\n    none: 'none',\n    all: 'auto'\n  };\n\n  Polymer.Base._addFeature({\n\n    _setupGestures: function() {\n      this.__polymerGestures = null;\n    },\n\n    // override _listen to handle gestures\n    _listen: function(node, eventName, handler) {\n      if (Gestures.gestures[eventName]) {\n        Gestures.add(node, eventName, handler);\n      } else {\n        node.addEventListener(eventName, handler);\n      }\n    },\n    // override _unlisten to handle gestures\n    _unlisten: function(node, eventName, handler) {\n      if (Gestures.gestures[eventName]) {\n        Gestures.remove(node, eventName, handler);\n      } else {\n        node.removeEventListener(eventName, handler);\n      }\n    },\n    /**\n     * Override scrolling behavior to all direction, one direction, or none.\n     *\n     * Valid scroll directions:\n     *   - 'all': scroll in any direction\n     *   - 'x': scroll only in the 'x' direction\n     *   - 'y': scroll only in the 'y' direction\n     *   - 'none': disable scrolling for this node\n     *\n     * @method setScrollDirection\n     * @param {String=} direction Direction to allow scrolling\n     * Defaults to `all`.\n     * @param {HTMLElement=} node Element to apply scroll direction setting.\n     * Defaults to `this`.\n     */\n    setScrollDirection: function(direction, node) {\n      node = node || this;\n      Gestures.setTouchAction(node, DIRECTION_MAP[direction] || 'auto');\n    }\n  });\n\n  // export\n\n  Polymer.Gestures = Gestures;\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard/gestures.html\n// module id = 48\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/async.html');\n\nrequire('../lib/settings.html');\n\nrequire('../lib/debounce.html');\n\n\n(function() {\n\n  'use strict';\n\n  Polymer.Base._addFeature({\n\n    /**\n     * Convenience method to run `querySelector` on this local DOM scope.\n     *\n     * This function calls `Polymer.dom(this.root).querySelector(slctr)`.\n     *\n     * @method $$\n     * @param {string} slctr Selector to run on this local DOM scope\n     * @return {Element} Element found by the selector, or null if not found.\n     */\n    $$: function(slctr) {\n      return Polymer.dom(this.root).querySelector(slctr);\n    },\n\n    /**\n     * Toggles a CSS class on or off.\n     *\n     * @method toggleClass\n     * @param {String} name CSS class name\n     * @param {boolean=} bool Boolean to force the class on or off.\n     *    When unspecified, the state of the class will be reversed.\n     * @param {HTMLElement=} node Node to target.  Defaults to `this`.\n     */\n    toggleClass: function(name, bool, node) {\n      node = node || this;\n      if (arguments.length == 1) {\n        bool = !node.classList.contains(name);\n      }\n      if (bool) {\n        Polymer.dom(node).classList.add(name);\n      } else {\n        Polymer.dom(node).classList.remove(name);\n      }\n    },\n\n    /**\n     * Toggles an HTML attribute on or off.\n     *\n     * @method toggleAttribute\n     * @param {String} name HTML attribute name\n     * @param {boolean=} bool Boolean to force the attribute on or off.\n     *    When unspecified, the state of the attribute will be reversed.\n     * @param {HTMLElement=} node Node to target.  Defaults to `this`.\n     */\n    toggleAttribute: function(name, bool, node) {\n      node = node || this;\n      if (arguments.length == 1) {\n        bool = !node.hasAttribute(name);\n      }\n      if (bool) {\n        Polymer.dom(node).setAttribute(name, '');\n      } else {\n        Polymer.dom(node).removeAttribute(name);\n      }\n    },\n\n    /**\n     * Removes a class from one node, and adds it to another.\n     *\n     * @method classFollows\n     * @param {String} name CSS class name\n     * @param {HTMLElement} toElement New element to add the class to.\n     * @param {HTMLElement} fromElement Old element to remove the class from.\n     */\n    classFollows: function(name, toElement, fromElement) {\n      if (fromElement) {\n        Polymer.dom(fromElement).classList.remove(name);\n      }\n      if (toElement) {\n        Polymer.dom(toElement).classList.add(name);\n      }\n    },\n\n    /**\n     * Removes an HTML attribute from one node, and adds it to another.\n     *\n     * @method attributeFollows\n     * @param {String} name HTML attribute name\n     * @param {HTMLElement} toElement New element to add the attribute to.\n     * @param {HTMLElement} fromElement Old element to remove the attribute from.\n     */\n    attributeFollows: function(name, toElement, fromElement) {\n      if (fromElement) {\n        Polymer.dom(fromElement).removeAttribute(name);\n      }\n      if (toElement) {\n        Polymer.dom(toElement).setAttribute(name, '');\n      }\n    },\n\n    /**\n     * Returns a list of nodes that are the effective childNodes. The effective\n     * childNodes list is the same as the element's childNodes except that\n     * any `<content>` elements are replaced with the list of nodes distributed\n     * to the `<content>`, the result of its `getDistributedNodes` method.\n     *\n     * @method getEffectiveChildNodes\n     * @return {Array<Node>} List of effctive child nodes.\n     */\n    getEffectiveChildNodes: function() {\n      return Polymer.dom(this).getEffectiveChildNodes();\n    },\n\n    /**\n     * Returns a list of elements that are the effective children. The effective\n     * children list is the same as the element's children except that\n     * any `<content>` elements are replaced with the list of elements\n     * distributed to the `<content>`.\n     *\n     * @method getEffectiveChildren\n     * @return {Array<Node>} List of effctive children.\n     */\n    getEffectiveChildren: function() {\n      var list = Polymer.dom(this).getEffectiveChildNodes();\n      return list.filter(function(n) {\n        return (n.nodeType === Node.ELEMENT_NODE);\n      });\n    },\n\n    /**\n     * Returns a string of text content that is the concatenation of the\n     * text content's of the element's effective childNodes (the elements\n     * returned by <a href=\"#getEffectiveChildNodes>getEffectiveChildNodes</a>.\n     *\n     * @method getEffectiveTextContent\n     * @return {Array<Node>} List of effctive children.\n     */\n    getEffectiveTextContent: function() {\n      var cn = this.getEffectiveChildNodes();\n      var tc = [];\n      for (var i=0, c; (c = cn[i]); i++) {\n        if (c.nodeType !== Node.COMMENT_NODE) {\n          tc.push(Polymer.dom(c).textContent);\n        }\n      }\n      return tc.join('');\n    },\n\n    queryEffectiveChildren: function(slctr) {\n      var e$ = Polymer.dom(this).queryDistributedElements(slctr);\n      return e$ && e$[0];\n    },\n\n    queryAllEffectiveChildren: function(slctr) {\n      return Polymer.dom(this).queryDistributedElements(slctr);\n    },\n\n    /**\n     * Returns a list of nodes distributed to this element's `<content>`.\n     *\n     * If this element contains more than one `<content>` in its local DOM,\n     * an optional selector may be passed to choose the desired content.\n     *\n     * @method getContentChildNodes\n     * @param {String=} slctr CSS selector to choose the desired\n     *   `<content>`.  Defaults to `content`.\n     * @return {Array<Node>} List of distributed nodes for the `<content>`.\n     */\n    getContentChildNodes: function(slctr) {\n      var content = Polymer.dom(this.root).querySelector(slctr || 'content');\n      return content ? Polymer.dom(content).getDistributedNodes() : [];\n    },\n\n    /**\n     * Returns a list of element children distributed to this element's\n     * `<content>`.\n     *\n     * If this element contains more than one `<content>` in its\n     * local DOM, an optional selector may be passed to choose the desired\n     * content.  This method differs from `getContentChildNodes` in that only\n     * elements are returned.\n     *\n     * @method getContentChildNodes\n     * @param {String=} slctr CSS selector to choose the desired\n     *   `<content>`.  Defaults to `content`.\n     * @return {Array<HTMLElement>} List of distributed nodes for the\n     *   `<content>`.\n     */\n    getContentChildren: function(slctr) {\n      return this.getContentChildNodes(slctr).filter(function(n) {\n        return (n.nodeType === Node.ELEMENT_NODE);\n      });\n    },\n\n\n    /**\n     * Dispatches a custom event with an optional detail value.\n     *\n     * @method fire\n     * @param {String} type Name of event type.\n     * @param {*=} detail Detail value containing event-specific\n     *   payload.\n     * @param {Object=} options Object specifying options.  These may include:\n     *  `bubbles` (boolean, defaults to `true`),\n     *  `cancelable` (boolean, defaults to false), and\n     *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n     * @return {CustomEvent} The new event that was fired.\n     */\n    fire: function(type, detail, options) {\n      options = options || Polymer.nob;\n      var node = options.node || this;\n      detail = (detail === null || detail === undefined) ? {} : detail;\n      var bubbles = options.bubbles === undefined ? true : options.bubbles;\n      var cancelable = Boolean(options.cancelable);\n      var useCache = options._useCache;\n      var event = this._getEvent(type, bubbles, cancelable, useCache);\n      event.detail = detail;\n      if (useCache) {\n        this.__eventCache[type] = null;\n      }\n      node.dispatchEvent(event);\n      if (useCache) {\n        this.__eventCache[type] = event;\n      }\n      return event;\n    },\n\n    __eventCache: {},\n\n    // NOTE: We optionally cache event objects for efficiency during high\n    // freq. opts. This option cannot be used for events which may have\n    // `stopPropagation` called on them. On Chrome and Safari (but not FF)\n    // if `stopPropagation` is called, the event cannot be reused. It does not\n    // dispatch again.\n    _getEvent: function(type, bubbles, cancelable, useCache) {\n      var event = useCache && this.__eventCache[type];\n      if (!event || ((event.bubbles != bubbles) ||\n          (event.cancelable != cancelable))) {\n        event = new Event(type, {\n          bubbles: Boolean(bubbles),\n          cancelable: cancelable\n        });\n      }\n      return event;\n    },\n\n\n    /**\n     * Runs a callback function asyncronously.\n     *\n     * By default (if no waitTime is specified), async callbacks are run at\n     * microtask timing, which will occur before paint.\n     *\n     * @method async\n     * @param {Function} callback The callback function to run, bound to `this`.\n     * @param {number=} waitTime Time to wait before calling the\n     *   `callback`.  If unspecified or 0, the callback will be run at microtask\n     *   timing (before paint).\n     * @return {number} Handle that may be used to cancel the async job.\n     */\n    async: function(callback, waitTime) {\n      var self = this;\n      return Polymer.Async.run(function() {\n        callback.call(self);\n      }, waitTime);\n    },\n\n    /**\n     * Cancels an async operation started with `async`.\n     *\n     * @method cancelAsync\n     * @param {number} handle Handle returned from original `async` call to\n     *   cancel.\n     */\n    cancelAsync: function(handle) {\n      Polymer.Async.cancel(handle);\n    },\n\n    /**\n     * Removes an item from an array, if it exists.\n     *\n     * If the array is specified by path, a change notification is\n     * generated, so that observers, data bindings and computed\n     * properties watching that path can update.\n     *\n     * If the array is passed directly, **no change\n     * notification is generated**.\n     *\n     * @method arrayDelete\n     * @param {String|Array} path Path to array from which to remove the item\n     *   (or the array itself).\n     * @param {any} item Item to remove.\n     * @return {Array} Array containing item removed.\n     */\n    arrayDelete: function(path, item) {\n      var index;\n      if (Array.isArray(path)) {\n        index = path.indexOf(item);\n        if (index >= 0) {\n          return path.splice(index, 1);\n        }\n      } else {\n        var arr = this._get(path);\n        index = arr.indexOf(item);\n        if (index >= 0) {\n          return this.splice(path, index, 1);\n        }\n      }\n    },\n\n    /**\n     * Cross-platform helper for setting an element's CSS `transform` property.\n     *\n     * @method transform\n     * @param {String} transform Transform setting.\n     * @param {HTMLElement=} node Element to apply the transform to.\n     * Defaults to `this`\n     */\n    transform: function(transform, node) {\n      node = node || this;\n      node.style.webkitTransform = transform;\n      node.style.transform = transform;\n    },\n\n    /**\n     * Cross-platform helper for setting an element's CSS `translate3d`\n     * property.\n     *\n     * @method translate3d\n     * @param {number} x X offset.\n     * @param {number} y Y offset.\n     * @param {number} z Z offset.\n     * @param {HTMLElement=} node Element to apply the transform to.\n     * Defaults to `this`.\n     */\n    translate3d: function(x, y, z, node) {\n      node = node || this;\n      this.transform('translate3d(' + x + ',' + y + ',' + z + ')', node);\n    },\n\n    /**\n     * Convenience method for importing an HTML document imperatively.\n     *\n     * This method creates a new `<link rel=\"import\">` element with\n     * the provided URL and appends it to the document to start loading.\n     * In the `onload` callback, the `import` property of the `link`\n     * element will contain the imported document contents.\n     *\n     * @method importHref\n     * @param {string} href URL to document to load.\n     * @param {Function} onload Callback to notify when an import successfully\n     *   loaded.\n     * @param {Function} onerror Callback to notify when an import\n     *   unsuccessfully loaded.\n     * @param {boolean} optAsync True if the import should be loaded `async`.\n     *   Defaults to `false`.\n     * @return {HTMLLinkElement} The link element for the URL to be loaded.\n     */\n    importHref: function(href, onload, onerror, optAsync) {\n      var link = document.createElement('link');\n      link.rel = 'import';\n      link.href = href;\n      var list = Polymer.Base.importHref.imported = \n        Polymer.Base.importHref.imported || {};\n      var cached = list[link.href];\n      var imprt = cached || link;\n      var self = this;\n      var loadListener = function(e) {\n        e.target.__firedLoad = true;\n        e.target.removeEventListener('load', loadListener);\n        e.target.removeEventListener('error', errorListener);\n        return onload.call(self, e);\n      };\n      var errorListener = function(e) {\n        e.target.__firedError = true;\n        e.target.removeEventListener('load', loadListener);\n        e.target.removeEventListener('error', errorListener);\n        return onerror.call(self, e);\n      };\n      if (onload) {\n        imprt.addEventListener('load', loadListener);\n      }\n      if (onerror) {\n        imprt.addEventListener('error', errorListener);\n      }\n      // if already loaded/erroed, fire 'fake' load/error event\n      if (cached) {\n        if (cached.__firedLoad) {\n          cached.dispatchEvent(new Event('load'));\n        }\n        if (cached.__firedError) {\n          cached.dispatchEvent(new Event('error'));\n        }\n      // otherwise put in dom!\n      } else {\n        list[link.href] = link;\n        optAsync = Boolean(optAsync);\n        if (optAsync) {\n          link.setAttribute('async', '');\n        }\n        document.head.appendChild(link);\n      }\n      return imprt;\n    },\n\n    /**\n     * Convenience method for creating an element and configuring it.\n     *\n     * @method create\n     * @param {string} tag HTML element tag to create.\n     * @param {Object} props Object of properties to configure on the\n     *    instance.\n     * @return {Element} Newly created and configured element.\n     */\n    create: function(tag, props) {\n      var elt = document.createElement(tag);\n      if (props) {\n        for (var n in props) {\n          elt[n] = props[n];\n        }\n      }\n      return elt;\n    },\n\n    /**\n     * Checks whether an element is in this element's light DOM tree.\n     *\n     * @method isLightDescendant\n     * @param {?Node} node The element to be checked.\n     * @return {Boolean} true if node is in this element's light DOM tree.\n     */\n    isLightDescendant: function(node) {\n      return this !== node && this.contains(node) &&\n          Polymer.dom(this).getOwnerRoot() === Polymer.dom(node).getOwnerRoot();\n    },\n\n    /**\n     * Checks whether an element is in this element's local DOM tree.\n     *\n     * @method isLocalDescendant\n     * @param {HTMLElement=} node The element to be checked.\n     * @return {Boolean} true if node is in this element's local DOM tree.\n     */\n    isLocalDescendant: function(node) {\n      return this.root === Polymer.dom(node).getOwnerRoot();\n    }\n\n  });\n\n  /*\n    We patch importHref under the CE polyfill for 2 separate reasons:\n    (1) performance optimization: CE registrations upgrade the entire document\n    tree including imports. Therefore if an import is loaded every element \n    registered will upgrade the entire doc tree. This is $ and is optimized \n    via batching to occur once at startup (before WebComponentsReady). We\n    override importHref here so that we can batch upgrades until after the \n    import has loded, leveraging the same batching optimization.\n    (2) the CE polyfill upgrades elements in HI in the wrong order. They upgrade\n    after all scripts in the import have run rather than being interleaved with \n    them. Therefore, any script that depends on a previous custom element in \n    the import will fail. By deferring upgrades until after async imports load\n    we reduce the chance of a problem because upgrade time dependencies are \n    no longer an issue. (e.g. `dom-module` is a registration time dependency \n    when `lazyRegister` is not used and it is specially handled in `dom-module`;\n    `custom-style` is an upgrade time dependency native css properties are used).\n\n  */\n  if (!Polymer.Settings.useNativeCustomElements) {\n    var importHref = Polymer.Base.importHref;\n    Polymer.Base.importHref = function(href, onload, onerror, optAsync) {\n      CustomElements.ready = false;\n      var loadFn = function(e) {\n        CustomElements.upgradeDocumentTree(document);\n        CustomElements.ready = true;\n        if (onload) {\n          return onload.call(this, e);\n        }\n      }\n      return importHref.call(this, href, loadFn, onerror, optAsync);\n    }\n  }\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard/utils.html\n// module id = 49\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/bind/accessors.html');\n\nrequire('../lib/bind/effects.html');\n\nrequire('../lib/path.html');\n\n\n  /**\n   * Support for property side effects.\n   *\n   * Key for effect objects:\n   *\n   * property | ann | anCmp | cmp | obs | cplxOb | description\n   * ---------|-----|-------|-----|-----|--------|----------------------------------------\n   * method   |     | X     | X   | X   | X      | function name to call on instance\n   * args     |     | X     | X   |     | X      | arg descriptors for triggers of fn\n   * trigger  |     | X     | X   |     | X      | describes triggering dependency (one of args)\n   * property |     |       | X   | X   |        | property for effect to set or get\n   * name     | X   |       |     |     |        | annotation value (text inside {{...}})\n   * kind     | X   | X     |     |     |        | binding type (property or attribute)\n   * index    | X   | X     |     |     |        | node index to set\n   *\n   */\n\n  Polymer.Base._addFeature({\n\n    _addPropertyEffect: function(property, kind, effect) {\n      var prop = Polymer.Bind.addPropertyEffect(this, property, kind, effect);\n      // memoize path function for faster lookup.\n      prop.pathFn = this['_' + prop.kind + 'PathEffect'];\n    },\n\n    // prototyping\n\n    _prepEffects: function() {\n      Polymer.Bind.prepareModel(this);\n      this._addAnnotationEffects(this._notes);\n    },\n\n    _prepBindings: function() {\n      Polymer.Bind.createBindings(this);\n    },\n\n    _addPropertyEffects: function(properties) {\n      if (properties) {\n        for (var p in properties) {\n          var prop = properties[p];\n          if (prop.observer) {\n            this._addObserverEffect(p, prop.observer);\n          }\n          if (prop.computed) {\n            // Computed properties are implicitly readOnly\n            prop.readOnly = true;\n            this._addComputedEffect(p, prop.computed);\n          }\n          if (prop.notify) {\n            this._addPropertyEffect(p, 'notify', {\n              event: Polymer.CaseMap.camelToDashCase(p) + '-changed'});\n          }\n          if (prop.reflectToAttribute) {\n            var attr = Polymer.CaseMap.camelToDashCase(p);\n            if (attr[0] === '-') {\n              this._warn(this._logf('_addPropertyEffects', 'Property ' + p + ' cannot be reflected to attribute ' + attr + ' because \"-\" is not a valid starting attribute name. Use a lowercase first letter for the property instead.'));\n            } else {\n              this._addPropertyEffect(p, 'reflect', {\n                attribute: attr\n              });\n            }\n          }\n          if (prop.readOnly) {\n            // Ensure accessor is created\n            Polymer.Bind.ensurePropertyEffects(this, p);\n          }\n        }\n      }\n    },\n\n    _addComputedEffect: function(name, expression) {\n      var sig = this._parseMethod(expression);\n\n      var dynamicFn = sig.dynamicFn;\n\n      for (var i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n        this._addPropertyEffect(arg.model, 'compute', {\n          method: sig.method,\n          args: sig.args,\n          trigger: arg,\n          name: name,\n          dynamicFn: dynamicFn\n        });\n      }\n      if (dynamicFn) {\n        this._addPropertyEffect(sig.method, 'compute', {\n          method: sig.method,\n          args: sig.args,\n          trigger: null,\n          name: name,\n          dynamicFn: dynamicFn\n        });\n      }\n    },\n\n    _addObserverEffect: function(property, observer) {\n      this._addPropertyEffect(property, 'observer', {\n        method: observer,\n        property: property\n      });\n    },\n\n    _addComplexObserverEffects: function(observers) {\n      if (observers) {\n        for (var i=0, o; (i<observers.length) && (o=observers[i]); i++)  {\n          this._addComplexObserverEffect(o);\n        }\n      }\n    },\n\n    _addComplexObserverEffect: function(observer) {\n      var sig = this._parseMethod(observer);\n\n      if (!sig) {\n        throw new Error(\"Malformed observer expression '\" + observer + \"'\");\n      }\n\n      var dynamicFn = sig.dynamicFn;\n\n      for (var i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n        this._addPropertyEffect(arg.model, 'complexObserver', {\n          method: sig.method,\n          args: sig.args,\n          trigger: arg,\n          dynamicFn: dynamicFn\n        });\n      }\n      if (dynamicFn) {\n        this._addPropertyEffect(sig.method, 'complexObserver', {\n          method: sig.method,\n          args: sig.args,\n          trigger: null,\n          dynamicFn: dynamicFn\n        });\n      }\n    },\n\n    _addAnnotationEffects: function(notes) {\n      // process annotations that have been parsed from template\n      for (var i=0, note; (i<notes.length) && (note=notes[i]); i++)  {\n        // where to find the node in the concretized list\n        var b$ = note.bindings;\n        for (var j=0, binding; (j<b$.length) && (binding=b$[j]); j++) {\n          this._addAnnotationEffect(binding, i);\n        }\n      }\n    },\n\n    _addAnnotationEffect: function(note, index) {\n      // TODO(sjmiles): annotations have 'effects' proper and 'listener'\n      if (Polymer.Bind._shouldAddListener(note)) {\n        // <node>.on.<dash-case-property>-changed: <path> = e.detail.value\n        Polymer.Bind._addAnnotatedListener(this, index,\n          note.name, note.parts[0].value, note.parts[0].event, note.parts[0].negate);\n      }\n      for (var i=0; i<note.parts.length; i++) {\n        var part = note.parts[i];\n        if (part.signature) {\n          this._addAnnotatedComputationEffect(note, part, index);\n        } else if (!part.literal) {\n          // add 'annotation' binding effect for property 'model'\n          if (note.kind === 'attribute' && note.name[0] === '-') {\n            this._warn(this._logf('_addAnnotationEffect', 'Cannot set attribute ' + note.name + ' because \"-\" is not a valid attribute starting character'));\n          } else {\n            this._addPropertyEffect(part.model, 'annotation', {\n              kind: note.kind,\n              index: index,\n              name: note.name,\n              propertyName: note.propertyName,\n              value: part.value,\n              isCompound: note.isCompound,\n              compoundIndex: part.compoundIndex,\n              event: part.event,\n              customEvent: part.customEvent,\n              negate: part.negate\n            });\n          }\n        }\n      }\n    },\n\n    _addAnnotatedComputationEffect: function(note, part, index) {\n      var sig = part.signature;\n      if (sig.static) {\n        this.__addAnnotatedComputationEffect('__static__', index, note, part, null);\n      } else {\n        for (var i=0, arg; (i<sig.args.length) && (arg=sig.args[i]); i++) {\n          if (!arg.literal) {\n            this.__addAnnotatedComputationEffect(arg.model, index, note, part,\n              arg);\n          }\n        }\n        if (sig.dynamicFn) {\n          // trigger=null is sufficient as long as we don't allow paths to be\n          // used. If we change our mind, we must first implement this in the\n          // effects anyway where we basically do a `fn = this[methodName]` at\n          // the moment.\n          this.__addAnnotatedComputationEffect(\n              sig.method, index, note, part, null);\n        }\n      }\n    },\n\n    __addAnnotatedComputationEffect: function(property, index, note, part, trigger) {\n      this._addPropertyEffect(property, 'annotatedComputation', {\n        index: index,\n        isCompound: note.isCompound,\n        compoundIndex: part.compoundIndex,\n        kind: note.kind,\n        name: note.name,\n        negate: part.negate,\n        method: part.signature.method,\n        args: part.signature.args,\n        trigger: trigger,\n        dynamicFn: part.signature.dynamicFn\n      });\n    },\n\n    // method expressions are of the form: `name([arg1, arg2, .... argn])`\n    _parseMethod: function(expression) {\n      // tries to match valid javascript property names\n      var m = expression.match(/([^\\s]+?)\\(([\\s\\S]*)\\)/);\n      if (m) {\n        var sig = { method: m[1], static: true };\n        // TODO(kaste): Optimize/memoize `getPropertyInfo`.\n        if (this.getPropertyInfo(sig.method) !== Polymer.nob) {\n          sig.static = false;\n          sig.dynamicFn = true;\n        }\n        if (m[2].trim()) {\n          // replace escaped commas with comma entity, split on un-escaped commas\n          var args = m[2].replace(/\\\\,/g, '&comma;').split(',');\n          return this._parseArgs(args, sig);\n        } else {\n          sig.args = Polymer.nar;\n          return sig;\n        }\n      }\n    },\n\n    _parseArgs: function(argList, sig) {\n      sig.args = argList.map(function(rawArg) {\n        var arg = this._parseArg(rawArg);\n        if (!arg.literal) {\n          sig.static = false;\n        }\n        return arg;\n      }, this);\n      return sig;\n    },\n\n    _parseArg: function(rawArg) {\n      // clean up whitespace\n      var arg = rawArg.trim()\n        // replace comma entity with comma\n        .replace(/&comma;/g, ',')\n        // repair extra escape sequences; note only commas strictly need\n        // escaping, but we allow any other char to be escaped since its\n        // likely users will do this\n        .replace(/\\\\(.)/g, '\\$1')\n        ;\n      // basic argument descriptor\n      var a = {\n        name: arg\n      };\n      // detect literal value (must be String or Number)\n      var fc = arg[0];\n      if (fc === '-') {\n        fc = arg[1];\n      }\n      if (fc >= '0' && fc <= '9') {\n        fc = '#';\n      }\n      switch(fc) {\n        case \"'\":\n        case '\"':\n          a.value = arg.slice(1, -1);\n          a.literal = true;\n          break;\n        case '#':\n          a.value = Number(arg);\n          a.literal = true;\n          break;\n      }\n      // if not literal, look for structured path\n      if (!a.literal) {\n        a.model = Polymer.Path.root(arg);\n        // detect structured path (has dots)\n        a.structured = Polymer.Path.isDeep(arg);\n        if (a.structured) {\n          a.wildcard = (arg.slice(-2) == '.*');\n          if (a.wildcard) {\n            a.name = arg.slice(0, -2);\n          }\n        }\n      }\n      return a;\n    },\n\n    // instancing\n    _marshalInstanceEffects: function() {\n      Polymer.Bind.prepareInstance(this);\n      if (this._bindListeners) {\n        Polymer.Bind.setupBindListeners(this);\n      }\n    },\n\n    _applyEffectValue: function(info, value) {\n      var node = this._nodes[info.index];\n      var property = info.name;\n\n      value = this._computeFinalAnnotationValue(node, property, value, info);\n\n      if (info.kind == 'attribute') {\n        this.serializeValueToAttribute(value, property, node);\n      } else {\n        var pinfo = node._propertyInfo && node._propertyInfo[property];\n        if (pinfo && pinfo.readOnly) {\n          return;\n        }\n        // Downward data-flow via bindings uses `fromAbove: true` if the\n        // global `suppressBindingNotifications` opt-in flag is set as a\n        // perf optimization to avoid needless event dispatch cost\n        this.__setProperty(property, value,\n          Polymer.Settings.suppressBindingNotifications, node);\n      }\n    },\n\n    _computeFinalAnnotationValue: function(node, property, value, info) {\n      if (info.negate) {\n        value = !value;\n      }\n\n      if (info.isCompound) {\n        var storage = node.__compoundStorage__[property];\n        storage[info.compoundIndex] = value;\n        value = storage.join('');\n      }\n\n      if (info.kind !== 'attribute') {\n        // TODO(sorvell): consider pre-processing the following two string\n        // comparisons in the hot path so this can be a boolean check\n        if (property === 'className') {\n          value = this._scopeElementClass(node, value);\n        }\n        // Some browsers serialize `undefined` to `\"undefined\"`\n        if (property === 'textContent' ||\n            (node.localName == 'input' && property == 'value')) {\n          value = value == undefined ? '' : value;\n        }\n      }\n      return value;\n    },\n\n    _executeStaticEffects: function() {\n      if (this._propertyEffects && this._propertyEffects.__static__) {\n        this._effectEffects('__static__', null, this._propertyEffects.__static__);\n      }\n    }\n\n  });\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard/effectBuilder.html\n// module id = 50\n// module chunks = 0","/*__wc__loader*/\nrequire('../path.html');\n\n\n\n  Polymer.Bind = {\n\n    // for prototypes (usually)\n    prepareModel: function(model) {\n      Polymer.Base.mixin(model, this._modelApi);\n    },\n\n    _modelApi: {\n\n      _notifyChange: function(source, event, value) {\n        value = value === undefined ? this[source] : value;\n        event = event || Polymer.CaseMap.camelToDashCase(source) + '-changed';\n        this.fire(event, {value: value},\n          {bubbles: false, cancelable: false, _useCache:\n            Polymer.Settings.eventDataCache || !Polymer.Settings.isIE});\n      },\n\n      // TODO(sjmiles): removing _notifyListener from here breaks accessors.html\n      // as a standalone lib. This is temporary, as standard/configure.html\n      // installs it's own version on Polymer.Base, and we need that to work\n      // right now.\n      // NOTE: exists as a hook for processing listeners\n      /*\n      _notifyListener: function(fn, e) {\n        // NOTE: pass e.target because e.target can get lost if this function\n        // is queued asynchrously\n        return fn.call(this, e, e.target);\n      },\n      */\n\n      // Called from accessors, where effects is pre-stored\n      // in the closure for the accessor for efficiency\n      _propertySetter: function(property, value, effects, fromAbove) {\n        var old = this.__data__[property];\n        // NaN is always not equal to itself,\n        // if old and value are both NaN we treat them as equal\n        // x === x is 10x faster, and equivalent to !isNaN(x)\n        if (old !== value && (old === old || value === value)) {\n          this.__data__[property] = value;\n          if (typeof value == 'object') {\n            this._clearPath(property);\n          }\n          if (this._propertyChanged) {\n            this._propertyChanged(property, value, old);\n          }\n          if (effects) {\n            this._effectEffects(property, value, effects, old, fromAbove);\n          }\n        }\n        return old;\n      },\n\n      // Called during _applyConfig (well-known downward data-flow hot path)\n      // in order to avoid firing notify events\n      // TODO(kschaaf): downward bindings (e.g. _applyEffectValue) should also\n      // use non-notifying setters but right now that would require looking\n      // up readOnly property config in the hot-path\n      __setProperty: function(property, value, quiet, node) {\n        node = node || this;\n        var effects = node._propertyEffects && node._propertyEffects[property];\n        if (effects) {\n          node._propertySetter(property, value, effects, quiet);\n        } else if (node[property] !== value) {\n          node[property] = value;\n        }\n      },\n\n      _effectEffects: function(property, value, effects, old, fromAbove) {\n        for (var i=0, l=effects.length, fx; (i<l) && (fx=effects[i]); i++) {\n          // always send latest value for property\n          // if any previous effect has modified the value, given `value` will be stale\n          fx.fn.call(this, property, this[property], fx.effect, old, fromAbove);\n        }\n      },\n\n      _clearPath: function(path) {\n        for (var prop in this.__data__) {\n          if (Polymer.Path.isDescendant(path, prop)) {\n            this.__data__[prop] = undefined;\n          }\n        }\n      }\n\n    },\n\n    // a prepared model can acquire effects\n\n    ensurePropertyEffects: function(model, property) {\n      if (!model._propertyEffects) {\n        model._propertyEffects = {};\n      }\n      var fx = model._propertyEffects[property];\n      if (!fx) {\n        fx = model._propertyEffects[property] = [];\n      }\n      return fx;\n    },\n\n    addPropertyEffect: function(model, property, kind, effect) {\n      var fx = this.ensurePropertyEffects(model, property);\n      var propEffect = {\n        kind: kind,\n        effect: effect,\n        fn: Polymer.Bind['_' + kind + 'Effect']\n      };\n      fx.push(propEffect);\n      return propEffect;\n    },\n\n    createBindings: function(model) {\n      //console.group(model.is);\n      // map of properties to effects\n      var fx$ = model._propertyEffects;\n      if (fx$) {\n        // for each property with effects\n        for (var n in fx$) {\n          // array of effects\n          var fx = fx$[n];\n          // effects have priority\n          fx.sort(this._sortPropertyEffects);\n          // create accessors\n          this._createAccessors(model, n, fx);\n        }\n      }\n      //console.groupEnd();\n    },\n\n    _sortPropertyEffects: (function() {\n      // TODO(sjmiles): EFFECT_ORDER buried this way is not ideal,\n      // but presumably the sort method is going to be a hot path and not\n      // have a `this`. There is also a problematic dependency on effect.kind\n      // values here, which are otherwise pluggable.\n      var EFFECT_ORDER = {\n        'compute': 0,\n        'annotation': 1,\n        'annotatedComputation': 2,\n        'reflect': 3,\n        'notify': 4,\n        'observer': 5,\n        'complexObserver': 6,\n        'function': 7\n      };\n      return function(a, b) {\n        return EFFECT_ORDER[a.kind] - EFFECT_ORDER[b.kind];\n      };\n    })(),\n\n    // create accessors that implement effects\n\n    _createAccessors: function(model, property, effects) {\n      var defun = {\n        get: function() {\n          // TODO(sjmiles): elide delegation for performance, good ROI?\n          return this.__data__[property];\n        }\n      };\n      var setter = function(value) {\n        this._propertySetter(property, value, effects);\n      };\n      // ReadOnly properties have a private setter only\n      // TODO(kschaaf): Per current Bind factoring, we shouldn't\n      // be interrogating the prototype here\n      // TODO(sorvell): we want to avoid using `getPropertyInfo` here, but\n      // this requires more data in `_propertyInfo`\n      var info = model.getPropertyInfo && model.getPropertyInfo(property);\n      if (info && info.readOnly) {\n        // Computed properties are read-only (no property setter), but also don't\n        // need a private setter since they should not be called by the user\n        if (!info.computed) {\n          model['_set' + this.upper(property)] = setter;\n        }\n      } else {\n        defun.set = setter;\n      }\n      Object.defineProperty(model, property, defun);\n    },\n\n    upper: function(name) {\n      return name[0].toUpperCase() + name.substring(1);\n    },\n\n    _addAnnotatedListener: function(model, index, property, path, event, negated) {\n      if (!model._bindListeners) {\n        model._bindListeners = [];\n      }\n      var fn = this._notedListenerFactory(property, path,\n        Polymer.Path.isDeep(path), negated);\n      var eventName = event ||\n        (Polymer.CaseMap.camelToDashCase(property) + '-changed');\n      model._bindListeners.push({\n        index: index,\n        property: property,\n        path: path,\n        changedFn: fn,\n        event: eventName\n      });\n    },\n\n    _isEventBogus: function(e, target) {\n      return e.path && e.path[0] !== target;\n    },\n\n    _notedListenerFactory: function(property, path, isStructured, negated) {\n      return function(target, value, targetPath) {\n        if (targetPath) {\n          var newPath = Polymer.Path.translate(property, path, targetPath);\n          this._notifyPath(newPath, value);\n        } else {\n          // TODO(sorvell): even though we have a `value` argument, we *must*\n          // lookup the current value of the property. Multiple listeners and\n          // queued events during configuration can theoretically lead to\n          // divergence of the passed value from the current value, but we\n          // really need to track down a specific case where this happens.\n          value = target[property];\n\n          if (negated) {\n            value = !value;\n          }\n\n          if (!isStructured) {\n            this[path] = value;\n          } else {\n            // TODO(kschaaf): dirty check avoids null references when the object has gone away\n            if (this.__data__[path] != value) {\n              this.set(path, value);\n            }\n          }\n        }\n      };\n    },\n    // for instances\n\n    prepareInstance: function(inst) {\n      inst.__data__ = Object.create(null);\n    },\n\n    setupBindListeners: function(inst) {\n      var b$ = inst._bindListeners;\n      for (var i=0, l=b$.length, info; (i<l) && (info=b$[i]); i++) {\n        // Property listeners:\n        // <node>.on.<property>-changed: <path]> = e.detail.value\n        //console.log('[_setupBindListener]: [%s][%s] listening for [%s][%s-changed]', this.localName, info.path, info.id || info.index, info.property);\n        //\n        // TODO(sorvell): fix templatizer to support this before uncommenting\n        // Optimization: only add bind listeners if the bound property is notifying...\n        var node = inst._nodes[info.index];\n        //var p = node._propertyInfo && node._propertyInfo[info.property];\n        //if (node._prepParentProperties || !node._propertyInfo || (p && p.notify)) {\n          this._addNotifyListener(node, inst, info.event, info.changedFn);\n        //}\n      }\n    },\n\n    // TODO(sorvell): note, adding these synchronously may impact performance,\n    // measure and consider if we can defer until after first paint in some cases at least.\n    _addNotifyListener: function(element, context, event, changedFn) {\n      element.addEventListener(event, function(e) {\n        return context._notifyListener(changedFn, e);\n      });\n    }\n  };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/bind/accessors.html\n// module id = 51\n// module chunks = 0","/*__wc__loader*/\nrequire('../case-map.html');\n\nrequire('../path.html');\n\n\n\n  Polymer.Base.mixin(Polymer.Bind, {\n\n    _shouldAddListener: function(effect) {\n      return effect.name &&\n             effect.kind != 'attribute' &&\n             effect.kind != 'text' &&\n             !effect.isCompound &&\n             effect.parts[0].mode === '{';\n    },\n\n    _annotationEffect: function(source, value, effect) {\n      if (source != effect.value) {\n        value = this._get(effect.value);\n        this.__data__[effect.value] = value;\n      }\n      this._applyEffectValue(effect, value);\n    },\n\n    _reflectEffect: function(source, value, effect) {\n      this.reflectPropertyToAttribute(source, effect.attribute, value);\n    },\n\n    _notifyEffect: function(source, value, effect, old, fromAbove) {\n      if (!fromAbove) {\n        this._notifyChange(source, effect.event, value);\n      }\n    },\n\n    // Raw effect for extension\n    _functionEffect: function(source, value, fn, old, fromAbove) {\n      fn.call(this, source, value, old, fromAbove);\n    },\n\n    _observerEffect: function(source, value, effect, old) {\n      var fn = this[effect.method];\n      if (fn) {\n        fn.call(this, value, old);\n      } else {\n        this._warn(this._logf('_observerEffect', 'observer method `' +\n          effect.method + '` not defined'));\n      }\n    },\n\n    _complexObserverEffect: function(source, value, effect) {\n      var fn = this[effect.method];\n      if (fn) {\n        var args = Polymer.Bind._marshalArgs(this.__data__, effect, source, value);\n        if (args) {\n          fn.apply(this, args);\n        }\n      } else if (effect.dynamicFn) {\n        // dynamic functions can be just like every other property `undefined`\n        // so we MUST ignore an undefined value here. (That's totally the\n        // same guard we use within `_marshalArgs` and part of the spec.)\n      } else {\n        this._warn(this._logf('_complexObserverEffect', 'observer method `' +\n          effect.method + '` not defined'));\n      }\n    },\n\n    _computeEffect: function(source, value, effect) {\n      var fn = this[effect.method];\n      if (fn) {\n        var args = Polymer.Bind._marshalArgs(this.__data__, effect, source, value);\n        if (args) {\n          var computedvalue = fn.apply(this, args);\n          this.__setProperty(effect.name, computedvalue);\n        }\n      } else if (effect.dynamicFn) {\n        // dynamic functions can be just like every other property `undefined`\n        // so we MUST ignore an undefined value here. (That's totally the\n        // same guard we use within `_marshalArgs` and part of the spec.)\n      } else {\n        this._warn(this._logf('_computeEffect', 'compute method `' +\n          effect.method + '` not defined'));\n      }\n    },\n\n    _annotatedComputationEffect: function(source, value, effect) {\n      var computedHost = this._rootDataHost || this;\n      var fn = computedHost[effect.method];\n      if (fn) {\n        var args = Polymer.Bind._marshalArgs(this.__data__, effect, source, value);\n        if (args) {\n          var computedvalue = fn.apply(computedHost, args);\n          this._applyEffectValue(effect, computedvalue);\n        }\n      } else if (effect.dynamicFn) {\n        // dynamic functions can be just like every other property `undefined`\n        // so we MUST ignore an undefined value here. (That's totally the\n        // same guard we use within `_marshalArgs` and part of the spec.)\n      } else {\n        computedHost._warn(computedHost._logf('_annotatedComputationEffect',\n          'compute method `' + effect.method + '` not defined'));\n      }\n    },\n\n    // path & value are used to fill in wildcard descriptor when effect is\n    // being called as a result of a path notification\n    _marshalArgs: function(model, effect, path, value) {\n      var values = [];\n      var args = effect.args;\n      // Actually we should return early as soon as we see an `undefined`,\n      // but dom-repeat relies on this behavior.\n      var bailoutEarly = (args.length > 1 || effect.dynamicFn);\n      for (var i=0, l=args.length; i<l; i++) {\n        var arg = args[i];\n        var name = arg.name;\n        var v;\n        if (arg.literal) {\n          v = arg.value;\n        } else if (path === name) {\n          v = value;\n        } else {\n          // Take advantage of the fact that all values sent through the path\n          // notifications system are cached on the model. Trivially, all the\n          // user properties can be looked up there as well.\n          v = model[name];\n          if (v === undefined && arg.structured) {\n            // All initial values and base assignments don't go through the\n            // notifications API, so we must construct/evaluate the correct\n            // value. (E.g. you assign a new object to `this.foo`, but your\n            // observer actually listens to `foo.bar.quux`)\n            v = Polymer.Base._get(name, model);\n          }\n        }\n        if (bailoutEarly && v === undefined) {\n          return;\n        }\n        if (arg.wildcard) {\n          // Only send the actual path changed info if the change that\n          // caused the observer to run matches this arg. Note that this holds\n          // also true when `path === name`. We can skip this check b/c then\n          // `name` and `v` already have the values we want.\n          var matches = Polymer.Path.isAncestor(path, name);\n          values[i] = {\n            path: matches ? path : name,\n            value: matches ? value : v,\n            base: v\n          };\n        } else {\n          values[i] = v;\n        }\n      }\n      return values;\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/bind/effects.html\n// module id = 52\n// module chunks = 0","/*__wc__loader*/\n\n(function() {\n  /*\n    Process inputs efficiently via a configure lifecycle callback.\n    Configure is called top-down, host before local dom. Users should\n    implement configure to supply a set of default values for the element by\n    returning an object containing the properties and values to set.\n\n    Configured values are not immediately set, instead they are set when\n    an element becomes ready, after its local dom is ready. This ensures\n    that any user change handlers are not called before ready time.\n\n  */\n\n  /*\n  Implementation notes:\n\n  Configured values are collected into _config. At ready time, properties\n  are set to the values in _config. This ensures properties are set child\n  before host and change handlers are called only at ready time. The host\n  will reset a value already propagated to a child, but this is not\n  inefficient because of dirty checking at the set point.\n\n  Bind notification events are sent when properties are set at ready time\n  and thus received by the host before it is ready. Since notifications result\n  in property updates and this triggers side effects, handling notifications\n  is deferred until ready time.\n\n  In general, events can be heard before an element is ready. This may occur\n  when a user sends an event in a change handler or listens to a data event\n  directly (on-foo-changed).\n  */\n\n  var usePolyfillProto = Polymer.Settings.usePolyfillProto;\n\n  // When true, `this.properties` is bad juju due to obsolete `properties`\n  // accessors on instances of HTMLElement\n  var avoidInstanceProperties =\n    Boolean(Object.getOwnPropertyDescriptor(document.documentElement, 'properties'));\n\n  Polymer.Base._addFeature({\n\n    // storage for configuration\n    _setupConfigure: function(initialConfig) {\n      this._config = {};\n      this._handlers = [];\n      this._aboveConfig = null;\n      if (initialConfig) {\n        // don't accept undefined values in intialConfig\n        for (var i in initialConfig) {\n          if (initialConfig[i] !== undefined) {\n            this._config[i] = initialConfig[i];\n          }\n        }\n      }\n    },\n\n    // static attributes are deserialized into _config\n    _marshalAttributes: function() {\n      this._takeAttributesToModel(this._config);\n    },\n\n    _attributeChangedImpl: function(name) {\n      var model = this._clientsReadied ? this : this._config;\n      this._setAttributeToProperty(model, name);\n    },\n\n    // at configure time values are stored in _config\n    _configValue: function(name, value) {\n      var info = this._propertyInfo[name];\n      if (!info || !info.readOnly) {\n        this._config[name] = value;\n      }\n    },\n\n    // Override polymer-mini thunk\n    _beforeClientsReady: function() {\n      this._configure();\n    },\n\n    // configure: returns user supplied default property values\n    // combines with _config to create final property values\n    _configure: function() {\n      // some annotation data needs to be handed from host to client\n      // e.g. hand template content stored in notes to children as part of\n      // configure flow so templates have their content at ready time\n      this._configureAnnotationReferences();\n      // configure instance properties that may have been bound prior to upgrade\n      this._configureInstanceProperties();\n      // save copy of configuration that came from above\n      this._aboveConfig = this.mixin({}, this._config);\n      // get individual default values from property configs\n      var config = {};\n      // mixed-in behaviors\n      for (var i=0; i < this.behaviors.length; i++) {\n        this._configureProperties(this.behaviors[i].properties, config);\n      }\n      // prototypical behavior\n      // Read `properties` off of the prototype, as a concession to non-spec\n      // compliant browsers (e.g. Android UC Browser 11.2.0.915) where\n      // a.) HTMLElement's have a non-spec `properties` property, and\n      // b.) the `properties` accessor is on instances rather than\n      // `HTMLElement.prototype`; going under the instance to the prototype\n      // avoids the problem. Note can't always go to __proto__ due to IE10\n      // hence conditional, but IE10 doesn't suffer from the instance properties\n      // issue (happy coincidence of browser quirks).\n      this._configureProperties(avoidInstanceProperties ?\n        this.__proto__.properties : this.properties, config);\n      // TODO(sorvell): it *may* be faster to loop over _propertyInfo but\n      // there are some test issues.\n      //this._configureProperties(this._propertyInfo, config);\n      // override local configuration with configuration from above\n      this.mixin(config, this._aboveConfig);\n      // this is the new _config, which are the final values to be applied\n      this._config = config;\n      // pass configuration data to bindings\n      if (this._clients && this._clients.length) {\n        this._distributeConfig(this._config);\n      }\n    },\n\n    _configureInstanceProperties: function() {\n      for (var i in this._propertyEffects) {\n        // Allow properties set before upgrade on the instance\n        // to override default values. This allows late upgrade + an early set\n        // to not b0rk accessors on the prototype.\n        // Perf testing has shown `hasOwnProperty` to be ok here.\n        if (!usePolyfillProto && this.hasOwnProperty(i)) {\n          this._configValue(i, this[i]);\n          delete this[i];\n        }\n      }\n    },\n\n    _configureProperties: function(properties, config) {\n      for (var i in properties) {\n        var c = properties[i];\n        if (c.value !== undefined) {\n          var value = c.value;\n          if (typeof value == 'function') {\n            // pass existing config values (this._config) to value function\n            value = value.call(this, this._config);\n          }\n          config[i] = value;\n        }\n      }\n    },\n\n    // distribute config values to bound nodes.\n    _distributeConfig: function(config) {\n      var fx$ = this._propertyEffects;\n      if (fx$) {\n        for (var p in config) {\n          var fx = fx$[p];\n          if (fx) {\n            for (var i=0, l=fx.length, x; (i<l) && (x=fx[i]); i++) {\n              // TODO(kschaaf): computed annotations are excluded from top-down\n              // configure for now; to be revisited\n              if (x.kind === 'annotation') {\n                var node = this._nodes[x.effect.index];\n                var name = x.effect.propertyName;\n                // seeding configuration only\n                var isAttr = (x.effect.kind == 'attribute');\n                var hasEffect = (node._propertyEffects &&\n                  node._propertyEffects[name]);\n                if (node._configValue && (hasEffect || !isAttr)) {\n                  var value = (p === x.effect.value) ? config[p] :\n                    this._get(x.effect.value, config);\n                  value = this._computeFinalAnnotationValue(node, name, value,\n                                                            x.effect);\n                  if (isAttr) {\n                    // For attribute bindings, flow through the same ser/deser\n                    // process to ensure the value is the same as if it were\n                    // bound through the attribute\n                    value = node.deserialize(this.serialize(value),\n                      node._propertyInfo[name].type);\n                  }\n                  node._configValue(name, value);\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n\n    // Override polymer-mini thunk\n    _afterClientsReady: function() {\n      // set path properties\n      this.importPath = this._importPath;\n      this.rootPath = Polymer.rootPath;\n      // process static effects, e.g. computations that have only literal arguments\n      this._executeStaticEffects();\n      this._applyConfig(this._config, this._aboveConfig);\n      this._flushHandlers();\n    },\n\n    // NOTE: values are already propagated to children via\n    // _distributeConfig so propagation triggered by effects here is\n    // redundant, but safe due to dirty checking\n    _applyConfig: function(config, aboveConfig) {\n      for (var n in config) {\n        // Don't stomp on values that may have been set by other side effects\n        if (this[n] === undefined) {\n          // Call _propertySet for any properties with accessors, which will\n          // initialize read-only properties also; set quietly if value was\n          // configured from above, as opposed to default\n          this.__setProperty(n, config[n], n in aboveConfig);\n        }\n      }\n    },\n\n    // NOTE: Notifications can be processed before ready since\n    // they are sent at *child* ready time. Since notifications cause side\n    // effects and side effects must not be processed before ready time,\n    // handling is queue/defered until then.\n    _notifyListener: function(fn, e) {\n      if (!Polymer.Bind._isEventBogus(e, e.target)) {\n        var value, path;\n        if (e.detail) {\n          value = e.detail.value;\n          path = e.detail.path;\n        }\n        if (!this._clientsReadied) {\n          this._queueHandler([fn, e.target, value, path]);\n        } else {\n          return fn.call(this, e.target, value, path);\n        }\n      }\n    },\n\n    _queueHandler: function(args) {\n      this._handlers.push(args);\n    },\n\n    _flushHandlers: function() {\n      var h$ = this._handlers;\n      for (var i=0, l=h$.length, h; (i<l) && (h=h$[i]); i++) {\n        h[0].call(this, h[1], h[2], h[3]);\n      }\n      // reset handlers array\n      //\n      // If an element holds a reference to a CustomEvent with a detail\n      // property, Chrome will leak memory across page refreshes\n      // https://crbug.com/529941\n      this._handlers = [];\n    }\n\n  });\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard/configure.html\n// module id = 53\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/case-map.html');\n\nrequire('../lib/path.html');\n\n\n\n  /**\n   * Changes to an object sub-field (aka \"path\") via a binding\n   * (e.g. `<x-foo value=\"{{item.subfield}}\"`) will notify other elements bound to\n   * the same object automatically.\n   *\n   * When modifying a sub-field of an object imperatively\n   * (e.g. `this.item.subfield = 42`), in order to have the new value propagated\n   * to other elements, a special `set(path, value)` API is provided.\n   * `set` sets the object field at the path specified, and then notifies the\n   * binding system so that other elements bound to the same path will update.\n   *\n   * Example:\n   *\n   *     Polymer({\n   *\n   *       is: 'x-date',\n   *\n   *       properties: {\n   *         date: {\n   *           type: Object,\n   *           notify: true\n   *          }\n   *       },\n   *\n   *       attached: function() {\n   *         this.date = {};\n   *         setInterval(function() {\n   *           var d = new Date();\n   *           // Required to notify elements bound to date of changes to sub-fields\n   *           // this.date.seconds = d.getSeconds(); <-- Will not notify\n   *           this.set('date.seconds', d.getSeconds());\n   *           this.set('date.minutes', d.getMinutes());\n   *           this.set('date.hours', d.getHours() % 12);\n   *         }.bind(this), 1000);\n   *       }\n   *\n   *     });\n   *\n   *  Allows bindings to `date` sub-fields to update on changes:\n   *\n   *     <x-date date=\"{{date}}\"></x-date>\n   *\n   *     Hour: <span>{{date.hours}}</span>\n   *     Min:  <span>{{date.minutes}}</span>\n   *     Sec:  <span>{{date.seconds}}</span>\n   *\n   * @class data feature: path notification\n   */\n\n  (function() {\n    // Using strict here to ensure fast argument manipulation in array methods\n    'use strict';\n\n    var Path = Polymer.Path;\n\n    Polymer.Base._addFeature({\n      /**\n       * Notify that a path has changed.\n       *\n       * Example:\n       *\n       *     this.item.user.name = 'Bob';\n       *     this.notifyPath('item.user.name');\n       *\n       * @param {string} path Path that should be notified.\n      */\n      notifyPath: function(path, value, fromAbove) {\n        // Convert any array indices to keys before notifying path\n        var info = {};\n        var v = this._get(path, this, info);\n        if (arguments.length === 1) {\n          value = v;\n        }\n        // Notify change to key-based path\n        if (info.path) {\n          this._notifyPath(info.path, value, fromAbove);\n        }\n      },\n\n      // Note: this implemetation only accepts key-based array paths\n      _notifyPath: function(path, value, fromAbove) {\n        var old = this._propertySetter(path, value);\n        // manual dirty checking for now...\n        // NaN is always not equal to itself,\n        // if old and value are both NaN we treat them as equal\n        // x === x is 10x faster, and equivalent to !isNaN(x)\n        if (old !== value && (old === old || value === value)) {\n          // console.group((this.localName || this.dataHost.id + '-' + this.dataHost.dataHost.index) + '#' + (this.id || this.index) + ' ' + path, value);\n          // Take path effects at this level for exact path matches,\n          // and notify down for any bindings to a subset of this path\n          this._pathEffector(path, value);\n          // Send event to notify the path change upwards\n          // Optimization: don't notify up if we know the notification\n          // is coming from above already (avoid wasted event dispatch)\n          if (!fromAbove) {\n            // TODO(sorvell): should only notify if notify: true?\n            this._notifyPathUp(path, value);\n          }\n          // console.groupEnd((this.localName || this.dataHost.id + '-' + this.dataHost.dataHost.index) + '#' + (this.id || this.index) + ' ' + path, value);\n          return true;\n        }\n      },\n\n      /**\n        Converts a path to an array of path parts.  A path may be specified\n        as a dotted string or an array of one or more dotted strings (or numbers,\n        for number-valued keys).\n      */\n      _getPathParts: function(path) {\n        if (Array.isArray(path)) {\n          var parts = [];\n          for (var i=0; i<path.length; i++) {\n            var args = path[i].toString().split('.');\n            for (var j=0; j<args.length; j++) {\n              parts.push(args[j]);\n            }\n          }\n          return parts;\n        } else {\n          return path.toString().split('.');\n        }\n      },\n\n      /**\n       * Convienence method for setting a value to a path and notifying any\n       * elements bound to the same path.\n       *\n       * Note, if any part in the path except for the last is undefined,\n       * this method does nothing (this method does not throw when\n       * dereferencing undefined paths).\n       *\n       * @method set\n       * @param {(string|Array<(string|number)>)} path Path to the value\n       *   to write.  The path may be specified as a string (e.g. `foo.bar.baz`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n       * @param {*} value Value to set at the specified path.\n       * @param {Object=} root Root object from which the path is evaluated.\n      */\n      set: function(path, value, root) {\n        var prop = root || this;\n        var parts = this._getPathParts(path);\n        var array;\n        var last = parts[parts.length-1];\n        if (parts.length > 1) {\n          // Loop over path parts[0..n-2] and dereference\n          for (var i=0; i<parts.length-1; i++) {\n            var part = parts[i];\n            if (array && part[0] == '#') {\n              // Part was key; lookup item in collection\n              prop = Polymer.Collection.get(array).getItem(part);\n            } else {\n              // Get item from simple property dereference\n              prop = prop[part];\n              if (array && (parseInt(part, 10) == part)) {\n                // Translate array indices to collection keys for path notificaiton\n                parts[i] = Polymer.Collection.get(array).getKey(prop);\n              }\n            }\n            if (!prop) {\n              return;\n            }\n            // Cache previous part if it is an array\n            array = Array.isArray(prop) ? prop : null;\n          }\n          // Special handling when last part is a array item: need to replace\n          // item in collection associated with key for that item\n          if (array) {\n            var coll = Polymer.Collection.get(array);\n            var old, key;\n            if (last[0] == '#') {\n              // Part was key; lookup item in collection\n              key = last;\n              old = coll.getItem(key);\n              // Update last part from key to index: O(n) lookup unavoidable\n              last = array.indexOf(old);\n              // Replace item associated with key in collection\n              coll.setItem(key, value);\n            } else if (parseInt(last, 10) == last) {\n              // Dereference index & lookup collection key\n              old = prop[last];\n              key = coll.getKey(old);\n              // Translate array indices to collection keys for path notificaiton\n              parts[i] = key;\n              // Replace item associated with key in collection\n              coll.setItem(key, value);\n            }\n          }\n          // Set value to object at end of path\n          prop[last] = value;\n          // Notify observers of path change\n          if (!root) {\n            this._notifyPath(parts.join('.'), value);\n          }\n        } else {\n          // Simple property set\n          prop[path] = value;\n        }\n      },\n\n      /**\n       * Convienence method for reading a value from a path.\n       *\n       * Note, if any part in the path is undefined, this method returns\n       * `undefined` (this method does not throw when dereferencing undefined\n       * paths).\n       *\n       * @method get\n       * @param {(string|Array<(string|number)>)} path Path to the value\n       *   to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n       *   or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n       *   bracketed expressions are not supported; string-based path parts\n       *   *must* be separated by dots.  Note that when dereferencing array\n       *   indices, the index may be used as a dotted part directly\n       *   (e.g. `users.12.name` or `['users', 12, 'name']`).\n       * @param {Object=} root Root object from which the path is evaluated.\n       * @return {*} Value at the path, or `undefined` if any part of the path\n       *   is undefined.\n       */\n      get: function(path, root) {\n        return this._get(path, root);\n      },\n\n      // If `info` object is supplied, a `path` property will be added to it\n      // containing the path with array indices converted to keys, for use\n      // by the private _notifyPath / _notifySplice implementations\n      _get: function(path, root, info) {\n        var prop = root || this;\n        var parts = this._getPathParts(path);\n        var array;\n        // Loop over path parts[0..n-1] and dereference\n        for (var i=0; i<parts.length; i++) {\n          if (!prop) {\n            return;\n          }\n          var part = parts[i];\n          if (array && part[0] == '#') {\n            // Part was key; lookup item in collection\n            prop = Polymer.Collection.get(array).getItem(part);\n          } else {\n            // Get item from simple property dereference\n            prop = prop[part];\n            if (info && array && (parseInt(part, 10) == part)) {\n              // Translate array indices to collection keys for path notificaiton\n              parts[i] = Polymer.Collection.get(array).getKey(prop);\n            }\n          }\n          // Cache previous part if it is an array\n          array = Array.isArray(prop) ? prop : null;\n        }\n        if (info) {\n          info.path = parts.join('.');\n        }\n        return prop;\n      },\n\n      _pathEffector: function(path, value) {\n        // get root property\n        var model = Path.root(path);\n        // search property effects of the root property for 'annotation' effects\n        var fx$ = this._propertyEffects && this._propertyEffects[model];\n        if (fx$) {\n          for (var i=0, fx; (i<fx$.length) && (fx=fx$[i]); i++) {\n            // use memoized path functions\n            var fxFn = fx.pathFn;\n            if (fxFn) {\n              fxFn.call(this, path, value, fx.effect);\n            }\n          }\n        }\n        // notify runtime-bound paths\n        if (this._boundPaths) {\n          this._notifyBoundPaths(path, value);\n        }\n      },\n\n      _annotationPathEffect: function(path, value, effect) {\n        if (Path.matches(effect.value, false, path)) {\n          // TODO(sorvell): ideally the effect function is on this prototype\n          // so we don't have to call it like this.\n          Polymer.Bind._annotationEffect.call(this, path, value, effect);\n        } else if (!effect.negate && Path.isDescendant(effect.value, path)) {\n          // locate the bound node\n          var node = this._nodes[effect.index];\n          if (node && node._notifyPath) {\n            var newPath = Path.translate(effect.value, effect.name, path);\n            node._notifyPath(newPath, value, true);\n          }\n        }\n      },\n\n      _complexObserverPathEffect: function(path, value, effect) {\n        if (Path.matches(effect.trigger.name, effect.trigger.wildcard, path)) {\n          Polymer.Bind._complexObserverEffect.call(this, path, value, effect);\n        }\n      },\n\n      _computePathEffect: function(path, value, effect) {\n        if (Path.matches(effect.trigger.name, effect.trigger.wildcard, path)) {\n          Polymer.Bind._computeEffect.call(this, path, value, effect);\n        }\n      },\n\n      _annotatedComputationPathEffect: function(path, value, effect) {\n        if (Path.matches(effect.trigger.name, effect.trigger.wildcard, path)) {\n          Polymer.Bind._annotatedComputationEffect.call(this, path, value, effect);\n        }\n      },\n\n      /**\n       * Aliases one data path as another, such that path notifications from one\n       * are routed to the other.\n       *\n       * @method linkPaths\n       * @param {string} to Target path to link.\n       * @param {string} from Source path to link.\n       */\n      linkPaths: function(to, from) {\n        this._boundPaths = this._boundPaths || {};\n        if (from) {\n          this._boundPaths[to] = from;\n          // this.set(to, this._get(from));\n        } else {\n          this.unlinkPaths(to);\n          // this.set(to, from);\n        }\n      },\n\n      /**\n       * Removes a data path alias previously established with `linkPaths`.\n       *\n       * Note, the path to unlink should be the target (`to`) used when\n       * linking the paths.\n       *\n       * @method unlinkPaths\n       * @param {string} path Target path to unlink.\n       */\n      unlinkPaths: function(path) {\n        if (this._boundPaths) {\n          delete this._boundPaths[path];\n        }\n      },\n\n      _notifyBoundPaths: function(path, value) {\n        for (var a in this._boundPaths) {\n          var b = this._boundPaths[a];\n          if (Path.isDescendant(a, path)) {\n            this._notifyPath(Path.translate(a, b, path), value);\n          } else if (Path.isDescendant(b, path)) {\n            this._notifyPath(Path.translate(b, a, path), value);\n          }\n        }\n      },\n\n      _notifyPathUp: function(path, value) {\n        var rootName = Path.root(path);\n        var dashCaseName = Polymer.CaseMap.camelToDashCase(rootName);\n        var eventName = dashCaseName + this._EVENT_CHANGED;\n        // use a cached event here (_useCache: true) for efficiency\n        this.fire(eventName, {\n          path: path,\n          value: value\n        }, {bubbles: false, _useCache: Polymer.Settings.eventDataCache ||\n          !Polymer.Settings.isIE});\n      },\n\n      _EVENT_CHANGED: '-changed',\n\n      /**\n       * Notify that an array has changed.\n       *\n       * Example:\n       *\n       *     this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n       *     ...\n       *     this.items.splice(1, 1, {name: 'Sam'});\n       *     this.items.push({name: 'Bob'});\n       *     this.notifySplices('items', [\n       *       { index: 1, removed: [{name: 'Todd'}], addedCount: 1, obect: this.items, type: 'splice' },\n       *       { index: 3, removed: [], addedCount: 1, object: this.items, type: 'splice'}\n       *     ]);\n       *\n       * @param {string} path Path that should be notified.\n       * @param {Array} splices Array of splice records indicating ordered\n       *   changes that occurred to the array. Each record should have the\n       *   following fields:\n       *    * index: index at which the change occurred\n       *    * removed: array of items that were removed from this index\n       *    * addedCount: number of new items added at this index\n       *    * object: a reference to the array in question\n       *    * type: the string literal 'splice'\n       *\n       *   Note that splice records _must_ be normalized such that they are\n       *   reported in index order (raw results from `Object.observe` are not\n       *   ordered and must be normalized/merged before notifying).\n      */\n      notifySplices: function(path, splices) {\n        var info = {};\n        var array = this._get(path, this, info);\n        // Notify change to key-based path\n        this._notifySplices(array, info.path, splices);\n      },\n\n      // Note: this implemetation only accepts key-based array paths\n      _notifySplices: function(array, path, splices) {\n        var change = {\n          keySplices: Polymer.Collection.applySplices(array, splices),\n          indexSplices: splices\n        };\n        var splicesPath = path + '.splices';\n        this._notifyPath(splicesPath, change);\n        this._notifyPath(path + '.length', array.length);\n        // All path notification values are cached on `this.__data__`.\n        // Null here to allow potentially large splice records to be GC'ed.\n        this.__data__[splicesPath] = {keySplices: null, indexSplices: null};\n      },\n\n      _notifySplice: function(array, path, index, added, removed) {\n        this._notifySplices(array, path, [{\n          index: index,\n          addedCount: added,\n          removed: removed,\n          object: array,\n          type: 'splice'\n        }]);\n      },\n\n      /**\n       * Adds items onto the end of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method push\n       * @param {String} path Path to array.\n       * @param {...any} var_args Items to push onto array\n       * @return {number} New length of the array.\n       */\n      push: function(path) {\n        var info = {};\n        var array = this._get(path, this, info);\n        var args = Array.prototype.slice.call(arguments, 1);\n        var len = array.length;\n        var ret = array.push.apply(array, args);\n        if (args.length) {\n          this._notifySplice(array, info.path, len, args.length, []);\n        }\n        return ret;\n      },\n\n      /**\n       * Removes an item from the end of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method pop\n       * @param {String} path Path to array.\n       * @return {any} Item that was removed.\n       */\n      pop: function(path) {\n        var info = {};\n        var array = this._get(path, this, info);\n        var hadLength = Boolean(array.length);\n        var args = Array.prototype.slice.call(arguments, 1);\n        var ret = array.pop.apply(array, args);\n        if (hadLength) {\n          this._notifySplice(array, info.path, array.length, 0, [ret]);\n        }\n        return ret;\n      },\n\n      /**\n       * Starting from the start index specified, removes 0 or more items\n       * from the array and inserts 0 or more new itms in their place.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.splice`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method splice\n       * @param {String} path Path to array.\n       * @param {number} start Index from which to start removing/inserting.\n       * @param {number} deleteCount Number of items to remove.\n       * @param {...any} var_args Items to insert into array.\n       * @return {Array} Array of removed items.\n       */\n      splice: function(path, start) {\n        var info = {};\n        var array = this._get(path, this, info);\n        // Normalize fancy native splice handling of crazy start values\n        if (start < 0) {\n          start = array.length - Math.floor(-start);\n        } else {\n          start = Math.floor(start);\n        }\n        if (!start) {\n          start = 0;\n        }\n        var args = Array.prototype.slice.call(arguments, 1);\n        var ret = array.splice.apply(array, args);\n        var addedCount = Math.max(args.length - 2, 0);\n        if (addedCount || ret.length) {\n          this._notifySplice(array, info.path, start, addedCount, ret);\n        }\n        return ret;\n      },\n\n      /**\n       * Removes an item from the beginning of array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.pop`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method shift\n       * @param {String} path Path to array.\n       * @return {any} Item that was removed.\n       */\n      shift: function(path) {\n        var info = {};\n        var array = this._get(path, this, info);\n        var hadLength = Boolean(array.length);\n        var args = Array.prototype.slice.call(arguments, 1);\n        var ret = array.shift.apply(array, args);\n        if (hadLength) {\n          this._notifySplice(array, info.path, 0, 0, [ret]);\n        }\n        return ret;\n      },\n\n      /**\n       * Adds items onto the beginning of the array at the path specified.\n       *\n       * The arguments after `path` and return value match that of\n       * `Array.prototype.push`.\n       *\n       * This method notifies other paths to the same array that a\n       * splice occurred to the array.\n       *\n       * @method unshift\n       * @param {String} path Path to array.\n       * @param {...any} var_args Items to insert info array\n       * @return {number} New length of the array.\n       */\n      unshift: function(path) {\n        var info = {};\n        var array = this._get(path, this, info);\n        var args = Array.prototype.slice.call(arguments, 1);\n        var ret = array.unshift.apply(array, args);\n        if (args.length) {\n          this._notifySplice(array, info.path, 0, args.length, []);\n        }\n        return ret;\n      },\n\n      // TODO(kschaaf): This is the path analogue to Polymer.Bind.prepareModel,\n      // which provides API for path-based notification on elements with property\n      // effects; this should be re-factored along with the Bind lib, either all on\n      // Base or all in Bind (see issue https://github.com/Polymer/polymer/issues/2547).\n      prepareModelNotifyPath: function(model) {\n        this.mixin(model, {\n          fire: Polymer.Base.fire,\n          _getEvent: Polymer.Base._getEvent,\n          __eventCache: Polymer.Base.__eventCache,\n          notifyPath: Polymer.Base.notifyPath,\n          _get: Polymer.Base._get,\n          _EVENT_CHANGED: Polymer.Base._EVENT_CHANGED,\n          _notifyPath: Polymer.Base._notifyPath,\n          _notifyPathUp: Polymer.Base._notifyPathUp,\n          _pathEffector: Polymer.Base._pathEffector,\n          _annotationPathEffect: Polymer.Base._annotationPathEffect,\n          _complexObserverPathEffect: Polymer.Base._complexObserverPathEffect,\n          _annotatedComputationPathEffect: Polymer.Base._annotatedComputationPathEffect,\n          _computePathEffect: Polymer.Base._computePathEffect,\n          _notifyBoundPaths: Polymer.Base._notifyBoundPaths,\n          _getPathParts: Polymer.Base._getPathParts\n        });\n      }\n\n    });\n\n  })();\n\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard/notify-path.html\n// module id = 54\n// module chunks = 0","/*__wc__loader*/\n\n\n  Polymer.Base._addFeature({\n\n    /**\n     * Rewrites a given URL relative to the original location of the document\n     * containing the `dom-module` for this element.  This method will return\n     * the same URL before and after vulcanization.\n     *\n     * @method resolveUrl\n     * @param {string} url URL to resolve.\n     * @return {string} Rewritten URL relative to the import\n     */\n    resolveUrl: function(url) {\n      return Polymer.ResolveUrl.resolveUrl(url, this._importPath);\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard/resolveUrl.html\n// module id = 55\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/style-util.html');\n\nrequire('../lib/resolve-url.html');\n\nrequire('../lib/style-transformer.html');\n\nrequire('../lib/style-extends.html');\n\nrequire('../lib/settings.html');\n\nrequire('../lib/apply-shim.html');\n\n\n\n  (function() {\n\n    var prepElement = Polymer.Base._prepElement;\n    var nativeShadow = Polymer.Settings.useNativeShadow;\n\n    var styleUtil = Polymer.StyleUtil;\n    var styleTransformer = Polymer.StyleTransformer;\n    var styleExtends = Polymer.StyleExtends;\n    var applyShim = Polymer.ApplyShim;\n\n    var settings = Polymer.Settings;\n\n    Polymer.Base._addFeature({\n\n      _prepElement: function(element) {\n        // To help encapsulate style,\n        // decorate all dom in this element's template with class=\"style-scope element-name\"\n        // This is only needed if using Shady DOM and the css build has not targeted shady dom.\n        // If there is a Shadow DOM targeted build, then dom encapsulation *is* needed.\n        // NOTE: `_encapsulateStyle` is only true unde Shady DOM.\n        if (this._encapsulateStyle && this.__cssBuild !== 'shady') {\n          styleTransformer.element(element, this.is,\n            this._scopeCssViaAttr);\n        }\n        prepElement.call(this, element);\n      },\n\n      _prepStyles: function() {\n        if (this._encapsulateStyle === undefined) {\n          this._encapsulateStyle = !nativeShadow;\n        }\n        // under shady dom, we always output a shimmed style (which may be\n        // empty) so that other dynamic stylesheets can always be placed\n        // after the element's main stylesheet.\n        // This helps ensure element styles are always in registration order.\n        if (!nativeShadow) {\n          this._scopeStyle = styleUtil.applyStylePlaceHolder(this.is);\n        }\n        this.__cssBuild = styleUtil.cssBuildTypeForModule(this.is);\n      },\n\n      _prepShimStyles: function() {\n        if (this._template) {\n          // We can avoid *all* shimming if native properties are used\n          // and there is a shadow css build and we are using native shadow.\n          var hasTargetedCssBuild = styleUtil.isTargetedBuild(this.__cssBuild);\n          if (settings.useNativeCSSProperties && this.__cssBuild === 'shadow'\n            && hasTargetedCssBuild) {\n            if (settings.preserveStyleIncludes) {\n              styleUtil.styleIncludesToTemplate(this._template);\n            }\n            return;\n          }\n          this._styles = this._styles || this._collectStyles();\n          // fixup usage of @apply. Note: this must be done before style\n          // css is calculated.\n          // css build takes care of apply shim, so avoid doing this work.\n          if (settings.useNativeCSSProperties && !this.__cssBuild) {\n            applyShim.transform(this._styles, this);\n          }\n          // calculate element static styling (with a targeted build and native\n          // properties, there's only 1 style and no need to parse it!\n          var cssText = settings.useNativeCSSProperties && hasTargetedCssBuild ?\n            (this._styles.length && this._styles[0].textContent.trim()) :\n            styleTransformer.elementStyles(this);\n          // prepare to shim style properties.\n          this._prepStyleProperties();\n          // apply static styles if and only if\n          // no custom properties are used (otherwise\n          // styles are applied via property shimming)\n          if (!this._needsStyleProperties() && cssText){\n            styleUtil.applyCss(cssText, this.is,\n              nativeShadow ? this._template.content : null, this._scopeStyle);\n          }\n        } else {\n          this._styles = [];\n        }\n      },\n\n      // search for extra style modules via `styleModules`\n      // TODO(sorvell): consider dropping support for `styleModules`\n      _collectStyles: function() {\n        var styles = [];\n        var cssText = '', m$ = this.styleModules;\n        if (m$) {\n          for (var i=0, l=m$.length, m; (i<l) && (m=m$[i]); i++) {\n            cssText += styleUtil.cssFromModule(m);\n          }\n        }\n        cssText += styleUtil.cssFromModule(this.is);\n        // check if we have a disconnected template and add styles from that\n        // if so; if our template has no parent or is not in our dom-module...\n        var p = this._template && this._template.parentNode;\n        if (this._template && (!p || p.id.toLowerCase() !== this.is)) {\n          cssText += styleUtil.cssFromElement(this._template);\n        }\n        if (cssText) {\n          var style = document.createElement('style');\n          style.textContent = cssText;\n          // extends!!\n          if (styleExtends.hasExtends(style.textContent)) {\n            // TODO(sorvell): variable is not used, should it update `style.textContent`?\n            cssText = styleExtends.transform(style);\n          }\n          styles.push(style);\n        }\n        return styles;\n      },\n\n      // instance-y\n      // add scoping class whenever an element is added to localDOM\n      _elementAdd: function(node) {\n        if (this._encapsulateStyle) {\n          // If __styleScoped is set, this is a one-time optimization to\n          // avoid scoping pre-scoped document fragments\n          if (node.__styleScoped) {\n            node.__styleScoped = false;\n          } else {\n            styleTransformer.dom(node, this.is, this._scopeCssViaAttr);\n          }\n        }\n      },\n\n      // remove scoping class whenever an element is removed from localDOM\n      _elementRemove: function(node) {\n        if (this._encapsulateStyle) {\n          styleTransformer.dom(node, this.is, this._scopeCssViaAttr, true);\n        }\n      },\n\n      /**\n       * Apply style scoping to the specified `container` and all its\n       * descendants. If `shouldObserve` is true, changes to the container are\n       * monitored via mutation observer and scoping is applied.\n       *\n       * This method is useful for ensuring proper local DOM CSS scoping\n       * for elements created in this local DOM scope, but out of the\n       * control of this element (i.e., by a 3rd-party library)\n       * when running in non-native Shadow DOM environments.\n       *\n       * @method scopeSubtree\n       * @param {Element} container Element to scope.\n       * @param {boolean} shouldObserve When true, monitors the container\n       *   for changes and re-applies scoping for any future changes.\n       */\n      scopeSubtree: function(container, shouldObserve) {\n        if (nativeShadow) {\n          return;\n        }\n        var self = this;\n        var scopify = function(node) {\n          if (node.nodeType === Node.ELEMENT_NODE) {\n            var className = node.getAttribute('class');\n            node.setAttribute('class', self._scopeElementClass(node, className));\n            var n$ = node.querySelectorAll('*');\n            for (var i=0, n; (i<n$.length) && (n=n$[i]); i++) {\n              className = n.getAttribute('class');\n              n.setAttribute('class', self._scopeElementClass(n, className));\n            }\n          }\n        };\n        scopify(container);\n        if (shouldObserve) {\n          var mo = new MutationObserver(function(mxns) {\n            for (var i=0, m; (i<mxns.length) && (m=mxns[i]); i++) {\n              if (m.addedNodes) {\n                for (var j=0; j < m.addedNodes.length; j++) {\n                  scopify(m.addedNodes[j]);\n                }\n              }\n            }\n          });\n          mo.observe(container, {childList: true, subtree: true});\n          return mo;\n        }\n      }\n\n    });\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard/styling.html\n// module id = 56\n// module chunks = 0","/*__wc__loader*/\n\n\n/*\n  Extremely simple css parser. Intended to be not more than what we need\n  and definitely not necessarily correct =).\n*/\nPolymer.CssParse = (function() {\n\n  return {\n    // given a string of css, return a simple rule tree\n    parse: function(text) {\n      text = this._clean(text);\n      return this._parseCss(this._lex(text), text);\n    },\n\n    // remove stuff we don't care about that may hinder parsing\n    _clean: function (cssText) {\n      return cssText.replace(this._rx.comments, '').replace(this._rx.port, '');\n    },\n\n    // super simple {...} lexer that returns a node tree\n    _lex: function(text) {\n      var root = {start: 0, end: text.length};\n      var n = root;\n      for (var i=0, l=text.length; i < l; i++) {\n        switch (text[i]) {\n          case this.OPEN_BRACE:\n            //console.group(i);\n            if (!n.rules) {\n              n.rules = [];\n            }\n            var p = n;\n            var previous = p.rules[p.rules.length-1];\n            n = {start: i+1, parent: p, previous: previous};\n            p.rules.push(n);\n            break;\n          case this.CLOSE_BRACE:\n            //console.groupEnd(n.start);\n            n.end = i+1;\n            n = n.parent || root;\n            break;\n        }\n      }\n      return root;\n    },\n\n    // add selectors/cssText to node tree\n    _parseCss: function(node, text) {\n      var t = text.substring(node.start, node.end-1);\n      node.parsedCssText = node.cssText = t.trim();\n      if (node.parent) {\n        var ss = node.previous ? node.previous.end : node.parent.start;\n        t = text.substring(ss, node.start-1);\n        t = this._expandUnicodeEscapes(t);\n        t = t.replace(this._rx.multipleSpaces, ' ');\n        // TODO(sorvell): ad hoc; make selector include only after last ;\n        // helps with mixin syntax\n        t = t.substring(t.lastIndexOf(';')+1);\n        var s = node.parsedSelector = node.selector = t.trim();\n        node.atRule = (s.indexOf(this.AT_START) === 0);\n        // note, support a subset of rule types...\n        if (node.atRule) {\n          if (s.indexOf(this.MEDIA_START) === 0) {\n            node.type = this.types.MEDIA_RULE;\n          } else if (s.match(this._rx.keyframesRule)) {\n            node.type = this.types.KEYFRAMES_RULE;\n            node.keyframesName =\n                node.selector.split(this._rx.multipleSpaces).pop();\n          }\n        } else {\n          if (s.indexOf(this.VAR_START) === 0) {\n            node.type = this.types.MIXIN_RULE;\n          } else {\n            node.type = this.types.STYLE_RULE;\n          }\n        }\n      }\n      var r$ = node.rules;\n      if (r$) {\n        for (var i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n          this._parseCss(r, text);\n        }\n      }\n      return node;\n    },\n\n    // conversion of sort unicode escapes with spaces like `\\33 ` (and longer) into\n    // expanded form that doesn't require trailing space `\\000033`\n    _expandUnicodeEscapes : function(s) {\n      return s.replace(/\\\\([0-9a-f]{1,6})\\s/gi, function() {\n        var code = arguments[1], repeat = 6 - code.length;\n        while (repeat--) {\n          code = '0' + code;\n        }\n        return '\\\\' + code;\n      });\n    },\n\n    // stringify parsed css.\n    stringify: function(node, preserveProperties, text) {\n      text = text || '';\n      // calc rule cssText\n      var cssText = '';\n      if (node.cssText || node.rules) {\n        var r$ = node.rules;\n        if (r$ && !this._hasMixinRules(r$)) {\n          for (var i=0, l=r$.length, r; (i<l) && (r=r$[i]); i++) {\n            cssText = this.stringify(r, preserveProperties, cssText);\n          }\n        } else {\n          cssText = preserveProperties ? node.cssText :\n            this.removeCustomProps(node.cssText);\n          cssText = cssText.trim();\n          if (cssText) {\n            cssText = '  ' + cssText + '\\n';\n          }\n        }\n      }\n      // emit rule if there is cssText\n      if (cssText) {\n        if (node.selector) {\n          text += node.selector + ' ' + this.OPEN_BRACE + '\\n';\n        }\n        text += cssText;\n        if (node.selector) {\n          text += this.CLOSE_BRACE + '\\n\\n';\n        }\n      }\n      return text;\n    },\n\n    _hasMixinRules: function(rules) {\n      return rules[0].selector.indexOf(this.VAR_START) === 0;\n    },\n\n    removeCustomProps: function(cssText) {\n      cssText = this.removeCustomPropAssignment(cssText);\n      return this.removeCustomPropApply(cssText);\n    },\n\n    removeCustomPropAssignment: function(cssText) {\n      return cssText\n        .replace(this._rx.customProp, '')\n        .replace(this._rx.mixinProp, '');\n    },\n\n    removeCustomPropApply: function(cssText) {\n      return cssText\n        .replace(this._rx.mixinApply, '')\n        .replace(this._rx.varApply, '');\n    },\n\n    types: {\n      STYLE_RULE: 1,\n      KEYFRAMES_RULE: 7,\n      MEDIA_RULE: 4,\n      MIXIN_RULE: 1000\n    },\n\n    OPEN_BRACE: '{',\n    CLOSE_BRACE: '}',\n\n    // helper regexp's\n    _rx: {\n      comments: /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//gim,\n      port: /@import[^;]*;/gim,\n      customProp: /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?(?:[;\\n]|$)/gim,\n      mixinProp:  /(?:^[^;\\-\\s}]+)?--[^;{}]*?:[^{};]*?{[^}]*?}(?:[;\\n]|$)?/gim,\n      mixinApply: /@apply\\s*\\(?[^);]*\\)?\\s*(?:[;\\n]|$)?/gim,\n      varApply: /[^;:]*?:[^;]*?var\\([^;]*\\)(?:[;\\n]|$)?/gim,\n      keyframesRule: /^@[^\\s]*keyframes/,\n      multipleSpaces: /\\s+/g\n    },\n\n    VAR_START: '--',\n    MEDIA_START: '@media',\n    AT_START: '@'\n\n  };\n\n})();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/css-parse.html\n// module id = 57\n// module chunks = 0","/*__wc__loader*/\nrequire('./style-util.html');\n\n\n\nPolymer.StyleExtends = (function() {\n\n  var styleUtil = Polymer.StyleUtil;\n\n  return {\n\n    hasExtends: function(cssText) {\n      return Boolean(cssText.match(this.rx.EXTEND));\n    },\n\n    transform: function(style) {\n      var rules = styleUtil.rulesForStyle(style);\n      var self = this;\n      styleUtil.forEachRule(rules, function(rule) {\n        self._mapRuleOntoParent(rule);\n        if (rule.parent) {\n          var m;\n          while ((m = self.rx.EXTEND.exec(rule.cssText))) {\n            var extend = m[1];\n            var extendor = self._findExtendor(extend, rule);\n            if (extendor) {\n              self._extendRule(rule, extendor);\n            }\n          }\n        }\n        rule.cssText = rule.cssText.replace(self.rx.EXTEND, '');\n      });\n      // strip unused % selectors\n      return styleUtil.toCssText(rules, function(rule) {\n        if (rule.selector.match(self.rx.STRIP)) {\n          rule.cssText = '';\n        }\n      }, true);\n    },\n\n    _mapRuleOntoParent: function(rule) {\n      if (rule.parent) {\n        var map = rule.parent.map || (rule.parent.map = {});\n        var parts = rule.selector.split(',');\n        for (var i=0, p; i < parts.length; i++) {\n          p = parts[i];\n          map[p.trim()] = rule;\n        }\n        return map;\n      }\n    },\n\n    _findExtendor: function(extend, rule) {\n      return rule.parent && rule.parent.map && rule.parent.map[extend] ||\n        this._findExtendor(extend, rule.parent);\n    },\n\n    _extendRule: function(target, source) {\n      if (target.parent !== source.parent) {\n        this._cloneAndAddRuleToParent(source, target.parent);\n      }\n      target.extends = target.extends || [];\n      target.extends.push(source);\n      // TODO: this misses `%foo, .bar` as an unetended selector but\n      // this seems rare and could possibly be unsupported.\n      source.selector = source.selector.replace(this.rx.STRIP, '');\n      source.selector = (source.selector && source.selector + ',\\n') +\n        target.selector;\n      if (source.extends) {\n        source.extends.forEach(function(e) {\n          this._extendRule(target, e);\n        }, this);\n      }\n    },\n\n    _cloneAndAddRuleToParent: function(rule, parent) {\n      rule = Object.create(rule);\n      rule.parent = parent;\n      if (rule.extends) {\n        rule.extends = rule.extends.slice();\n      }\n      parent.rules.push(rule);\n    },\n\n    rx: {\n      EXTEND: /@extends\\(([^)]*)\\)\\s*?;/gim,\n      STRIP: /%[^,]*$/\n    }\n\n  };\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/style-extends.html\n// module id = 58\n// module chunks = 0","/*__wc__loader*/\nrequire('../lib/style-util.html');\n\nrequire('../lib/style-properties.html');\n\nrequire('../lib/settings.html');\n\nrequire('../lib/style-defaults.html');\n\nrequire('../lib/style-cache.html');\n\n\n  (function() {\n    'use strict';\n\n    var serializeValueToAttribute = Polymer.Base.serializeValueToAttribute;\n\n    var propertyUtils = Polymer.StyleProperties;\n    var styleTransformer = Polymer.StyleTransformer;\n    var styleDefaults = Polymer.StyleDefaults;\n\n    var nativeShadow = Polymer.Settings.useNativeShadow;\n    var nativeVariables = Polymer.Settings.useNativeCSSProperties;\n\n    Polymer.Base._addFeature({\n\n      _prepStyleProperties: function() {\n        // note: an element should produce an x-scope stylesheet\n        // if it has any _ownStylePropertyNames\n        if (!nativeVariables) {\n          this._ownStylePropertyNames = this._styles && this._styles.length ?\n            propertyUtils.decorateStyles(this._styles, this) :\n            null;\n        }\n      },\n\n      /**\n       * An element's style properties can be directly modified by\n       * setting key-value pairs in `customStyle` on the element\n       * (analogous to setting `style`) and then calling `updateStyles()`.\n       *\n       */\n      customStyle: null,\n\n      /**\n     * Returns the computed style value for the given property.\n     * @param {String} property\n     * @return {String} the computed value\n     */\n      getComputedStyleValue: function(property) {\n        // refresh the style properties for this node\n        if (!nativeVariables && !this._styleProperties) {\n          this._computeStyleProperties();\n        }\n        return !nativeVariables && this._styleProperties &&\n          this._styleProperties[property] ||\n          getComputedStyle(this).getPropertyValue(property);\n      },\n\n      // here we have an instance time spot to put custom property data\n      _setupStyleProperties: function() {\n        this.customStyle = {};\n        this._styleCache = null;\n        this._styleProperties = null;\n        this._scopeSelector = null;\n        this._ownStyleProperties = null;\n        this._customStyle = null;\n      },\n\n      // TODO(dfreedm): should only be true if and only if browser doesn't\n      // support native custom properties.\n      _needsStyleProperties: function() {\n        return Boolean(!nativeVariables && this._ownStylePropertyNames &&\n          this._ownStylePropertyNames.length);\n      },\n\n      _validateApplyShim: function() {\n        if (this.__applyShimInvalid) {\n          // rerun apply shim\n          Polymer.ApplyShim.transform(this._styles, this.__proto__);\n          var cssText = styleTransformer.elementStyles(this);\n          if (nativeShadow) {\n            // replace style in template\n            var templateStyle = this._template.content.querySelector('style');\n            if (templateStyle) {\n              templateStyle.textContent = cssText;\n            }\n          } else {\n            // replace scoped style\n            var shadyStyle = this._scopeStyle && this._scopeStyle.nextSibling;\n            if (shadyStyle) {\n              shadyStyle.textContent = cssText;\n            }\n          }\n        }\n      },\n\n      _beforeAttached: function() {\n        // note: do this once automatically,\n        // then requires calling `updateStyles`\n        if ((!this._scopeSelector || this.__stylePropertiesInvalid) &&\n          this._needsStyleProperties()) {\n          this.__stylePropertiesInvalid = false;\n          this._updateStyleProperties();\n        }\n      },\n\n      _findStyleHost: function() {\n        var e = this, root;\n        while ((root = Polymer.dom(e).getOwnerRoot())) {\n          if (Polymer.isInstance(root.host)) {\n            return root.host;\n          }\n          e = root.host;\n        }\n        return styleDefaults;\n      },\n\n      _updateStyleProperties: function() {\n        var info, scope = this._findStyleHost();\n        // ensure scope properties exist before any access of scope cache.\n        if (!scope._styleProperties) {\n          scope._computeStyleProperties();\n        }\n        // install cache in host if it doesn't exist.\n        if (!scope._styleCache) {\n          scope._styleCache = new Polymer.StyleCache();\n        }\n        var scopeData = propertyUtils\n          .propertyDataFromStyles(scope._styles, this);\n        // the scope cache does not evaluate if @media rules, :host(), or :host-context() rules defined in this element have changed\n        // therefore, if we detect those rules, we opt-out of the scope cache\n        var scopeCacheable = !this.__notStyleScopeCacheable;\n        // look in scope cache\n        if (scopeCacheable) {\n          scopeData.key.customStyle = this.customStyle;\n          info = scope._styleCache.retrieve(this.is, scopeData.key, this._styles);\n        }\n        // compute style properties (fast path, if cache hit)\n        var scopeCached = Boolean(info);\n        if (scopeCached) {\n          // when scope cached, we can safely take style propertis out of the\n          // scope cache because they are only for this scope.\n          this._styleProperties = info._styleProperties;\n        } else {\n          this._computeStyleProperties(scopeData.properties);\n        }\n        this._computeOwnStyleProperties();\n        // cache miss, do work!\n        if (!scopeCached) {\n          // and look in 2ndary global cache\n          info = styleCache.retrieve(this.is,\n            this._ownStyleProperties, this._styles);\n        }\n        var globalCached = Boolean(info) && !scopeCached;\n        // now we have properties and a cached style if one\n        // is available.\n        var style = this._applyStyleProperties(info);\n        // no cache so store in cache\n        //console.warn(this.is, scopeCached, globalCached, info && info._scopeSelector);\n        if (!scopeCached) {\n          // create an info object for caching\n          // TODO(sorvell): clone style node when using native Shadow DOM\n          // so a style used in a root does not itself get stored in the cache\n          // This can lead to incorrect sharing, but should be fixed\n          // in `Polymer.StyleProperties.applyElementStyle`\n          style = style && nativeShadow ? style.cloneNode(true) : style;\n          info = {\n            style: style,\n            _scopeSelector: this._scopeSelector,\n            _styleProperties: this._styleProperties\n          };\n          if (scopeCacheable) {\n            scopeData.key.customStyle = {};\n            this.mixin(scopeData.key.customStyle, this.customStyle);\n            scope._styleCache.store(this.is, info, scopeData.key, this._styles);\n          }\n          // global cache key is all property values consumed in this element,\n          // we _can_ use the global cache with @media, :host(), and :host-context() rules, as _computeStyleProperties will determine if those properties have changed\n          if (!globalCached) {\n            // save in global cache\n            styleCache.store(this.is, Object.create(info), this._ownStyleProperties,\n            this._styles);\n          }\n        }\n      },\n\n      _computeStyleProperties: function(scopeProps) {\n        // get scope and make sure it has properties\n        var scope = this._findStyleHost();\n        // force scope to compute properties if they don't exist\n        if (!scope._styleProperties) {\n          scope._computeStyleProperties();\n        }\n        // start with scope style properties\n        var props = Object.create(scope._styleProperties);\n        // collect properties from :host and :root\n        var hostAndRootProps =\n          propertyUtils.hostAndRootPropertiesForScope(this);\n        // mixin own host properties (lower specifity than scope props)\n        this.mixin(props, hostAndRootProps.hostProps);\n        // mixin properties matching this element in scope\n        scopeProps = scopeProps ||\n          propertyUtils.propertyDataFromStyles(scope._styles, this).properties;\n        this.mixin(props, scopeProps);\n        // finally mixin properties inherent to this element\n        this.mixin(props, hostAndRootProps.rootProps);\n        propertyUtils.mixinCustomStyle(props, this.customStyle);\n        // reify properties (note: only does own properties)\n        propertyUtils.reify(props);\n        this._styleProperties = props;\n      },\n\n      _computeOwnStyleProperties: function() {\n        var props = {};\n        for (var i=0, n; i < this._ownStylePropertyNames.length; i++) {\n          n = this._ownStylePropertyNames[i];\n          props[n] = this._styleProperties[n];\n        }\n        this._ownStyleProperties = props;\n      },\n\n      _scopeCount: 0,\n\n      _applyStyleProperties: function(info) {\n        // update scope selector (needed for style transformation)\n        var oldScopeSelector = this._scopeSelector;\n        // note, the scope selector is incremented per class counter\n        this._scopeSelector = info ? info._scopeSelector :\n          this.is + '-' + this.__proto__._scopeCount++;\n        var style = propertyUtils.applyElementStyle(this,\n          this._styleProperties, this._scopeSelector, info && info.style);\n        // apply scope selector\n        if (!nativeShadow) {\n          propertyUtils.applyElementScopeSelector(this, this._scopeSelector,\n            oldScopeSelector, this._scopeCssViaAttr);\n        }\n        return style;\n      },\n\n      serializeValueToAttribute: function(value, attribute, node) {\n        // override to ensure whenever classes are set, we need to shim them.\n        node = node || this;\n        if (attribute === 'class' && !nativeShadow) {\n          // host needed to scope styling.\n          // Under Shady DOM, domHost is safe to use here because we know it\n          // is a Polymer element\n          var host = node === this ? (this.domHost || this.dataHost) : this;\n          if (host) {\n            value = host._scopeElementClass(node, value);\n          }\n        }\n        // note: using Polymer.dom here ensures that any attribute sets will\n        // provoke distribution if necessary; do this if and only if necessary\n        node = (this.shadyRoot && this.shadyRoot._hasDistributed) ?\n          Polymer.dom(node) : node;\n        serializeValueToAttribute.call(this, value, attribute, node);\n      },\n\n      _scopeElementClass: function(element, selector) {\n        if (!nativeShadow && !this._scopeCssViaAttr) {\n          selector = (selector ? selector + ' ' : '') + SCOPE_NAME + ' ' + this.is +\n            (element._scopeSelector ? ' ' +  XSCOPE_NAME + ' ' +\n            element._scopeSelector : '');\n        }\n        return selector;\n      },\n\n      /**\n       * Re-evaluates and applies custom CSS properties based on dynamic\n       * changes to this element's scope, such as adding or removing classes\n       * in this element's local DOM.\n       *\n       * For performance reasons, Polymer's custom CSS property shim relies\n       * on this explicit signal from the user to indicate when changes have\n       * been made that affect the values of custom properties.\n       *\n       * @method updateStyles\n       * @param {Object=} properties Properties object which is mixed into\n       * the element's `customStyle` property. This argument provides a shortcut\n       * for setting `customStyle` and then calling `updateStyles`.\n      */\n      updateStyles: function(properties) {\n        if (properties) {\n          this.mixin(this.customStyle, properties);\n        }\n        if (nativeVariables) {\n          propertyUtils.updateNativeStyleProperties(this, this.customStyle);\n        } else {\n          // actually process styling changes if and only if attached\n          if (this.isAttached) {\n            // skip applying properties to self if not used\n            if (this._needsStyleProperties()) {\n              this._updateStyleProperties();\n            // when an element doesn't use style properties, its own properties\n            // should be invalidated so elements down the tree update ok.\n            } else {\n              this._styleProperties = null;\n            }\n          // if called when an element is not attached, invalidate\n          // styling by unsetting scopeSelector.\n          } else {\n            this.__stylePropertiesInvalid = true;\n          }\n          if (this._styleCache) {\n            this._styleCache.clear();\n          }\n          // go down...\n          this._updateRootStyles();\n        }\n      },\n\n      _updateRootStyles: function(root) {\n        root = root || this.root;\n        var c$ = Polymer.dom(root)._query(function(e) {\n          return e.shadyRoot || e.shadowRoot;\n        });\n        for (var i=0, l= c$.length, c; (i<l) && (c=c$[i]); i++) {\n          if (c.updateStyles) {\n            c.updateStyles();\n          }\n        }\n      }\n\n    });\n\n    /**\n     * Force all custom elements using cross scope custom properties,\n     * to update styling.\n     */\n    Polymer.updateStyles = function(properties) {\n      // update default/custom styles\n      styleDefaults.updateStyles(properties);\n      // search the document for elements to update\n      Polymer.Base._updateRootStyles(document);\n    };\n\n    var styleCache = new Polymer.StyleCache();\n    Polymer.customStyleCache = styleCache;\n\n    var SCOPE_NAME = styleTransformer.SCOPE_NAME;\n    var XSCOPE_NAME = propertyUtils.XSCOPE_NAME;\n\n  })();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/standard/x-styling.html\n// module id = 59\n// module chunks = 0","/*__wc__loader*/\nrequire('./dom-api.html');\n\nrequire('./style-transformer.html');\n\nrequire('./style-util.html');\n\nrequire('./settings.html');\n\n\n\n  Polymer.StyleProperties = (function() {\n    'use strict';\n\n    var matchesSelector = Polymer.DomApi.matchesSelector;\n    var styleUtil = Polymer.StyleUtil;\n    var styleTransformer = Polymer.StyleTransformer;\n    var IS_IE = navigator.userAgent.match('Trident');\n\n    var settings = Polymer.Settings;\n\n    return {\n\n      // decorates styles with rule info and returns an array of used style\n      // property names\n      decorateStyles: function(styles, scope) {\n        var self = this, props = {}, keyframes = [], ruleIndex = 0;\n        var scopeSelector = styleTransformer._calcHostScope(scope.is, scope.extends);\n        styleUtil.forRulesInStyles(styles, function(rule, style) {\n          self.decorateRule(rule);\n          // mark in-order position of ast rule in styles block, used for cache key\n          rule.index = ruleIndex++;\n          self.whenHostOrRootRule(scope, rule, style, function(info) {\n            // we can't cache styles with :host and :root props in @media rules\n            if (rule.parent.type === styleUtil.ruleTypes.MEDIA_RULE) {\n              scope.__notStyleScopeCacheable = true;\n            }\n            if (info.isHost) {\n              // check if the selector is in the form of `:host-context()` or `:host()`\n              // if so, this style is not cacheable\n              var hostContextOrFunction = info.selector.split(' ').some(function(s) {\n                return s.indexOf(scopeSelector) === 0 && s.length !== scopeSelector.length;\n              });\n              scope.__notStyleScopeCacheable = scope.__notStyleScopeCacheable || hostContextOrFunction;\n            }\n          });\n          self.collectPropertiesInCssText(rule.propertyInfo.cssText, props);\n        }, function onKeyframesRule(rule) {\n          keyframes.push(rule);\n        });\n        // Cache all found keyframes rules for later reference:\n        styles._keyframes = keyframes;\n        // return this list of property names *consumes* in these styles.\n        var names = [];\n        for (var i in props) {\n          names.push(i);\n        }\n        return names;\n      },\n\n      // decorate a single rule with property info\n      decorateRule: function(rule) {\n        if (rule.propertyInfo) {\n          return rule.propertyInfo;\n        }\n        var info = {}, properties = {};\n        var hasProperties = this.collectProperties(rule, properties);\n        if (hasProperties) {\n          info.properties = properties;\n          // TODO(sorvell): workaround parser seeing mixins as additional rules\n          rule.rules = null;\n        }\n        info.cssText = this.collectCssText(rule);\n        rule.propertyInfo = info;\n        return info;\n      },\n\n      // collects the custom properties from a rule's cssText\n      collectProperties: function(rule, properties) {\n        var info = rule.propertyInfo;\n        if (info) {\n          if (info.properties) {\n            Polymer.Base.mixin(properties, info.properties);\n            return true;\n          }\n        } else {\n          var m, rx = this.rx.VAR_ASSIGN;\n          var cssText = rule.parsedCssText;\n          var value;\n          var any;\n          while ((m = rx.exec(cssText))) {\n            // note: group 2 is var, 3 is mixin\n            value = (m[2] || m[3]).trim();\n            // value of 'inherit' is equivalent to not setting the property here\n            if (value !== 'inherit') {\n              properties[m[1].trim()] = value;\n            }\n            any = true;\n          }\n          return any;\n        }\n      },\n\n      // returns cssText of properties that consume variables/mixins\n      collectCssText: function(rule) {\n        return this.collectConsumingCssText(rule.parsedCssText);\n      },\n\n      // NOTE: we support consumption inside mixin assignment\n      // but not production, so strip out {...}\n      collectConsumingCssText: function(cssText) {\n        return cssText.replace(this.rx.BRACKETED, '')\n          .replace(this.rx.VAR_ASSIGN, '');\n      },\n\n      collectPropertiesInCssText: function(cssText, props) {\n        var m;\n        while ((m = this.rx.VAR_CONSUMED.exec(cssText))) {\n          var name = m[1];\n          // This regex catches all variable names, and following non-whitespace char\n          // If next char is not ':', then variable is a consumer\n          if (m[2] !== ':') {\n            props[name] = true;\n          }\n        }\n      },\n\n      // turns custom properties into realized values.\n      reify: function(props) {\n        // big perf optimization here: reify only *own* properties\n        // since this object has __proto__ of the element's scope properties\n        var names = Object.getOwnPropertyNames(props);\n        for (var i=0, n; i < names.length; i++) {\n          n = names[i];\n          props[n] = this.valueForProperty(props[n], props);\n        }\n      },\n\n      // given a property value, returns the reified value\n      // a property value may be:\n      // (1) a literal value like: red or 5px;\n      // (2) a variable value like: var(--a), var(--a, red), or var(--a, --b) or\n      // var(--a, var(--b));\n      // (3) a literal mixin value like { properties }. Each of these properties\n      // can have values that are: (a) literal, (b) variables, (c) @apply mixins.\n      valueForProperty: function(property, props) {\n        // case (1) default\n        // case (3) defines a mixin and we have to reify the internals\n        if (property) {\n          if (property.indexOf(';') >=0) {\n            property = this.valueForProperties(property, props);\n          } else {\n            // case (2) variable\n            var self = this;\n            var fn = function(prefix, value, fallback, suffix) {\n              var propertyValue = self.valueForProperty(props[value], props);\n              // if value is \"initial\", then the variable should be treated as unset\n              if (!propertyValue || propertyValue === 'initial') {\n                // fallback may be --a or var(--a) or literal\n                propertyValue = self.valueForProperty(props[fallback] || fallback, props) ||\n                fallback;\n              } else if (propertyValue === 'apply-shim-inherit') {\n                // CSS build will replace `inherit` with `apply-shim-inherit`\n                // for use with native css variables.\n                // Since we have full control, we can use `inherit` directly.\n                propertyValue = 'inherit';\n              }\n              return prefix + (propertyValue || '') + suffix;\n            };\n            property = styleUtil.processVariableAndFallback(property, fn);\n          }\n        }\n        return property && property.trim() || '';\n      },\n\n      // note: we do not yet support mixin within mixin\n      valueForProperties: function(property, props) {\n        var parts = property.split(';');\n        for (var i=0, p, m; i<parts.length; i++) {\n          if ((p = parts[i])) {\n            this.rx.MIXIN_MATCH.lastIndex = 0;\n            m = this.rx.MIXIN_MATCH.exec(p);\n            if (m) {\n              p = this.valueForProperty(props[m[1]], props);\n            } else {\n              var colon = p.indexOf(':');\n              if (colon !== -1) {\n                var pp = p.substring(colon);\n                pp = pp.trim();\n                pp = this.valueForProperty(pp, props) || pp;\n                p = p.substring(0, colon) + pp;\n              }\n            }\n            parts[i] = (p && p.lastIndexOf(';') === p.length - 1) ?\n              // strip trailing ;\n              p.slice(0, -1) :\n              p || '';\n          }\n        }\n        return parts.join(';');\n      },\n\n      applyProperties: function(rule, props) {\n        var output = '';\n        // dynamically added sheets may not be decorated so ensure they are.\n        if (!rule.propertyInfo) {\n          this.decorateRule(rule);\n        }\n        if (rule.propertyInfo.cssText) {\n          output = this.valueForProperties(rule.propertyInfo.cssText, props);\n        }\n        rule.cssText = output;\n      },\n\n      // Apply keyframe transformations to the cssText of a given rule. The\n      // keyframeTransforms object is a map of keyframe names to transformer\n      // functions which take in cssText and spit out transformed cssText.\n      applyKeyframeTransforms: function(rule, keyframeTransforms) {\n        var input = rule.cssText;\n        var output = rule.cssText;\n        if (rule.hasAnimations == null) {\n          // Cache whether or not the rule has any animations to begin with:\n          rule.hasAnimations = this.rx.ANIMATION_MATCH.test(input);\n        }\n        // If there are no animations referenced, we can skip transforms:\n        if (rule.hasAnimations) {\n          var transform;\n          // If we haven't transformed this rule before, we iterate over all\n          // transforms:\n          if (rule.keyframeNamesToTransform == null) {\n            rule.keyframeNamesToTransform = [];\n            for (var keyframe in keyframeTransforms) {\n              transform = keyframeTransforms[keyframe];\n              output = transform(input);\n              // If the transform actually changed the CSS text, we cache the\n              // transform name for future use:\n              if (input !== output) {\n                input = output;\n                rule.keyframeNamesToTransform.push(keyframe);\n              }\n            }\n          } else {\n            // If we already have a list of keyframe names that apply to this\n            // rule, we apply only those keyframe name transforms:\n            for (var i = 0; i < rule.keyframeNamesToTransform.length; ++i) {\n              transform = keyframeTransforms[rule.keyframeNamesToTransform[i]];\n              input = transform(input);\n            }\n            output = input;\n          }\n        }\n        rule.cssText = output;\n      },\n\n      // Test if the rules in these styles matches the given `element` and if so,\n      // collect any custom properties into `props`.\n      propertyDataFromStyles: function(styles, element) {\n        var props = {}, self = this;\n        // generates a unique key for these matches\n        var o = [];\n        // note: active rules excludes non-matching @media rules\n        styleUtil.forActiveRulesInStyles(styles, function(rule) {\n          // TODO(sorvell): we could trim the set of rules at declaration\n          // time to only include ones that have properties\n          if (!rule.propertyInfo) {\n            self.decorateRule(rule);\n          }\n          // match element against transformedSelector: selector may contain\n          // unwanted uniquification and parsedSelector does not directly match\n          // for :host selectors.\n          var selectorToMatch = rule.transformedSelector || rule.parsedSelector;\n          if (element && rule.propertyInfo.properties && selectorToMatch) {\n            if (matchesSelector.call(element, selectorToMatch)) {\n              self.collectProperties(rule, props);\n              // produce numeric key for these matches for lookup\n              addToBitMask(rule.index, o);\n            }\n          }\n        });\n        return {properties: props, key: o};\n      },\n\n      _rootSelector: /:root|:host\\s*>\\s*\\*/,\n\n      _checkRoot: function(hostScope, selector) {\n        return Boolean(selector.match(this._rootSelector)) ||\n          (hostScope === 'html' && selector.indexOf('html') > -1);\n      },\n\n      whenHostOrRootRule: function(scope, rule, style, callback) {\n        if (!rule.propertyInfo) {\n          self.decorateRule(rule);\n        }\n        if (!rule.propertyInfo.properties) {\n          return;\n        }\n        var hostScope = scope.is ?\n        styleTransformer._calcHostScope(scope.is, scope.extends) :\n        'html';\n        var parsedSelector = rule.parsedSelector;\n        var isRoot = this._checkRoot(hostScope, parsedSelector);\n        var isHost = !isRoot && parsedSelector.indexOf(':host') === 0;\n        // build info is either in scope (when scope is an element) or in the style\n        // when scope is the default scope; note: this allows default scope to have\n        // mixed mode built and unbuilt styles.\n        var cssBuild = scope.__cssBuild || style.__cssBuild;\n        if (cssBuild === 'shady') {\n          // :root -> x-foo > *.x-foo for elements and html for custom-style\n          isRoot = parsedSelector === (hostScope + ' > *.' + hostScope) || parsedSelector.indexOf('html') > -1;\n          // :host -> x-foo for elements, but sub-rules have .x-foo in them\n          isHost = !isRoot && parsedSelector.indexOf(hostScope) === 0;\n        }\n        if (!isRoot && !isHost) {\n          return;\n        }\n        var selectorToMatch = hostScope;\n        if (isHost) {\n          // need to transform :host under ShadowDOM because `:host` does not work with `matches`\n          if (settings.useNativeShadow && !rule.transformedSelector) {\n            // transform :host into a matchable selector\n            rule.transformedSelector =\n            styleTransformer._transformRuleCss(\n              rule,\n              styleTransformer._transformComplexSelector,\n              scope.is,\n              hostScope\n            );\n          }\n          // parsedSelector fallback for 'shady' css build\n          selectorToMatch = rule.transformedSelector || rule.parsedSelector;\n        }\n        if (isRoot && hostScope === 'html') {\n          selectorToMatch = rule.transformedSelector || rule.parsedSelector;\n        }\n        callback({\n          selector: selectorToMatch,\n          isHost: isHost,\n          isRoot: isRoot\n        });\n      },\n\n      hostAndRootPropertiesForScope: function(scope) {\n        var hostProps = {}, rootProps = {}, self = this;\n        // note: active rules excludes non-matching @media rules\n        styleUtil.forActiveRulesInStyles(scope._styles, function(rule, style) {\n          // if scope is StyleDefaults, use _element for matchesSelector\n          self.whenHostOrRootRule(scope, rule, style, function(info) {\n            var element = scope._element || scope;\n            if (matchesSelector.call(element, info.selector)) {\n              if (info.isHost) {\n                self.collectProperties(rule, hostProps);\n              } else {\n                self.collectProperties(rule, rootProps);\n              }\n            }\n          });\n        });\n        return {rootProps: rootProps, hostProps: hostProps};\n      },\n\n      transformStyles: function(element, properties, scopeSelector) {\n        var self = this;\n        var hostSelector = styleTransformer\n          ._calcHostScope(element.is, element.extends);\n        var rxHostSelector = element.extends ?\n          '\\\\' + hostSelector.slice(0, -1) + '\\\\]' :\n          hostSelector;\n        var hostRx = new RegExp(this.rx.HOST_PREFIX + rxHostSelector +\n          this.rx.HOST_SUFFIX);\n        var keyframeTransforms =\n          this._elementKeyframeTransforms(element, scopeSelector);\n        return styleTransformer.elementStyles(element, function(rule) {\n          self.applyProperties(rule, properties);\n          if (!settings.useNativeShadow &&\n              !Polymer.StyleUtil.isKeyframesSelector(rule) &&\n              rule.cssText) {\n            // NOTE: keyframe transforms only scope munge animation names, so it\n            // is not necessary to apply them in ShadowDOM.\n            self.applyKeyframeTransforms(rule, keyframeTransforms);\n            self._scopeSelector(rule, hostRx, hostSelector,\n              element._scopeCssViaAttr, scopeSelector);\n          }\n        });\n      },\n\n      _elementKeyframeTransforms: function(element, scopeSelector) {\n        var keyframesRules = element._styles._keyframes;\n        var keyframeTransforms = {};\n        if (!settings.useNativeShadow && keyframesRules) {\n          // For non-ShadowDOM, we transform all known keyframes rules in\n          // advance for the current scope. This allows us to catch keyframes\n          // rules that appear anywhere in the stylesheet:\n          for (var i = 0, keyframesRule = keyframesRules[i];\n               i < keyframesRules.length;\n               keyframesRule = keyframesRules[++i]) {\n            this._scopeKeyframes(keyframesRule, scopeSelector);\n            keyframeTransforms[keyframesRule.keyframesName] =\n                this._keyframesRuleTransformer(keyframesRule);\n          }\n        }\n        return keyframeTransforms;\n      },\n\n      // Generate a factory for transforming a chunk of CSS text to handle a\n      // particular scoped keyframes rule.\n      _keyframesRuleTransformer: function(keyframesRule) {\n        return function(cssText) {\n          return cssText.replace(\n              keyframesRule.keyframesNameRx,\n              keyframesRule.transformedKeyframesName);\n        };\n      },\n\n      // Transforms `@keyframes` names to be unique for the current host.\n      // Example: @keyframes foo-anim -> @keyframes foo-anim-x-foo-0\n      _scopeKeyframes: function(rule, scopeId) {\n        rule.keyframesNameRx = new RegExp(rule.keyframesName, 'g');\n        rule.transformedKeyframesName = rule.keyframesName + '-' + scopeId;\n        rule.transformedSelector = rule.transformedSelector || rule.selector;\n        rule.selector = rule.transformedSelector.replace(\n            rule.keyframesName, rule.transformedKeyframesName);\n      },\n\n      // Strategy: x scope shim a selector e.g. to scope `.x-foo-42` (via classes):\n      // non-host selector: .a.x-foo -> .x-foo-42 .a.x-foo\n      // host selector: x-foo.wide -> .x-foo-42.wide\n      // note: we use only the scope class (.x-foo-42) and not the hostSelector\n      // (x-foo) to scope :host rules; this helps make property host rules\n      // have low specificity. They are overrideable by class selectors but,\n      // unfortunately, not by type selectors (e.g. overriding via\n      // `.special` is ok, but not by `x-foo`).\n      _scopeSelector: function(rule, hostRx, hostSelector, viaAttr, scopeId) {\n        rule.transformedSelector = rule.transformedSelector || rule.selector;\n        var selector = rule.transformedSelector;\n        var scope = viaAttr ? '[' + styleTransformer.SCOPE_NAME + '~=' +\n          scopeId + ']' :\n          '.' + scopeId;\n        var parts = selector.split(',');\n        for (var i=0, l=parts.length, p; (i<l) && (p=parts[i]); i++) {\n          parts[i] = p.match(hostRx) ?\n            p.replace(hostSelector, scope) :\n            scope + ' ' + p;\n        }\n        rule.selector = parts.join(',');\n      },\n\n      applyElementScopeSelector: function(element, selector, old, viaAttr) {\n        var c = viaAttr ? element.getAttribute(styleTransformer.SCOPE_NAME) :\n          (element.getAttribute('class') || '');\n        var v = old ? c.replace(old, selector) :\n          (c ? c + ' ' : '') + this.XSCOPE_NAME + ' ' + selector;\n        if (c !== v) {\n          if (viaAttr) {\n            element.setAttribute(styleTransformer.SCOPE_NAME, v);\n          } else {\n            element.setAttribute('class', v);\n          }\n        }\n      },\n\n      applyElementStyle: function(element, properties, selector, style) {\n        // calculate cssText to apply\n        var cssText = style ? style.textContent || '' :\n          this.transformStyles(element, properties, selector);\n        // if shady and we have a cached style that is not style, decrement\n        var s = element._customStyle;\n        if (s && !settings.useNativeShadow && (s !== style)) {\n          s._useCount--;\n          if (s._useCount <= 0 && s.parentNode) {\n            s.parentNode.removeChild(s);\n          }\n        }\n        // apply styling always under native or if we generated style\n        // or the cached style is not in document(!)\n        if (settings.useNativeShadow) {\n          // update existing style only under native\n          if (element._customStyle) {\n            element._customStyle.textContent = cssText;\n            style = element._customStyle;\n          // otherwise, if we have css to apply, do so\n          } else if (cssText) {\n            // apply css after the scope style of the element to help with\n            // style precedence rules.\n            style = styleUtil.applyCss(cssText, selector, element.root,\n              element._scopeStyle);\n          }\n        } else {\n          // shady and no cache hit\n          if (!style) {\n            // apply css after the scope style of the element to help with\n            // style precedence rules.\n            if (cssText) {\n              style = styleUtil.applyCss(cssText, selector, null,\n                element._scopeStyle);\n            }\n          // shady and cache hit but not in document\n          } else if (!style.parentNode) {\n            if (IS_IE && cssText.indexOf('@media') > -1) {\n              // @media rules may be stale in IE 10 and 11\n              // refresh the text content of the style to revalidate them.\n              style.textContent = cssText;\n            }\n            styleUtil.applyStyle(style, null, element._scopeStyle);\n          }\n        }\n        // ensure this style is our custom style and increment its use count.\n        if (style) {\n          style._useCount = style._useCount || 0;\n          // increment use count if we changed styles\n          if (element._customStyle != style) {\n            style._useCount++;\n          }\n          element._customStyle = style;\n        }\n        return style;\n      },\n\n      // customStyle properties are applied if they are truthy or 0. Otherwise,\n      // they are skipped; this allows properties previously set in customStyle\n      // to be easily reset to inherited values.\n      mixinCustomStyle: function(props, customStyle) {\n        var v;\n        for (var i in customStyle) {\n          v = customStyle[i];\n          if (v || v === 0) {\n            props[i] = v;\n          }\n        }\n      },\n\n      /* Applies a set of properties to an element's style natively (used to\n       * support element.customStyle / element.updateStyles)\n       */\n      updateNativeStyleProperties: function(element, properties) {\n        var oldPropertyNames = element.__customStyleProperties;\n        if (oldPropertyNames) {\n          // remove previous properties\n          for (var i=0; i < oldPropertyNames.length; i++) {\n            element.style.removeProperty(oldPropertyNames[i]);\n          }\n        }\n        var propertyNames = [];\n        // apply properties\n        for (var p in properties) {\n          // NOTE: for bc with shim, don't apply null values.\n          if (properties[p] !== null) {\n            element.style.setProperty(p, properties[p]);\n            propertyNames.push(p);\n          }\n        }\n        element.__customStyleProperties = propertyNames;\n      },\n\n      rx: styleUtil.rx,\n      XSCOPE_NAME: 'x-scope'\n\n    };\n\n    function addToBitMask(n, bits) {\n      var o = parseInt(n / 32);\n      var v = 1 << (n % 32);\n      bits[o] = (bits[o] || 0) | v;\n    }\n\n  })();\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/style-properties.html\n// module id = 60\n// module chunks = 0","/*__wc__loader*/\nrequire('./style-util.html');\n\nrequire('./style-transformer.html');\n\nrequire('./style-defaults.html');\n\nrequire('./apply-shim.html');\n\nrequire('./settings.html');\n\n\n(function() {\n\n  var propertyUtils = Polymer.StyleProperties;\n  var styleUtil = Polymer.StyleUtil;\n  var cssParse = Polymer.CssParse;\n  var styleDefaults = Polymer.StyleDefaults;\n  var styleTransformer = Polymer.StyleTransformer;\n  var applyShim = Polymer.ApplyShim;\n  var debounce = Polymer.Debounce;\n  var settings = Polymer.Settings;\n\n  var updateDebouncer;\n\n  Polymer({\n\n    is: 'custom-style',\n    extends: 'style',\n    _template: null,\n\n    properties: {\n      // include is a property so that it deserializes\n      /**\n       * Specify `include` to identify a `dom-module` containing style data which\n       * should be used within the `custom-style`. By using `include` style data\n       * may be shared between multiple different `custom-style` elements.\n       *\n       * To include multiple `dom-modules`, use `include=\"module1 module2\"`.\n       */\n      include: String\n    },\n\n    ready: function() {\n      // NOTE: we cannot just check attached because custom elements in\n      // HTMLImports do not get attached.\n      this.__appliedElement = this.__appliedElement || this;\n      this.__cssBuild = styleUtil.getCssBuildType(this)\n      // forward css-build status to applied element in main document\n      if (this.__appliedElement !== this) {\n        this.__appliedElement.__cssBuild = this.__cssBuild;\n      }\n      // needed becuase elements in imports do not get 'attached'\n      // TODO(sorvell): we could only do this if and only if\n      // this.ownerDocument != document;\n      // however, if we do that, we also have to change the `attached`\n      // code to go at `_beforeAttached` time because this is when\n      // elements produce styles (otherwise this breaks @apply shim)\n      this._tryApply();\n    },\n\n    // needed to support dynamic custom styles created outside document\n    // and then added to it.\n    attached: function() {\n      this._tryApply();\n    },\n\n    _tryApply: function() {\n      if (!this._appliesToDocument) {\n        // only apply variables if and only if this style is not inside\n        // a dom-module\n        if (this.parentNode &&\n          (this.parentNode.localName !== 'dom-module')) {\n          this._appliesToDocument = true;\n          var e = this.__appliedElement;\n          // used applied element from HTMLImports polyfill or this\n          if (!settings.useNativeCSSProperties) {\n            // if default style properties exist when\n            // this element tries to apply styling then,\n            // it has been loaded async and needs to trigger a full updateStyles\n            // to guarantee properties it provides update correctly.\n            this.__needsUpdateStyles = styleDefaults.hasStyleProperties();\n            styleDefaults.addStyle(e);\n          }\n          // we may not have any textContent yet due to parser yielding\n          // if so, wait until we do...\n          if (e.textContent || this.include) {\n            this._apply(true);\n          } else {\n            var self = this;\n            var observer = new MutationObserver(function() {\n              observer.disconnect();\n              self._apply(true);\n            });\n            observer.observe(e, {childList: true});\n          }\n        }\n      }\n    },\n\n    _updateStyles: function() {\n      Polymer.updateStyles();\n    },\n\n    // polyfill this style with root scoping and\n    // apply custom properties!\n    _apply: function(initialApply) {\n      // used applied element from HTMLImports polyfill or this\n      var e = this.__appliedElement;\n      if (this.include) {\n        e.textContent = styleUtil.cssFromModules(this.include, true) +\n          e.textContent;\n      }\n      if (!e.textContent) {\n        return;\n      }\n      // static shimming\n      // (css build will already process document rule and apply shim)\n      // cases:\n      // build = shady, use = shady => do nothing\n      // build = shadow, use = shadow => do nothing\n      // build = shady, use = shadow => not supported\n      // build = shadow, use = shady => needs shimming.\n      // build = none => needs shimming\n      var buildType = this.__cssBuild;\n      var targetedBuild = styleUtil.isTargetedBuild(buildType);\n\n      // bail early if the style is already built for current settings\n      if (settings.useNativeCSSProperties && targetedBuild) {\n        return;\n      }\n      var styleRules = styleUtil.rulesForStyle(e);\n      if (!targetedBuild) {\n        styleUtil.forEachRule(styleRules,\n          function(rule) {\n            // shim the selector for current runtime settings\n            styleTransformer.documentRule(rule);\n          }\n        );\n        // run the apply shim if unbuilt and using native css custom properties\n        if (settings.useNativeCSSProperties && !buildType) {\n          applyShim.transform([e]);\n        }\n      }\n      // custom properties shimming\n      // (if we use native custom properties, no need to apply any property shimming)\n      if (settings.useNativeCSSProperties) {\n        // there's no targeted build, so the shimmed styles must be applied.\n        e.textContent = styleUtil.toCssText(styleRules);\n      // otherwise needs property shimming...\n      } else {\n        // Allow all custom-styles defined in this turn to register\n        // before applying any properties. This helps ensure that all properties\n        // are defined before any are consumed.\n        // Premature application of properties can occur in 2 cases:\n        // (1) A property `--foo` is consumed in a custom-style\n        // before another custom-style produces `--foo`.\n        // In general, we require custom properties to be defined before being\n        // used in elements so supporting this for custom-style\n        // is dubious but is slightly more like native properties where this\n        // is supported.\n        // (2) A set of in order styles (A, B) are re-ordered due to a parser\n        // yield that makes A wait for textContent. This reorders its\n        // `_apply` after B.\n        // This case should only occur with native webcomponents.\n        var self = this;\n        var fn = function fn() {\n          self._flushCustomProperties();\n        }\n        if (initialApply) {\n          Polymer.RenderStatus.whenReady(fn);\n        } else {\n          fn();\n        }\n      }\n    },\n\n    _flushCustomProperties: function() {\n      // if this style has not yet applied at all and it was loaded asynchronously\n      // (detected by Polymer being ready when this element tried to apply), then\n      // do a full updateStyles to ensure that\n      if (this.__needsUpdateStyles) {\n        this.__needsUpdateStyles = false;\n        updateDebouncer = debounce(updateDebouncer, this._updateStyles);\n      } else {\n        this._applyCustomProperties();\n      }\n    },\n\n    _applyCustomProperties: function() {\n      var element = this.__appliedElement;\n      this._computeStyleProperties();\n      var props = this._styleProperties;\n      var rules = styleUtil.rulesForStyle(element);\n      if (!rules) {\n        return;\n      }\n      element.textContent = styleUtil.toCssText(rules, function(rule) {\n        var css = rule.cssText = rule.parsedCssText;\n        if (rule.propertyInfo && rule.propertyInfo.cssText) {\n          // remove property assignments\n          // so next function isn't confused\n          // NOTE: we have 3 categories of css:\n          // (1) normal properties,\n          // (2) custom property assignments (--foo: red;),\n          // (3) custom property usage: border: var(--foo); @apply(--foo);\n          // In elements, 1 and 3 are separated for efficiency; here they\n          // are not and this makes this case unique.\n          css = cssParse.removeCustomPropAssignment(css);\n          // replace with reified properties, scenario is same as mixin\n          rule.cssText = propertyUtils.valueForProperties(css, props);\n        }\n      });\n    }\n\n  });\n\n})();\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/custom-style.html\n// module id = 61\n// module chunks = 0","/*__wc__loader*/\nrequire('./templatizer.html');\n\n\n\n  /**\n   * Creates a pseudo-custom-element that maps property values to bindings\n   * in DOM.\n   * \n   * `stamp` method creates an instance of the pseudo-element. The instance\n   * references a document-fragment containing the stamped and bound dom\n   * via it's `root` property. \n   *  \n   */\n  Polymer({\n\n    is: 'dom-template',\n    extends: 'template',\n    _template: null,\n\n    behaviors: [\n      Polymer.Templatizer\n    ],\n\n    ready: function() {\n      this.templatize(this);\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/template/dom-template.html\n// module id = 62\n// module chunks = 0","/*__wc__loader*/\nrequire('./templatizer.html');\n\nrequire('../collection.html');\n\n\n\n  Polymer({\n\n    is: 'dom-repeat',\n    extends: 'template',\n    _template: null,\n\n    /**\n     * Fired whenever DOM is added or removed by this template (by\n     * default, rendering occurs lazily).  To force immediate rendering, call\n     * `render`.\n     *\n     * @event dom-change\n     */\n\n    properties: {\n\n      /**\n       * An array containing items determining how many instances of the template\n       * to stamp and that that each template instance should bind to.\n       */\n      items: {\n        type: Array\n      },\n\n      /**\n       * The name of the variable to add to the binding scope for the array\n       * element associated with a given template instance.\n       */\n      as: {\n        type: String,\n        value: 'item'\n      },\n\n      /**\n       * The name of the variable to add to the binding scope with the index\n       * for the inst.  If `sort` is provided, the index will reflect the\n       * sorted order (rather than the original array order).\n       */\n      indexAs: {\n        type: String,\n        value: 'index'\n      },\n\n      /**\n       * A function that should determine the sort order of the items.  This\n       * property should either be provided as a string, indicating a method\n       * name on the element's host, or else be an actual function.  The\n       * function should match the sort function passed to `Array.sort`.\n       * Using a sort function has no effect on the underlying `items` array.\n       */\n      sort: {\n        type: Function,\n        observer: '_sortChanged'\n      },\n\n      /**\n       * `filter`. Specifies a filter callback function, that takes a single\n       * argument (the item) and returns true to display the item, false to omit\n       * it. Using a filter callback has no effect on the underlying `items`\n       * array.\n       * (Note that this is **similar** to the standard `Array`\n       * [`filter`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) API, but the callback only takes a single argument.)\n       */\n      filter: {\n        type: Function,\n        observer: '_filterChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `observe` property\n       * should be set to a space-separated list of the names of item\n       * sub-fields that should trigger a re-sort or re-filter when changed.\n       * These should generally be fields of `item` that the sort or filter\n       * function depends on.\n       */\n      observe: {\n        type: String,\n        observer: '_observeChanged'\n      },\n\n      /**\n       * When using a `filter` or `sort` function, the `delay` property\n       * determines a debounce time after a change to observed item\n       * properties that must pass before the filter or sort is re-run.\n       * This is useful in rate-limiting shuffing of the view when\n       * item changes may be frequent.\n       */\n      delay: Number,\n\n      /**\n       * Count of currently rendered items after `filter` (if any) has been applied.\n       * If \"chunking mode\" is enabled, `renderedItemCount` is updated each time a\n       * set of template instances is rendered.\n       *\n       */\n      renderedItemCount: {\n        type: Number,\n        notify: !Polymer.Settings.suppressTemplateNotifications,\n        readOnly: true\n      },\n\n      /**\n       * Defines an initial count of template instances to render after setting\n       * the `items` array, before the next paint, and puts the `dom-repeat`\n       * into \"chunking mode\".  The remaining items will be created and rendered\n       * incrementally at each animation frame therof until all instances have\n       * been rendered.\n       */\n      initialCount: {\n        type: Number,\n        observer: '_initializeChunking'\n      },\n\n      /**\n       * When `initialCount` is used, this property defines a frame rate to\n       * target by throttling the number of instances rendered each frame to\n       * not exceed the budget for the target frame rate.  Setting this to a\n       * higher number will allow lower latency and higher throughput for\n       * things like event handlers, but will result in a longer time for the\n       * remaining items to complete rendering.\n       */\n      targetFramerate: {\n        type: Number,\n        value: 20\n      },\n\n      /**\n       * When the global `Polymer.Settings.suppressDomChange` setting is used,\n       * setting `notifyDomChange: true` will enable firing `dom-change` events\n       * on this element.\n       */\n      notifyDomChange: {\n        type: Boolean\n      },\n\n      _targetFrameTime: {\n        type: Number,\n        computed: '_computeFrameTime(targetFramerate)'\n      }\n\n    },\n\n    behaviors: [\n      Polymer.Templatizer\n    ],\n\n    observers: [\n      '_itemsChanged(items.*)'\n    ],\n\n    created: function() {\n      this._instances = [];\n      this._pool = [];\n      this._limit = Infinity;\n      var self = this;\n      this._boundRenderChunk = function() {\n        self._renderChunk();\n      };\n    },\n\n    detached: function() {\n      this.__isDetached = true;\n      for (var i=0; i<this._instances.length; i++) {\n        this._detachInstance(i);\n      }\n    },\n\n    attached: function() {\n      // only perform attachment if the element was previously detached.\n      if (this.__isDetached) {\n        this.__isDetached = false;\n        var refNode;\n        var parentNode = Polymer.dom(this).parentNode;\n        // Affordance for 2.x hybrid mode\n        if (parentNode.localName == this.is) {\n          refNode = parentNode;\n          parentNode = Polymer.dom(parentNode).parentNode;\n        } else {\n          refNode = this;\n        }\n        var parent = Polymer.dom(parentNode);\n        for (var i=0; i<this._instances.length; i++) {\n          this._attachInstance(i, parent, refNode);\n        }\n      }\n    },\n\n    ready: function() {\n      // Template instance props that should be excluded from forwarding\n      this._instanceProps = {\n        __key__: true\n      };\n      this._instanceProps[this.as] = true;\n      this._instanceProps[this.indexAs] = true;\n      // Templatizing (generating the instance constructor) needs to wait\n      // until ready, since won't have its template content handed back to\n      // it until then\n      if (!this.ctor) {\n        this.templatize(this);\n      }\n    },\n\n    _sortChanged: function(sort) {\n      var dataHost = this._getRootDataHost();\n      this._sortFn = sort && (typeof sort == 'function' ? sort :\n        function() { return dataHost[sort].apply(dataHost, arguments); });\n      this._needFullRefresh = true;\n      if (this.items) {\n        this._debounceTemplate(this._render);\n      }\n    },\n\n    _filterChanged: function(filter) {\n      var dataHost = this._getRootDataHost();\n      this._filterFn = filter && (typeof filter == 'function' ? filter :\n        function() { return dataHost[filter].apply(dataHost, arguments); });\n      this._needFullRefresh = true;\n      if (this.items) {\n        this._debounceTemplate(this._render);\n      }\n    },\n\n    _computeFrameTime: function(rate) {\n      return Math.ceil(1000/rate);\n    },\n\n    _initializeChunking: function() {\n      if (this.initialCount) {\n        this._limit = this.initialCount;\n        this._chunkCount = this.initialCount;\n        this._lastChunkTime = performance.now();\n      }\n    },\n\n    _tryRenderChunk: function() {\n      // Debounced so that multiple calls through `_render` between animation\n      // frames only queue one new rAF (e.g. array mutation & chunked render)\n      if (this.items && this._limit < this.items.length) {\n        this.debounce('renderChunk', this._requestRenderChunk);\n      }\n    },\n\n    _requestRenderChunk: function() {\n      requestAnimationFrame(this._boundRenderChunk);\n    },\n\n    _renderChunk: function() {\n      // Simple auto chunkSize throttling algorithm based on feedback loop:\n      // measure actual time between frames and scale chunk count by ratio\n      // of target/actual frame time\n      var currChunkTime = performance.now();\n      var ratio = this._targetFrameTime / (currChunkTime - this._lastChunkTime);\n      this._chunkCount = Math.round(this._chunkCount * ratio) || 1;\n      this._limit += this._chunkCount;\n      this._lastChunkTime = currChunkTime;\n      this._debounceTemplate(this._render);\n    },\n\n    _observeChanged: function() {\n      this._observePaths = this.observe &&\n        this.observe.replace('.*', '.').split(' ');\n    },\n\n    _itemsChanged: function(change) {\n      if (change.path == 'items') {\n        if (Array.isArray(this.items)) {\n          this.collection = Polymer.Collection.get(this.items);\n        } else if (!this.items) {\n          this.collection = null;\n        } else {\n          this._error(this._logf('dom-repeat', 'expected array for `items`,' +\n            ' found', this.items));\n        }\n        this._keySplices = [];\n        this._indexSplices = [];\n        this._needFullRefresh = true;\n        this._initializeChunking();\n        this._debounceTemplate(this._render);\n      } else if (change.path == 'items.splices') {\n        this._keySplices = this._keySplices.concat(change.value.keySplices);\n        this._indexSplices = this._indexSplices.concat(change.value.indexSplices);\n        this._debounceTemplate(this._render);\n      } else { // items.*\n        // slice off 'items.' ('items.'.length == 6)\n        var subpath = change.path.slice(6);\n        this._forwardItemPath(subpath, change.value);\n        this._checkObservedPaths(subpath);\n      }\n    },\n\n    _checkObservedPaths: function(path) {\n      if (this._observePaths) {\n        path = path.substring(path.indexOf('.') + 1);\n        var paths = this._observePaths;\n        for (var i=0; i<paths.length; i++) {\n          if (path.indexOf(paths[i]) === 0) {\n            // TODO(kschaaf): interim solution: ideally this is just an incremental\n            // insertion sort of the changed item\n            this._needFullRefresh = true;\n            if (this.delay) {\n              this.debounce('render', this._render, this.delay);\n            } else {\n              this._debounceTemplate(this._render);\n            }\n            return;\n          }\n        }\n      }\n    },\n\n    /**\n     * Forces the element to render its content. Normally rendering is\n     * asynchronous to a provoking change. This is done for efficiency so\n     * that multiple changes trigger only a single render. The render method\n     * should be called if, for example, template rendering is required to\n     * validate application state.\n     */\n    render: function() {\n      // Queue this repeater, then flush all in order\n      this._needFullRefresh = true;\n      this._debounceTemplate(this._render);\n      this._flushTemplates();\n    },\n\n    _render: function() {\n      // Choose rendering path: full vs. incremental using splices\n      if (this._needFullRefresh) {\n        // Full refresh when items, sort, or filter change, or when render() called\n        this._applyFullRefresh();\n        this._needFullRefresh = false;\n      } else if (this._keySplices.length) {\n        // Incremental refresh when splices were queued\n        if (this._sortFn) {\n          this._applySplicesUserSort(this._keySplices);\n        } else {\n          if (this._filterFn) {\n            // TODK(kschaaf): Filtering using array sort takes slow path\n            this._applyFullRefresh();\n          } else {\n            this._applySplicesArrayOrder(this._indexSplices);\n          }\n        }\n      } else {\n        // Otherwise only limit changed; no change to instances, just need to\n        // upgrade more placeholders to instances\n      }\n      this._keySplices = [];\n      this._indexSplices = [];\n      // Update final _keyToInstIdx and instance indices, and\n      // upgrade/downgrade placeholders\n      var keyToIdx = this._keyToInstIdx = {};\n      for (var i=this._instances.length-1; i>=0; i--) {\n        var inst = this._instances[i];\n        if (inst.isPlaceholder && i<this._limit) {\n          inst = this._insertInstance(i, inst.__key__);\n        } else if (!inst.isPlaceholder && i>=this._limit) {\n          inst = this._downgradeInstance(i, inst.__key__);\n        }\n        keyToIdx[inst.__key__] = i;\n        if (!inst.isPlaceholder) {\n          inst.__setProperty(this.indexAs, i, true);\n        }\n      }\n      // Reset the pool\n      // TODO(kschaaf): Reuse pool across turns and nested templates\n      // Requires updating parentProps and dealing with the fact that path\n      // notifications won't reach instances sitting in the pool, which\n      // could result in out-of-sync instances since simply re-setting\n      // `item` may not be sufficient if the pooled instance happens to be\n      // the same item.\n      this._pool.length = 0;\n      // Set rendered item count\n      this._setRenderedItemCount(this._instances.length);\n      // Notify users\n      if (!Polymer.Settings.suppressTemplateNotifications || this.notifyDomChange) {\n        this.fire('dom-change');\n      }\n      // Check to see if we need to render more items\n      this._tryRenderChunk();\n    },\n\n    // Render method 1: full refesh\n    // ----\n    // Full list of keys is pulled from the collection, then sorted, filtered,\n    // and iterated to create (or reuse) existing instances\n    _applyFullRefresh: function() {\n      var c = this.collection;\n      // Start with unordered keys for user sort,\n      // or get them in array order for array order\n      var keys;\n      if (this._sortFn) {\n        keys = c ? c.getKeys() : [];\n      } else {\n        keys = [];\n        var items = this.items;\n        if (items) {\n          for (var i=0; i<items.length; i++) {\n            keys.push(c.getKey(items[i]));\n          }\n        }\n      }\n      // capture reference for use in filter/sort fn's\n      var self = this;\n      // Apply user filter to keys\n      if (this._filterFn) {\n        keys = keys.filter(function(a) {\n          return self._filterFn(c.getItem(a));\n        });\n      }\n      // Apply user sort to keys\n      if (this._sortFn) {\n        keys.sort(function(a, b) {\n          return self._sortFn(c.getItem(a), c.getItem(b));\n        });\n      }\n      // Generate instances and assign items and keys\n      for (i=0; i<keys.length; i++) {\n        var key = keys[i];\n        var inst = this._instances[i];\n        if (inst) {\n          inst.__key__ = key;\n          if (!inst.isPlaceholder && i < this._limit) {\n            inst.__setProperty(this.as, c.getItem(key), true);\n          }\n        } else if (i < this._limit) {\n          this._insertInstance(i, key);\n        } else {\n          this._insertPlaceholder(i, key);\n        }\n      }\n      // Remove any extra instances from previous state\n      for (var j=this._instances.length-1; j>=i; j--) {\n        this._detachAndRemoveInstance(j);\n      }\n    },\n\n    _numericSort: function(a, b) {\n      return a - b;\n    },\n\n    // Render method 2: incremental update using splices with user sort applied\n    // ----\n    // Removed/added keys are deduped, all removed rows are detached and pooled\n    // first, and added rows are insertion-sorted into place using user sort\n    _applySplicesUserSort: function(splices) {\n      var c = this.collection;\n      var keyMap = {};\n      var key;\n      // Dedupe added and removed keys to a final added/removed map\n      for (var i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n        for (var j=0; j<s.removed.length; j++) {\n          key = s.removed[j];\n          keyMap[key] = keyMap[key] ? null : -1;\n        }\n        for (j=0; j<s.added.length; j++) {\n          key = s.added[j];\n          keyMap[key] = keyMap[key] ? null : 1;\n        }\n      }\n      // Convert added/removed key map to added/removed arrays\n      var removedIdxs = [];\n      var addedKeys = [];\n      for (key in keyMap) {\n        if (keyMap[key] === -1) {\n          removedIdxs.push(this._keyToInstIdx[key]);\n        }\n        if (keyMap[key] === 1) {\n          addedKeys.push(key);\n        }\n      }\n      // Remove & pool removed instances\n      if (removedIdxs.length) {\n        // Sort removed instances idx's then remove backwards,\n        // so we don't invalidate instance index\n        // use numeric sort, default .sort is alphabetic\n        removedIdxs.sort(this._numericSort);\n        for (i=removedIdxs.length-1; i>=0 ; i--) {\n          var idx = removedIdxs[i];\n          // Removed idx may be undefined if item was previously filtered out\n          if (idx !== undefined) {\n            this._detachAndRemoveInstance(idx);\n          }\n        }\n      }\n      // capture reference for use in filter/sort fn's\n      var self = this;\n      // Add instances for added keys\n      if (addedKeys.length) {\n        // Filter added keys\n        if (this._filterFn) {\n          addedKeys = addedKeys.filter(function(a) {\n            return self._filterFn(c.getItem(a));\n          });\n        }\n        // Sort added keys\n        addedKeys.sort(function(a, b) {\n          return self._sortFn(c.getItem(a), c.getItem(b));\n        });\n        // Insertion-sort new instances into place (from pool or newly created)\n        var start = 0;\n        for (i=0; i<addedKeys.length; i++) {\n          start = this._insertRowUserSort(start, addedKeys[i]);\n        }\n      }\n    },\n\n    _insertRowUserSort: function(start, key) {\n      var c = this.collection;\n      var item = c.getItem(key);\n      var end = this._instances.length - 1;\n      var idx = -1;\n      // Binary search for insertion point\n      while (start <= end) {\n        var mid = (start + end) >> 1;\n        var midKey = this._instances[mid].__key__;\n        var cmp = this._sortFn(c.getItem(midKey), item);\n        if (cmp < 0) {\n          start = mid + 1;\n        } else if (cmp > 0) {\n          end = mid - 1;\n        } else {\n          idx = mid;\n          break;\n        }\n      }\n      if (idx < 0) {\n        idx = end + 1;\n      }\n      // Insert instance at insertion point\n      this._insertPlaceholder(idx, key);\n      return idx;\n    },\n\n    // Render method 3: incremental update using splices with array order\n    // ----\n    // Splices are processed in order; removed rows are pooled, and added\n    // rows are as placeholders, and placeholders are updated to\n    // actual rows at the end to take full advantage of removed rows\n    _applySplicesArrayOrder: function(splices) {\n      for (var i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n        // Detach & pool removed instances\n        for (var j=0; j<s.removed.length; j++) {\n          this._detachAndRemoveInstance(s.index);\n        }\n        for (j=0; j<s.addedKeys.length; j++) {\n          this._insertPlaceholder(s.index+j, s.addedKeys[j]);\n        }\n      }\n    },\n\n    _detachInstance: function(idx) {\n      var inst = this._instances[idx];\n      if (!inst.isPlaceholder) {\n        for (var i=0; i<inst._children.length; i++) {\n          var el = inst._children[i];\n          Polymer.dom(inst.root).appendChild(el);\n        }\n        return inst;\n      }\n    },\n\n    _attachInstance: function(idx, parent, refNode) {\n      var inst = this._instances[idx];\n      if (!inst.isPlaceholder) {\n        parent.insertBefore(inst.root, refNode);\n      }\n    },\n\n    _detachAndRemoveInstance: function(idx) {\n      var inst = this._detachInstance(idx);\n      if (inst) {\n        this._pool.push(inst);\n      }\n      this._instances.splice(idx, 1);\n    },\n\n    _insertPlaceholder: function(idx, key) {\n      this._instances.splice(idx, 0, {\n        isPlaceholder: true,\n        __key__: key\n      });\n    },\n\n    _stampInstance: function(idx, key) {\n      var model = {\n        __key__: key\n      };\n      model[this.as] = this.collection.getItem(key);\n      model[this.indexAs] = idx;\n      return this.stamp(model);\n    },\n\n    _insertInstance: function(idx, key) {\n      var inst = this._pool.pop();\n      if (inst) {\n        // TODO(kschaaf): If the pool is shared across turns, parentProps\n        // need to be re-set to reused instances in addition to item/key\n        inst.__setProperty(this.as, this.collection.getItem(key), true);\n        inst.__setProperty('__key__', key, true);\n      } else {\n        inst = this._stampInstance(idx, key);\n      }\n      var beforeRow = this._instances[idx + 1];\n      var beforeNode = beforeRow && !beforeRow.isPlaceholder ? beforeRow._children[0] : this;\n      var parentNode = Polymer.dom(this).parentNode;\n      // Affordance for 2.x hybrid mode\n      if (parentNode.localName == this.is) {\n        if (beforeNode == this) {\n          beforeNode = parentNode;\n        }\n        parentNode = Polymer.dom(parentNode).parentNode;\n      }\n      Polymer.dom(parentNode).insertBefore(inst.root, beforeNode);\n      this._instances[idx] = inst;\n      return inst;\n    },\n\n    _downgradeInstance: function(idx, key) {\n      var inst = this._detachInstance(idx);\n      if (inst) {\n        this._pool.push(inst);\n      }\n      inst = {\n        isPlaceholder: true,\n        __key__: key\n      };\n      this._instances[idx] = inst;\n      return inst;\n    },\n\n    // Implements extension point from Templatizer mixin\n    _showHideChildren: function(hidden) {\n      for (var i=0; i<this._instances.length; i++) {\n        if (!this._instances[i].isPlaceholder)\n          this._instances[i]._showHideChildren(hidden);\n      }\n    },\n\n    // Called as a side effect of a template item change, responsible\n    // for notifying items.<key-for-inst> change up to host\n    _forwardInstanceProp: function(inst, prop, value) {\n      if (prop == this.as) {\n        var idx;\n        if (this._sortFn || this._filterFn) {\n          // Known slow lookup: when sorted/filtered, there is no way to\n          // efficiently memoize the array index and keep it in sync with array\n          // mutations, so we need to look the item up in the array\n          // This can happen e.g. when array of strings is repeated into inputs\n          idx = this.items.indexOf(this.collection.getItem(inst.__key__));\n        } else {\n          // When there is no sort/filter, the view index is the array index\n          idx = inst[this.indexAs];\n        }\n        this.set('items.' + idx, value);\n      }\n    },\n\n    // Implements extension point from Templatizer\n    // Called as a side effect of a template instance path change, responsible\n    // for notifying items.<key-for-inst>.<path> change up to host\n    _forwardInstancePath: function(inst, path, value) {\n      if (path.indexOf(this.as + '.') === 0) {\n        this._notifyPath('items.' + inst.__key__ + '.' +\n          path.slice(this.as.length + 1), value);\n      }\n    },\n\n    // Implements extension point from Templatizer mixin\n    // Called as side-effect of a host property change, responsible for\n    // notifying parent path change on each inst\n    _forwardParentProp: function(prop, value) {\n      var i$ = this._instances;\n      for (var i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {\n        if (!inst.isPlaceholder) {\n          inst.__setProperty(prop, value, true);\n        }\n      }\n    },\n\n    // Implements extension point from Templatizer\n    // Called as side-effect of a host path change, responsible for\n    // notifying parent path change on each inst\n    _forwardParentPath: function(path, value) {\n      var i$ = this._instances;\n      for (var i=0, inst; (i<i$.length) && (inst=i$[i]); i++) {\n        if (!inst.isPlaceholder) {\n          inst._notifyPath(path, value, true);\n        }\n      }\n    },\n\n    // Called as a side effect of a host items.<key>.<path> path change,\n    // responsible for notifying item.<path> changes to inst for key\n    _forwardItemPath: function(path, value) {\n      if (this._keyToInstIdx) {\n        var dot = path.indexOf('.');\n        var key = path.substring(0, dot < 0 ? path.length : dot);\n        var idx = this._keyToInstIdx[key];\n        var inst = this._instances[idx];\n        if (inst && !inst.isPlaceholder) {\n          if (dot >= 0) {\n            path = this.as + '.' + path.substring(dot+1);\n            inst._notifyPath(path, value, true);\n          } else {\n            inst.__setProperty(this.as, value, true);\n          }\n        }\n      }\n    },\n\n    /**\n     * Returns the item associated with a given element stamped by\n     * this `dom-repeat`.\n     *\n     * Note, to modify sub-properties of the item,\n     * `modelForElement(el).set('item.<sub-prop>', value)`\n     * should be used.\n     *\n     * @method itemForElement\n     * @param {HTMLElement} el Element for which to return the item.\n     * @return {any} Item associated with the element.\n     */\n    itemForElement: function(el) {\n      var instance = this.modelForElement(el);\n      return instance && instance[this.as];\n    },\n\n    /**\n     * Returns the `Polymer.Collection` key associated with a given\n     * element stamped by this `dom-repeat`.\n     *\n     * @method keyForElement\n     * @param {HTMLElement} el Element for which to return the key.\n     * @return {any} Key associated with the element.\n     */\n    keyForElement: function(el) {\n      var instance = this.modelForElement(el);\n      return instance && instance.__key__;\n    },\n\n    /**\n     * Returns the inst index for a given element stamped by this `dom-repeat`.\n     * If `sort` is provided, the index will reflect the sorted order (rather\n     * than the original array order).\n     *\n     * @method indexForElement\n     * @param {HTMLElement} el Element for which to return the index.\n     * @return {any} Row index associated with the element (note this may\n     *   not correspond to the array index if a user `sort` is applied).\n     */\n    indexForElement: function(el) {\n      var instance = this.modelForElement(el);\n      return instance && instance[this.indexAs];\n    }\n\n  });\n\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/template/dom-repeat.html\n// module id = 63\n// module chunks = 0","/*__wc__loader*/\nrequire('./debounce.html');\n\n\n\n  Polymer._collections = new WeakMap();\n\n  Polymer.Collection = function(userArray) {\n    Polymer._collections.set(userArray, this);\n    this.userArray = userArray;\n    this.store = userArray.slice();\n    this.initMap();\n  };\n\n  Polymer.Collection.prototype = {\n\n    constructor: Polymer.Collection,\n\n    initMap: function() {\n      var omap = this.omap = new WeakMap();\n      var pmap = this.pmap = {};\n      var s = this.store;\n      for (var i=0; i<s.length; i++) {\n        var item = s[i];\n        if (item && typeof item == 'object') {\n          omap.set(item, i);\n        } else {\n          pmap[item] = i;\n        }\n      }\n    },\n\n    add: function(item) {\n      var key = this.store.push(item) - 1;\n      if (item && typeof item == 'object') {\n        this.omap.set(item, key);\n      } else {\n        this.pmap[item] = key;\n      }\n      return '#' + key;\n    },\n\n    removeKey: function(key) {\n      if ((key = this._parseKey(key))) {\n        this._removeFromMap(this.store[key]);\n        delete this.store[key];\n      }\n    },\n\n    _removeFromMap: function(item) {\n      if (item && typeof item == 'object') {\n        this.omap.delete(item);\n      } else {\n        delete this.pmap[item];\n      }\n    },\n\n    remove: function(item) {\n      var key = this.getKey(item);\n      this.removeKey(key);\n      return key;\n    },\n\n    getKey: function(item) {\n      var key;\n      if (item && typeof item == 'object') {\n        key = this.omap.get(item);\n      } else {\n        key = this.pmap[item];\n      }\n      if (key != undefined) {\n        return '#' + key;\n      }\n    },\n\n    getKeys: function() {\n      return Object.keys(this.store).map(function(key) {\n        return '#' + key;\n      });\n    },\n\n    _parseKey: function(key) {\n      if (key && key[0] == '#') {\n        return key.slice(1);\n      }\n    },\n\n    setItem: function(key, item) {\n      if ((key = this._parseKey(key))) {\n        var old = this.store[key];\n        if (old) {\n          this._removeFromMap(old);\n        }\n        if (item && typeof item == 'object') {\n          this.omap.set(item, key);\n        } else {\n          this.pmap[item] = key;\n        }\n        this.store[key] = item;\n      }\n    },\n\n    getItem: function(key) {\n      if ((key = this._parseKey(key))) {\n        return this.store[key];\n      }\n    },\n\n    getItems: function() {\n      var items = [], store = this.store;\n      for (var key in store) {\n        items.push(store[key]);\n      }\n      return items;\n    },\n\n    // Accepts an array of standard splice records (index, addedCount, removed\n    // array), and performs two key actions:\n    // 1. Applies the splice to the collection: adds newly added items to the\n    //    store which generates a unique key for it, and removes removed items\n    //    (and their key) from the store\n    // 2. Generates a \"keySplices\" record (in contrast to the input\n    //    \"indexSplices\"), which contains an array of added and removed keys\n    //    corresponding to the added/removed items\n    _applySplices: function(splices) {\n      // Dedupe added and removed keys to a final added/removed map\n      var keyMap = {}, key;\n      for (var i=0, s; (i<splices.length) && (s=splices[i]); i++) {\n        s.addedKeys = [];\n        for (var j=0; j<s.removed.length; j++) {\n          key = this.getKey(s.removed[j]);\n          keyMap[key] = keyMap[key] ? null : -1;\n        }\n        for (j=0; j<s.addedCount; j++) {\n          var item = this.userArray[s.index + j];\n          key = this.getKey(item);\n          key = (key === undefined) ? this.add(item) : key;\n          keyMap[key] = keyMap[key] ? null : 1;\n          // Add an \"addedKeys\" array to indexSplices to capture keys associated\n          // with added items, since references to added items can be lost by\n          // further changes to the array by the time the splice is consumed\n          s.addedKeys.push(key);\n        }\n      }\n      // Convert added/removed key map to added/removed arrays\n      var removed = [];\n      var added = [];\n      for (key in keyMap) {\n        if (keyMap[key] < 0) {\n          this.removeKey(key);\n          removed.push(key);\n        }\n        if (keyMap[key] > 0) {\n          added.push(key);\n        }\n      }\n      return [{\n        removed: removed,\n        added: added\n      }];\n    }\n\n  };\n\n  Polymer.Collection.get = function(userArray) {\n    return Polymer._collections.get(userArray) ||\n      new Polymer.Collection(userArray);\n  };\n\n  Polymer.Collection.applySplices = function(userArray, splices) {\n    // Only apply splices & generate keySplices if the array already has a\n    // backing Collection, meaning there is an element monitoring its keys;\n    // Splices that happen before the collection has been created must be\n    // discarded to avoid double-entries\n    var coll = Polymer._collections.get(userArray);\n    return coll ? coll._applySplices(splices) : null;\n  };\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/collection.html\n// module id = 64\n// module chunks = 0","/*__wc__loader*/\n\n\n  Polymer({\n    is: 'array-selector',\n    _template: null,\n\n    properties: {\n\n      /**\n       * An array containing items from which selection will be made.\n       */\n      items: {\n        type: Array,\n        observer: 'clearSelection'\n      },\n\n      /**\n       * When `true`, multiple items may be selected at once (in this case,\n       * `selected` is an array of currently selected items).  When `false`,\n       * only one item may be selected at a time.\n       */\n      multi: {\n        type: Boolean,\n        value: false,\n        observer: 'clearSelection'\n      },\n\n      /**\n       * When `multi` is true, this is an array that contains any selected.\n       * When `multi` is false, this is the currently selected item, or `null`\n       * if no item is selected.\n       */\n      selected: {\n        type: Object,\n        notify: true\n      },\n\n      /**\n       * When `multi` is false, this is the currently selected item, or `null`\n       * if no item is selected.\n       */\n      selectedItem: {\n        type: Object,\n        notify: true\n      },\n\n      /**\n       * When `true`, calling `select` on an item that is already selected\n       * will deselect the item.\n       */\n      toggle: {\n        type: Boolean,\n        value: false\n      }\n    },\n\n    /**\n     * Clears the selection state.\n     *\n     * @method clearSelection\n     */\n    clearSelection: function() {\n      // Unbind previous selection\n      if (Array.isArray(this.selected)) {\n        for (var i=0; i<this.selected.length; i++) {\n          this.unlinkPaths('selected.' + i);\n        }\n      } else {\n        this.unlinkPaths('selected');\n        this.unlinkPaths('selectedItem');\n      }\n      // Initialize selection\n      if (this.multi) {\n        if (!this.selected || this.selected.length) {\n          this.selected = [];\n          this._selectedColl = Polymer.Collection.get(this.selected);\n        }\n      } else {\n        this.selected = null;\n        this._selectedColl = null;\n      }\n      this.selectedItem = null;\n    },\n\n    /**\n     * Returns whether the item is currently selected.\n     *\n     * @method isSelected\n     * @param {*} item Item from `items` array to test\n     * @return {boolean} Whether the item is selected\n     */\n    isSelected: function(item) {\n      if (this.multi) {\n        return this._selectedColl.getKey(item) !== undefined;\n      } else {\n        return this.selected == item;\n      }\n    },\n\n    /**\n     * Deselects the given item if it is already selected.\n     *\n     * @method isSelected\n     * @param {*} item Item from `items` array to deselect\n     */\n    deselect: function(item) {\n      if (this.multi) {\n        if (this.isSelected(item)) {\n          var skey = this._selectedColl.getKey(item);\n          this.arrayDelete('selected', item);\n          this.unlinkPaths('selected.' + skey);\n        }\n      } else {\n        this.selected = null;\n        this.selectedItem = null;\n        this.unlinkPaths('selected');\n        this.unlinkPaths('selectedItem');\n      }\n    },\n\n    /**\n     * Selects the given item.  When `toggle` is true, this will automatically\n     * deselect the item if already selected.\n     *\n     * @method isSelected\n     * @param {*} item Item from `items` array to select\n     */\n    select: function(item) {\n      var icol = Polymer.Collection.get(this.items);\n      var key = icol.getKey(item);\n      if (this.multi) {\n        if (this.isSelected(item)) {\n          if (this.toggle) {\n            this.deselect(item);\n          }\n        } else {\n          this.push('selected', item);\n          var skey = this._selectedColl.getKey(item);\n          this.linkPaths('selected.' + skey, 'items.' + key);\n        }\n      } else {\n        if (this.toggle && item == this.selected) {\n          this.deselect();\n        } else {\n          this.selected = item;\n          this.selectedItem = item;\n          this.linkPaths('selected', 'items.' + key);\n          this.linkPaths('selectedItem', 'items.' + key);\n        }\n      }\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/template/array-selector.html\n// module id = 65\n// module chunks = 0","/*__wc__loader*/\nrequire('./templatizer.html');\n\n\n\n  /**\n   * Stamps the template if and only if the `if` property is truthy.\n   *\n   * When `if` becomes falsey, the stamped content is hidden but not\n   * removed from dom. When `if` subsequently becomes truthy again, the content\n   * is simply re-shown. This approach is used due to its favorable performance\n   * characteristics: the expense of creating template content is paid only\n   * once and lazily.\n   *\n   * Set the `restamp` property to true to force the stamped content to be\n   * created / destroyed when the `if` condition changes.\n   */\n  Polymer({\n\n    is: 'dom-if',\n    extends: 'template',\n    _template: null,\n\n    /**\n     * Fired whenever DOM is added or removed/hidden by this template (by\n     * default, rendering occurs lazily).  To force immediate rendering, call\n     * `render`.\n     *\n     * @event dom-change\n     */\n\n    properties: {\n\n      /**\n       * A boolean indicating whether this template should stamp.\n       */\n      'if': {\n        type: Boolean,\n        value: false,\n        observer: '_queueRender'\n      },\n\n      /**\n       * When true, elements will be removed from DOM and discarded when `if`\n       * becomes false and re-created and added back to the DOM when `if`\n       * becomes true.  By default, stamped elements will be hidden but left\n       * in the DOM when `if` becomes false, which is generally results\n       * in better performance.\n       */\n      restamp: {\n        type: Boolean,\n        value: false,\n        observer: '_queueRender'\n      },\n\n      /**\n       * When the global `Polymer.Settings.suppressDomChange` setting is used,\n       * setting `notifyDomChange: true` will enable firing `dom-change` events\n       * on this element.\n       */\n      notifyDomChange: {\n        type: Boolean\n      }\n\n    },\n\n    behaviors: [\n      Polymer.Templatizer\n    ],\n\n    _queueRender: function() {\n      this._debounceTemplate(this._render);\n    },\n\n    detached: function() {\n      var parentNode = this.parentNode;\n      if (parentNode && parentNode.localName == this.is) {\n        parentNode = Polymer.dom(parentNode).parentNode;\n      }\n      if (!parentNode ||\n          (parentNode.nodeType == Node.DOCUMENT_FRAGMENT_NODE &&\n           (!Polymer.Settings.hasShadow ||\n            !(parentNode instanceof ShadowRoot)))) {\n        this._teardownInstance();\n      }\n    },\n\n    attached: function() {\n      if (this.if && this.ctor) {\n        // NOTE: ideally should not be async, but node can be attached\n        // when shady dom is in the act of distributing/composing so push it out\n        this.async(this._ensureInstance);\n      }\n    },\n\n    /**\n     * Forces the element to render its content. Normally rendering is\n     * asynchronous to a provoking change. This is done for efficiency so\n     * that multiple changes trigger only a single render. The render method\n     * should be called if, for example, template rendering is required to\n     * validate application state.\n     */\n    render: function() {\n      this._flushTemplates();\n    },\n\n    _render: function() {\n      if (this.if) {\n        if (!this.ctor) {\n          this.templatize(this);\n        }\n        this._ensureInstance();\n        this._showHideChildren();\n      } else if (this.restamp) {\n        this._teardownInstance();\n      }\n      if (!this.restamp && this._instance) {\n        this._showHideChildren();\n      }\n      if (this.if != this._lastIf) {\n        if (!Polymer.Settings.suppressTemplateNotifications || this.notifyDomChange) {\n          this.fire('dom-change');\n        }\n        this._lastIf = this.if;\n      }\n    },\n\n    _ensureInstance: function() {\n      var refNode;\n      var parentNode = Polymer.dom(this).parentNode;\n      // Affordance for 2.x hybrid mode\n      if (parentNode && parentNode.localName == this.is) {\n        refNode = parentNode;\n        parentNode = Polymer.dom(parentNode).parentNode;\n      } else {\n        refNode = this;\n      }\n      // Guard against element being detached while render was queued\n      if (parentNode) {\n        if (!this._instance) {\n          this._instance = this.stamp();\n          var root = this._instance.root;\n          Polymer.dom(parentNode).insertBefore(root, refNode);\n        } else {\n          var c$ = this._instance._children;\n          if (c$ && c$.length) {\n            // Detect case where dom-if was re-attached in new position\n            var lastChild = Polymer.dom(refNode).previousSibling;\n            if (lastChild !== c$[c$.length-1]) {\n              for (var i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n                Polymer.dom(parentNode).insertBefore(n, refNode);\n              }\n            }\n          }\n        }\n      }\n    },\n\n    _teardownInstance: function() {\n      if (this._instance) {\n        var c$ = this._instance._children;\n        if (c$ && c$.length) {\n          // use first child parent, for case when dom-if may have been detached\n          var parent = Polymer.dom(Polymer.dom(c$[0]).parentNode);\n          for (var i=0, n; (i<c$.length) && (n=c$[i]); i++) {\n            parent.removeChild(n);\n          }\n        }\n        this._instance = null;\n      }\n    },\n\n    _showHideChildren: function() {\n      var hidden = this.__hideTemplateChildren__ || !this.if;\n      if (this._instance) {\n        this._instance._showHideChildren(hidden);\n      }\n    },\n\n    // Implements extension point from Templatizer mixin\n    // Called as side-effect of a host property change, responsible for\n    // notifying parent.<prop> path change on instance\n    _forwardParentProp: function(prop, value) {\n      if (this._instance) {\n        this._instance.__setProperty(prop, value, true);\n      }\n    },\n\n    // Implements extension point from Templatizer\n    // Called as side-effect of a host path change, responsible for\n    // notifying parent.<path> path change on each row\n    _forwardParentPath: function(path, value) {\n      if (this._instance) {\n        this._instance._notifyPath(path, value, true);\n      }\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/template/dom-if.html\n// module id = 66\n// module chunks = 0","/*__wc__loader*/\n\n\n  Polymer({\n\n    /**\n     * Fired whenever DOM is stamped by this template (rendering\n     * will be deferred until all HTML imports have resolved).\n     *\n     * @event dom-change\n     */\n\n    is: 'dom-bind',\n\n    properties: {\n\n      /**\n       * When the global `Polymer.Settings.suppressDomChange` setting is used,\n       * setting `notifyDomChange: true` will enable firing `dom-change` events\n       * on this element.\n       */\n      notifyDomChange: {\n        type: Boolean\n      }\n\n    },\n\n    extends: 'template',\n    _template: null,\n\n    created: function() {\n      // Ensure dom-bind doesn't stamp until all possible dependencies\n      // have resolved\n      var self = this;\n      Polymer.RenderStatus.whenReady(function() {\n        if (document.readyState == 'loading') {\n          document.addEventListener('DOMContentLoaded', function() {\n            self._markImportsReady();\n          });\n        } else {\n          self._markImportsReady();\n        }\n      });\n    },\n\n    _ensureReady: function() {\n      if (!this._readied) {\n        this._readySelf();\n      }\n    },\n\n    _markImportsReady: function() {\n      this._importsReady = true;\n      this._ensureReady();\n    },\n\n    _registerFeatures: function() {\n      this._prepConstructor();\n    },\n\n    _insertChildren: function() {\n      var refNode;\n      var parentNode = Polymer.dom(this).parentNode;\n      // Affordance for 2.x hybrid mode\n      if (parentNode.localName == this.is) {\n        refNode = parentNode;\n        parentNode = Polymer.dom(parentNode).parentNode;\n      } else {\n        refNode = this;\n      }\n      Polymer.dom(parentNode).insertBefore(this.root, refNode);\n    },\n\n    _removeChildren: function() {\n      if (this._children) {\n        for (var i=0; i<this._children.length; i++) {\n          this.root.appendChild(this._children[i]);\n        }\n      }\n    },\n\n    _initFeatures: function() {\n      // defer _initFeatures and stamping until after attached, to support\n      // document.createElement('template', 'dom-bind') use case,\n      // where template content is filled in after creation\n    },\n\n    // avoid scoping elements as we expect dom-bind output to be in the main\n    // document\n    _scopeElementClass: function(element, selector) {\n      if (this.dataHost) {\n        return this.dataHost._scopeElementClass(element, selector);\n      } else {\n        return selector;\n      }\n    },\n\n    _configureInstanceProperties: function() {\n      // We use the _prepConfigure code below to read instance values before\n      // creating instance accessors, rather than the standard method here\n    },\n\n    _prepConfigure: function() {\n      var config = {};\n      for (var prop in this._propertyEffects) {\n        config[prop] = this[prop];\n      }\n      // Pass values set before attached as initialConfig to _setupConfigure\n      var setupConfigure = this._setupConfigure;\n      this._setupConfigure = function() {\n        setupConfigure.call(this, config);\n      };\n    },\n\n    attached: function() {\n      if (this._importsReady) {\n        this.render();\n      }\n    },\n\n    detached: function() {\n      this._removeChildren();\n    },\n\n    /**\n     * Forces the element to render its content. This is typically only\n     * necessary to call if HTMLImports with the async attribute are used.\n     */\n    render: function() {\n      this._ensureReady();\n      if (!this._children) {\n        this._template = this;\n        this._prepAnnotations();\n        this._prepEffects();\n        this._prepBehaviors();\n        this._prepConfigure();\n        this._prepBindings();\n        this._prepPropertyInfo();\n        Polymer.Base._initFeatures.call(this);\n        this._children = Polymer.TreeApi.arrayCopyChildNodes(this.root);\n      }\n      this._insertChildren();\n      if (!Polymer.Settings.suppressTemplateNotifications || this.notifyDomChange) {\n        this.fire('dom-change');\n      }\n    }\n\n  });\n\n\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/lib/template/dom-bind.html\n// module id = 67\n// module chunks = 0"],"sourceRoot":""}